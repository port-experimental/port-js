/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/blueprints/{blueprint_identifier}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a blueprint's permissions
         * @description This route allows you to retrieve the permissions of a blueprint.<br/><br/>To learn more about permissions, check out the [documentation](https://docs.port.io/build-your-software-catalog/set-catalog-rbac/examples).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a blueprint's permissions
         * @description This route allows you to update the permissions of a blueprint.<br/><br/>To learn more about permissions, check out the [documentation](https://docs.port.io/build-your-software-catalog/set-catalog-rbac/examples).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        entities?: {
                            read?: {
                                /** @description List of users (email addresses) that are allowed to perform the action. */
                                users?: string[];
                                /** @description List of teams that are allowed to perform the action. */
                                teams?: string[];
                                /** @description List of roles that are allowed to perform the action. */
                                roles?: string[];
                                ownedByTeam?: boolean;
                                /** @example {
                                 *       "combinator": "and",
                                 *       "rules": [
                                 *         {
                                 *           "property": "$blueprint",
                                 *           "operator": "=",
                                 *           "value": "service"
                                 *         },
                                 *         {
                                 *           "combinator": "or",
                                 *           "rules": [
                                 *             {
                                 *               "property": "environment",
                                 *               "operator": "=",
                                 *               "value": "production"
                                 *             },
                                 *             {
                                 *               "property": "environment",
                                 *               "operator": "=",
                                 *               "value": "staging"
                                 *             }
                                 *           ]
                                 *         }
                                 *       ]
                                 *     } */
                                policy?: {
                                    /**
                                     * @description The combinator to use for the rules.
                                     * @enum {unknown}
                                     */
                                    combinator: "and" | "or";
                                    rules: ({
                                        property: string | {
                                            property: string;
                                            /** @enum {string} */
                                            context: "user" | "userTeams";
                                        };
                                        /** @enum {unknown} */
                                        operator: "between" | "notBetween" | "=";
                                        value: {
                                            /** Format: date-time */
                                            from: string;
                                            /** Format: date-time */
                                            to: string;
                                        } | {
                                            /** @enum {string} */
                                            preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                        } | {
                                            property: string;
                                            /** @enum {string} */
                                            context: "user" | "userTeams";
                                        };
                                    } | {
                                        /** @enum {unknown} */
                                        operator: "isEmpty" | "isNotEmpty";
                                        property: string;
                                    } | {
                                        property: string | {
                                            property: string;
                                            /** @enum {string} */
                                            context: "user" | "userTeams";
                                        };
                                        /** @enum {unknown} */
                                        operator: ">" | ">=" | "<" | "<=";
                                        value: number | string | {
                                            property: string;
                                            /** @enum {string} */
                                            context: "user" | "userTeams";
                                        };
                                    } | {
                                        /** @enum {unknown} */
                                        operator: "isExpired" | "isNotExpired";
                                        property: string;
                                    } | {
                                        property: string | {
                                            property: string;
                                            /** @enum {string} */
                                            context: "user" | "userTeams";
                                        };
                                        /** @enum {unknown} */
                                        operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                                        value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                                            property: string;
                                            /** @enum {string} */
                                            context: "user" | "userTeams";
                                        };
                                    } | {
                                        /** @enum {unknown} */
                                        operator: "relatedTo";
                                        blueprint: string;
                                        value: string | string[];
                                        /** @enum {unknown} */
                                        direction?: "upstream" | "downstream";
                                        required?: boolean;
                                    } | {
                                        propertySchema: {
                                            type: string;
                                            format?: string;
                                            items?: {
                                                type: string;
                                                format?: string;
                                            };
                                        };
                                        /** @enum {unknown} */
                                        operator: "=" | "!=" | "contains";
                                        value?: null | string | number | boolean;
                                    } | {
                                        property: {
                                            path: (string | {
                                                relation?: string;
                                                maxHops?: number;
                                            })[];
                                            fromBlueprint?: string;
                                        };
                                        /** @enum {string} */
                                        operator: "matchAny";
                                        value: string | string[];
                                    } | components["schemas"]["def-1"])[];
                                };
                            };
                            /** @description Defines who has permissions to create entities of this blueprint. */
                            register?: {
                                /** @description List of users (email addresses) that are allowed to perform the action. */
                                users?: string[];
                                /** @description List of teams that are allowed to perform the action. */
                                teams?: string[];
                                /** @description List of roles that are allowed to perform the action. */
                                roles?: string[];
                                /** @description If `true`, permissions will be determined by team ownership, rather than by roles or direct assignment to users. Every user will be able to perform actions on entities belonging to their team/s. */
                                ownedByTeam?: boolean;
                            };
                            /** @description Defines who has permissions to modify entities of this blueprint. */
                            update?: {
                                /** @description List of users (email addresses) that are allowed to perform the action. */
                                users?: string[];
                                /** @description List of teams that are allowed to perform the action. */
                                teams?: string[];
                                /** @description List of roles that are allowed to perform the action. */
                                roles?: string[];
                                /** @description If `true`, permissions will be determined by team ownership, rather than by roles or direct assignment to users. Every user will be able to perform actions on entities belonging to their team/s. */
                                ownedByTeam?: boolean;
                            };
                            /** @description Defines who has permissions to delete entities of this blueprint. */
                            unregister?: {
                                /** @description List of users (email addresses) that are allowed to perform the action. */
                                users?: string[];
                                /** @description List of teams that are allowed to perform the action. */
                                teams?: string[];
                                /** @description List of roles that are allowed to perform the action. */
                                roles?: string[];
                                /** @description If `true`, permissions will be determined by team ownership, rather than by roles or direct assignment to users. Every user will be able to perform actions on entities belonging to their team/s. */
                                ownedByTeam?: boolean;
                            };
                            /** @description Defines who has permissions to modify specific properties in entities of this blueprint. */
                            updateProperties?: {
                                [key: string]: {
                                    /** @description List of users (email addresses) that are allowed to perform the action. */
                                    users?: string[];
                                    /** @description List of teams that are allowed to perform the action. */
                                    teams?: string[];
                                    /** @description List of roles that are allowed to perform the action. */
                                    roles?: string[];
                                    /** @description If `true`, permissions will be determined by team ownership, rather than by roles or direct assignment to users. Every user will be able to modify properties in entities belonging to their team/s. */
                                    ownedByTeam?: boolean;
                                };
                            };
                            /** @description Defines who has permissions to modify specific relations in entities of this blueprint. */
                            updateRelations?: {
                                [key: string]: {
                                    /** @description List of users (email addresses) that are allowed to perform the action. */
                                    users?: string[];
                                    /** @description List of teams that are allowed to perform the action. */
                                    teams?: string[];
                                    /** @description List of roles that are allowed to perform the action. */
                                    roles?: string[];
                                    /** @description If `true`, permissions will be determined by team ownership, rather than by roles or direct assignment to users. Every user will be able to modify relations in entities belonging to their team/s. */
                                    ownedByTeam?: boolean;
                                };
                            };
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/pages/{page_identifier}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a page's permissions
         * @description This route allows you to get a specific page's permissions.<br/><br/>To learn more about pages, check out the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/page-permissions).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    page_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a page's permissions
         * @description This route allows you to update a specific page’s permissions. <br/><br/>To learn more about pages, check out the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/page-permissions).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    page_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        read?: {
                            users?: string[];
                            roles?: string[];
                            teams?: string[];
                        };
                        update?: {
                            users?: string[];
                            roles?: string[];
                            teams?: string[];
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/auth/access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an access token
         * @description This route allows you to create an access token for your Port account. You can use this token to authenticate your requests to the Port API.<br/><br/>To obtain your client ID and client secret, go to your [Port application](https://app.getport.io), click on the `...` button in the top right corner, then click `Credentials`.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Your Port client ID */
                        clientId: string;
                        /** @description Your Port client secret */
                        clientSecret: string;
                    };
                };
            };
            responses: {
                /** @description Authorized successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok?: true;
                            accessToken: string;
                            /** @description The number of seconds until the access token expires */
                            expiresIn: number;
                            tokenType: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all entities of a blueprint
         * @description This route allows you to fetch all entities in your software catalog based on a given blueprint.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        get: {
            parameters: {
                query?: {
                    /** @description If `true`, [calculated properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) will be excluded from the entities. */
                    exclude_calculated_properties?: boolean;
                    /** @description An array of values from the [entity JSON](${DOCS_URL}/build-your-software-catalog/sync-data-to-catalog/#json-structure). Only these values will be returned in the response.<br/>For example: `{ "properties.propertyIdentifier","identifier"}` */
                    include?: string[];
                    /** @description An array of values from the [entity JSON](${DOCS_URL}/build-your-software-catalog/sync-data-to-catalog/#json-structure) to be ommitted from the response.<br/>For example: `{ "properties.propertyIdentifier","identifier"}` */
                    exclude?: string[];
                    attach_title_to_relation?: boolean;
                    attach_identifier_to_title_mirror_properties?: boolean;
                };
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            entities: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create an entity
         * @description This route allows you to create an entity in your software catalog based on an existing blueprint in your data model. It can also be used to overwrite or update an existing entity.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        post: {
            parameters: {
                query: {
                    /** @description If `true`, this call will override the entire entity/ies, if it/they already exist/s. */
                    upsert: boolean;
                    /** @description If `true`, this call will only validate the entity/ies and return the validation errors. */
                    validation_only?: boolean;
                    /** @description If `true`, this call will also create missing related entities.<br/>This is useful when you want to create an entity and its related entities in one call, or if you want to create an entity whose related entity does not exist yet. */
                    create_missing_related_entities?: boolean;
                    /** @description If `true` and `upsert` is also `true`, this call will update the entity/ies, if it/they already exist/s. */
                    merge?: boolean;
                    /** @description You can provide a `run_id` to associate the created entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        identifier?: string | components["schemas"]["def-5"];
                        /** @description The title of the entity. */
                        title?: string;
                        /** @description The icon of the entity. */
                        icon?: string;
                        team?: string | string[] | components["schemas"]["def-6"];
                        /**
                         * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                         * @default {}
                         */
                        properties?: Record<string, never>;
                        /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                        relations?: {
                            [key: string]: string | string[] | null | components["schemas"]["def-6"];
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            entity: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/entities/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create multiple entities
         * @description This route allows you to create multiple entities (No more than 20 entities per request) in your software catalog based on an existing blueprint in your data model. It can also be used to overwrite or update existing entities.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).<br/><br/> **Note:** A failure response does not necessarily mean that all entities failed. A `207 Multi-Status` response indicates that some entities were successfully created while others failed.
         */
        post: {
            parameters: {
                query: {
                    /** @description If `true`, this call will override the entire entity/ies, if it/they already exist/s. */
                    upsert: boolean;
                    /** @description If `true`, this call will only validate the entity/ies and return the validation errors. */
                    validation_only?: boolean;
                    /** @description If `true`, this call will also create missing related entities.<br/>This is useful when you want to create an entity and its related entities in one call, or if you want to create an entity whose related entity does not exist yet. */
                    create_missing_related_entities?: boolean;
                    /** @description If `true` and `upsert` is also `true`, this call will update the entity/ies, if it/they already exist/s. */
                    merge?: boolean;
                    /** @description You can provide a `run_id` to associate the created entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of entities to create */
                        entities: ({
                            identifier?: string | components["schemas"]["def-5"];
                            /** @description The title of the entity. */
                            title?: string;
                            /** @description The icon of the entity. */
                            icon?: string;
                            team?: string | string[] | components["schemas"]["def-6"];
                            /**
                             * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                             * @default {}
                             */
                            properties?: Record<string, never>;
                            /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                            relations?: {
                                [key: string]: string | string[] | null | components["schemas"]["def-6"];
                            };
                        } & {
                            [key: string]: unknown;
                        })[];
                    };
                };
            };
            responses: {
                /** @description Created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok: boolean;
                            entities: {
                                created: boolean;
                                identifier: string;
                                index: number;
                                additionalData?: {
                                    [key: string]: unknown;
                                };
                            }[];
                            /** @description Failed entities with error details */
                            errors: {
                                identifier: string;
                                index: number;
                                statusCode: number;
                                error: string;
                                message: string;
                            }[];
                        };
                    };
                };
                /** @description Partially created successfully. Some entities were created while others failed. */
                207: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok: boolean;
                            entities: {
                                created: boolean;
                                identifier: string;
                                index: number;
                                additionalData?: {
                                    [key: string]: unknown;
                                };
                            }[];
                            /** @description Failed entities with error details */
                            errors: {
                                identifier: string;
                                index: number;
                                statusCode: number;
                                error: string;
                                message: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/entities/{entity_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity
         * @description This route allows you to fetch a specific entity in your software catalog.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        get: {
            parameters: {
                query?: {
                    /** @description If `true`, [calculated properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) will be excluded from the entities. */
                    exclude_calculated_properties?: boolean;
                    /** @description An array of values from the [entity JSON](${DOCS_URL}/build-your-software-catalog/sync-data-to-catalog/#json-structure). Only these values will be returned in the response.<br/>For example: `{ "properties.propertyIdentifier","identifier"}` */
                    include?: string[];
                    /** @description An array of values from the [entity JSON](${DOCS_URL}/build-your-software-catalog/sync-data-to-catalog/#json-structure) to be ommitted from the response.<br/>For example: `{ "properties.propertyIdentifier","identifier"}` */
                    exclude?: string[];
                    attach_title_to_relation?: boolean;
                    attach_identifier_to_title_mirror_properties?: boolean;
                };
                header?: never;
                path: {
                    /** @description The identifier of the entity to operate on. */
                    entity_identifier: string;
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            entity: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change an entity
         * @description This route allows you to edit a specific entity in your software catalog and update its properties.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        put: {
            parameters: {
                query?: {
                    /** @description If `true`, this call will also create missing related entities.<br/>This is useful when you want to create an entity and its related entities in one call, or if you want to create an entity whose related entity does not exist yet. */
                    create_missing_related_entities?: boolean;
                    /** @description You can provide a `run_id` to associate the created entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the entity to operate on. */
                    entity_identifier: string;
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The identifier of the entity. */
                        identifier?: string;
                        /** @description The title of the entity. */
                        title?: string;
                        /** @description The icon of the entity. */
                        icon?: string;
                        /** @description The Port team/s to which the entity will belong. */
                        team?: string | string[] | components["schemas"]["def-6"];
                        /**
                         * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                         * @default {}
                         */
                        properties?: Record<string, never>;
                        /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier. */
                        relations?: {
                            [key: string]: string | string[] | null | components["schemas"]["def-6"];
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            entity: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete an entity
         * @description This route allows you to delete a specific entity in your software catalog.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        delete: {
            parameters: {
                query: {
                    /** @description If `true`, this call will also delete all entities with a relation to the deleted entity. */
                    delete_dependents: boolean;
                    /** @description You can provide a `run_id` to associate the created entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the entity to operate on. */
                    entity_identifier: string;
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entities deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update an entity
         * @description This route allows you to edit a specific entity in your software catalog and update its properties.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        patch: {
            parameters: {
                query?: {
                    /** @description If `true`, this call will also create missing related entities.<br/>This is useful when you want to create an entity and its related entities in one call, or if you want to create an entity whose related entity does not exist yet. */
                    create_missing_related_entities?: boolean;
                    /** @description You can provide a `run_id` to associate the created entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the entity to operate on. */
                    entity_identifier: string;
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The identifier of the entity. */
                        identifier?: string;
                        /** @description The title of the entity. */
                        title?: string | null;
                        /** @description The icon of the entity. */
                        icon?: string | null;
                        /** @description The Port team/s to which the entity will belong. */
                        team?: (string | null) | string[] | components["schemas"]["def-6"];
                        /** @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value. */
                        properties?: Record<string, never>;
                        /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                        relations?: {
                            [key: string]: string | string[] | null | components["schemas"]["def-6"];
                        };
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            entity: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/entities-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a blueprint's entity count
         * @description This route allows you to count the number of entities in a specific blueprint in your software catalog.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            count?: number;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/all-entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete all entities of a blueprint
         * @description This route allows you to delete all entities of a specific blueprint in your software catalog.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        delete: {
            parameters: {
                query?: {
                    /** @description You can provide a `run_id` to associate the deleted entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                    /** @description If `true`, this call will also delete the blueprint itself. */
                    delete_blueprint?: boolean;
                };
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entities deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/bulk/entities/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete multiple entities
         * @description This route allows you to delete multiple entities (up to 100 entities per request) from a specific blueprint in your software catalog. All entities must belong to the same blueprint.<br/><br/>If any entity has dependent entities and delete_dependents is false, the entire operation will fail and no entities will be deleted.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        post: {
            parameters: {
                query: {
                    /** @description If `true`, this call will also delete all entities with a relation to the deleted entity. */
                    delete_dependents: boolean;
                    /** @description You can provide a `run_id` to associate the created entities with a specific [action run](https://docs.port.io/create-self-service-experiences/reflect-action-progress/#tying-entities-to-an-action-run). */
                    run_id?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of entity identifiers to delete */
                        entities: string[];
                    };
                };
            };
            responses: {
                /** @description Entities deleted successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            /** @description Array of deleted entity IDs */
                            deletedEntities: string[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entities/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search entities
         * @description This route allows you to search for entities in your software catalog based on a given set of rules.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).<br/><br/>For more details about Port's search mechanism, rules, and operators - see the [search & query documentation](https://docs.port.io/search-and-query/).
         */
        post: {
            parameters: {
                query?: {
                    /** @description If `true`, [calculated properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) will be excluded from the entities. */
                    exclude_calculated_properties?: boolean;
                    /** @description An array of values from the [entity JSON](${DOCS_URL}/build-your-software-catalog/sync-data-to-catalog/#json-structure). Only these values will be returned in the response.<br/>For example: `{ "properties.propertyIdentifier","identifier"}` */
                    include?: string[];
                    /** @description An array of values from the [entity JSON](${DOCS_URL}/build-your-software-catalog/sync-data-to-catalog/#json-structure) to be ommitted from the response.<br/>For example: `{ "properties.propertyIdentifier","identifier"}` */
                    exclude?: string[];
                    attach_title_to_relation?: boolean;
                    attach_identifier_to_title_mirror_properties?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The combinator to use for the rules.
                         * @enum {unknown}
                         */
                        combinator: "and" | "or";
                        rules: ({
                            property: string | {
                                property: string;
                                /** @enum {string} */
                                context: "user" | "userTeams";
                            };
                            /** @enum {unknown} */
                            operator: "between" | "notBetween" | "=";
                            value: {
                                /** Format: date-time */
                                from: string;
                                /** Format: date-time */
                                to: string;
                            } | {
                                /** @enum {string} */
                                preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            } | {
                                property: string;
                                /** @enum {string} */
                                context: "user" | "userTeams";
                            };
                        } | {
                            /** @enum {unknown} */
                            operator: "isEmpty" | "isNotEmpty";
                            property: string;
                        } | {
                            property: string | {
                                property: string;
                                /** @enum {string} */
                                context: "user" | "userTeams";
                            };
                            /** @enum {unknown} */
                            operator: ">" | ">=" | "<" | "<=";
                            value: number | string | {
                                property: string;
                                /** @enum {string} */
                                context: "user" | "userTeams";
                            };
                        } | {
                            /** @enum {unknown} */
                            operator: "isExpired" | "isNotExpired";
                            property: string;
                        } | {
                            property: string | {
                                property: string;
                                /** @enum {string} */
                                context: "user" | "userTeams";
                            };
                            /** @enum {unknown} */
                            operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                            value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                                property: string;
                                /** @enum {string} */
                                context: "user" | "userTeams";
                            };
                        } | {
                            /** @enum {unknown} */
                            operator: "relatedTo";
                            blueprint: string;
                            value: string | string[];
                            /** @enum {unknown} */
                            direction?: "upstream" | "downstream";
                            required?: boolean;
                        } | {
                            propertySchema: {
                                type: string;
                                format?: string;
                                items?: {
                                    type: string;
                                    format?: string;
                                };
                            };
                            /** @enum {unknown} */
                            operator: "=" | "!=" | "contains";
                            value?: null | string | number | boolean;
                        } | {
                            property: {
                                path: (string | {
                                    relation?: string;
                                    maxHops?: number;
                                })[];
                                fromBlueprint?: string;
                            };
                            /** @enum {string} */
                            operator: "matchAny";
                            value: string | string[];
                        } | components["schemas"]["def-1"])[];
                    };
                };
            };
            responses: {
                /** @description Retrieved successfully (this response can be compressed). */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            matchingBlueprints?: string[];
                            failedBlueprints?: string[];
                            entities: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/entities/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search a blueprint's entities
         * @description This route allows you to search your software catalog for a specific blueprint's entities, based on a given set of rules.<br/>The returned entities are paginated for improved performance.<br/><br/>To learn more about entities, check out the [entity documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).<br/><br/>For more details about Port's search mechanism, rules, and operators - see the [search & query documentation](https://docs.port.io/search-and-query/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint whose entities you want to search. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description A [search query](https://docs.getport.io/search-and-query) used to filter the returned entities. */
                        query?: components["schemas"]["def-7"];
                        /** @description An array of [properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties) and/or [relations](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/relations) to include in the search, using their identifiers.<br/>Note that for [meta-properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/meta-properties) (e.g. `$createdAt`, `$updatedAt`), the `$` prefix must be used. */
                        include?: string[];
                        /** @description An array of [properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties) and/or [relations](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/relations) to exclude from the search, using their identifiers.<br/>Note that for [meta-properties](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/meta-properties) (e.g. `$createdAt`, `$updatedAt`), the `$` prefix must be used. */
                        exclude?: string[];
                        /**
                         * @description The maximum number of entities to return.
                         * @default 200
                         */
                        limit?: number;
                        /** @description A string hash of the `next` value that was returned in the previous response. This is used to paginate through the results. */
                        from?: string;
                    };
                };
            };
            responses: {
                /** @description Retrieved successfully (this response can be compressed). */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok: boolean;
                            /** @description A string hash of the next page of results. This is used to paginate through the results. */
                            next?: string;
                            /** @description The entities that match the search query. */
                            entities: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entities/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Aggregate entities
         * @description This route allows you to perform an aggregation function on a blueprint's entities based on a given set of rules.<br/><br/>To learn more about entities, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).<br/><br/>For more details about Port's search mechanism, rules, and operators - see the [search & query documentation](https://docs.port.io/search-and-query/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        func: "average" | "count";
                        /** @enum {string} */
                        averageOf?: "hour" | "day" | "week" | "month" | "total";
                        /** @description A property of type `datetime`, by which the average will be calculated. Relevant only for the `average` function. */
                        measureTimeBy?: string;
                        calculationBy?: string;
                        /** @description A [search query](https://docs.getport.io/search-and-query) used to filter the entities before the aggregation is calculated. */
                        query: components["schemas"]["def-1"];
                    } | {
                        /** @description A property of type `number`, by which the aggregation will be calculated. */
                        property: string;
                        /** @enum {string} */
                        func: "sum" | "average" | "min" | "max" | "median";
                        /** @enum {string} */
                        averageOf?: "hour" | "day" | "week" | "month" | "total";
                        /** @description A property of type `datetime`, by which the average will be calculated. Relevant only for the `average` function. */
                        measureTimeBy?: string;
                        calculationBy?: string;
                        /** @description A [search query](https://docs.getport.io/search-and-query) used to filter the entities before the aggregation is calculated. */
                        query: components["schemas"]["def-1"];
                    } | ({
                        /** @enum {unknown} */
                        func: "countValues";
                        query: components["schemas"]["def-1"];
                        property: string;
                    } | {
                        /** @enum {unknown} */
                        func: "countValues";
                        query: components["schemas"]["def-1"];
                        relation: string;
                    } | {
                        /** @enum {unknown} */
                        func: "countValues";
                        query: components["schemas"]["def-1"];
                        scorecard: string;
                    } | {
                        /** @enum {unknown} */
                        func: "countValues";
                        query: components["schemas"]["def-1"];
                        rule: string;
                        scorecard: string;
                    });
                };
            };
            responses: {
                /** @description Retrieved successfully (this response can be compressed). */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            matchingBlueprints?: string[];
                            failedBlueprints?: string[];
                            entities: {
                                identifier?: string | components["schemas"]["def-5"];
                                /** @description The title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                team?: string | string[] | components["schemas"]["def-6"];
                                /**
                                 * @description An object containing the properties of the entity, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value.
                                 * @default {}
                                 */
                                properties: Record<string, never>;
                                /** @description An object containing the relations of the entity, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier.<br/>You can also use a [search query](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#mapping-relations-using-search-queries) to define relations based on a property of the related entity. */
                                relations?: {
                                    [key: string]: string | string[] | null | components["schemas"]["def-6"];
                                };
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entities/aggregate-over-time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Aggregate entities over time
         * @description This route allows you to perform an aggregation function on a blueprint's entities over a given time range.<br/><br/>To learn more about entities, check out the [entity documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).<br/><br/>For more details about Port's search mechanism, rules, and operators - see the [search & query documentation](https://docs.port.io/search-and-query/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The blueprint whose entities you wish to aggregate. */
                        blueprint?: string;
                        timeRange?: {
                            /** @enum {string} */
                            preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            timeZone?: string;
                        };
                        /** @enum {string} */
                        timeInterval?: "hour" | "day" | "isoWeek" | "month";
                        /** @description A [search query](https://docs.getport.io/search-and-query) used to filter the entities before the aggregation is calculated. */
                        query?: components["schemas"]["def-1"];
                        /** @description A property of type `datetime` by which the aggregation will be calculated. */
                        measureTimeBy?: string;
                        /** @enum {unknown} */
                        aggregationType?: "aggregatePropertiesValues";
                        /** @enum {string} */
                        func: "average" | "sum" | "min" | "max" | "median" | "last";
                        /** @description A list of properties of type `number` on which the aggregation will be calculated. */
                        properties: string[];
                    } | {
                        /** @description The blueprint whose entities you wish to aggregate. */
                        blueprint?: string;
                        timeRange?: {
                            /** @enum {string} */
                            preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            timeZone?: string;
                        };
                        /** @enum {string} */
                        timeInterval?: "hour" | "day" | "isoWeek" | "month";
                        /** @description A [search query](https://docs.getport.io/search-and-query) used to filter the entities before the aggregation is calculated. */
                        query?: components["schemas"]["def-1"];
                        /** @description A property of type `datetime` by which the aggregation will be calculated. */
                        measureTimeBy?: string;
                        /** @enum {unknown} */
                        aggregationType?: "countEntities";
                        /** @enum {string} */
                        func: "count" | "average";
                        /** @description A blueprint's property by which you want to break down the data. */
                        breakdownProperty?: string;
                    };
                };
            };
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            result?: {
                                minDate?: number;
                                maxDate?: number;
                                data?: unknown[];
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/entities/properties-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch the history of an entity's properties
         * @description This route allows you to retrieve historical values for a selected list of an entity's properties over a given time range.<br/><br/>To learn more about entities, check out the [entity documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#entities).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the entity you want to operate on. */
                        entityIdentifier: string;
                        /** @description The identifier of the blueprint you want to operate on. */
                        blueprintIdentifier: string;
                        /** @description An array of property names to fetch historical records for. */
                        propertyNames: string[];
                        /** @enum {string} */
                        timeInterval?: "hour" | "day" | "isoWeek" | "month";
                        timeRange?: {
                            /** @enum {string} */
                            preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            /** @enum {string} */
                            timeZone: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmera" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/La_Rioja" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Buenos_Aires" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Catamarca" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Coral_Harbour" | "America/Cordoba" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Godthab" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Indianapolis" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Jujuy" | "America/Juneau" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Louisville" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Mendoza" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Calcutta" | "Asia/Chita" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Katmandu" | "Asia/Khandyga" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Rangoon" | "Asia/Riyadh" | "Asia/Saigon" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faeroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kiev" | "Europe/Kirov" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Enderbury" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Ponape" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Truk" | "Pacific/Wake" | "Pacific/Wallis";
                        };
                    };
                };
            };
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            result?: {
                                minDate?: number;
                                maxDate?: number;
                                data?: number[];
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all blueprints
         * @description This route allows you to fetch all blueprints in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprints: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a blueprint
         * @description This route allows you to create a new blueprint in your data model.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        post: {
            parameters: {
                query?: {
                    /** @description If true, a catalog page will be created for this blueprint */
                    create_catalog_page?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the blueprint. */
                        identifier: string;
                        /** @description The title of the blueprint. */
                        title: string;
                        /** @description The description of the blueprint. */
                        description?: string;
                        /** @description The icon of the blueprint. */
                        icon?: string;
                        /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                        teamInheritance?: {
                            /** @description The path to the desired blueprint via relations. */
                            path: string;
                        };
                        ownership?: {
                            /** @enum {string} */
                            type: "Inherited";
                            /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                            path: string;
                            /** @description The title of the ownership property. The default value is `Owning teams`. */
                            title?: string;
                        } | {
                            /** @enum {string} */
                            type: "Direct";
                            /** @description The title of the ownership property. The default value is `Owning teams`. */
                            title?: string;
                        };
                        /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                        schema: {
                            /** @description The properties of the blueprint. */
                            properties: {
                                [key: string]: {
                                    /** @description The title of the property. */
                                    title?: string;
                                    /** @description The description of the property. */
                                    description?: string;
                                    /** @description The icon of the property. */
                                    icon?: string;
                                    /**
                                     * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                     * @enum {unknown}
                                     */
                                    type: "string" | "number" | "boolean" | "object" | "array";
                                    /**
                                     * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                     * @enum {unknown}
                                     */
                                    format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                    /**
                                     * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                     * @enum {unknown}
                                     */
                                    spec?: "open-api" | "embedded-url" | "async-api";
                                    /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                    specAuthentication?: {
                                        clientId: string;
                                        /** Format: url */
                                        authorizationUrl: string;
                                        /** Format: url */
                                        tokenUrl: string;
                                        /** @default [
                                         *       "openid"
                                         *     ] */
                                        authorizationScope?: string[];
                                    };
                                };
                            };
                            /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                            required?: string[];
                        };
                        /**
                         * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                         * @default {}
                         */
                        calculationProperties?: {
                            [key: string]: {
                                /** @description The title of the property. */
                                title?: string;
                                /** @description The description of the property. */
                                description?: string;
                                /** @description The icon of the property. */
                                icon?: string;
                                /** @description The JQ expression that calculates the value of the property. */
                                calculation: string;
                                /**
                                 * @description The type of the property.
                                 * @enum {unknown}
                                 */
                                type: "string" | "number" | "boolean" | "object" | "array";
                                /**
                                 * @description The format of the property.
                                 * @enum {unknown}
                                 */
                                format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                /**
                                 * @description The spec of the property.
                                 * @enum {unknown}
                                 */
                                spec?: "open-api" | "embedded-url" | "async-api";
                                /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                specAuthentication?: {
                                    clientId: string;
                                    /** Format: url */
                                    authorizationUrl: string;
                                    /** Format: url */
                                    tokenUrl: string;
                                    /** @default [
                                     *       "openid"
                                     *     ] */
                                    authorizationScope?: string[];
                                };
                                /** @description Whether the property is colorized. */
                                colorized?: boolean;
                                /** @description When using the `colorized` property, the colors of the property. */
                                colors?: {
                                    [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                };
                                items?: {
                                    /**
                                     * @description The type of the item.
                                     * @enum {unknown}
                                     */
                                    type?: "string" | "number" | "boolean" | "object" | "array";
                                    /**
                                     * @description The format of the item.
                                     * @enum {unknown}
                                     */
                                    format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                };
                            };
                        };
                        /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                        mirrorProperties?: {
                            [key: string]: {
                                /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                path: string;
                                /** @description The title of the property. */
                                title?: string;
                            };
                        };
                        /**
                         * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                         * @default {}
                         */
                        aggregationProperties?: {
                            [key: string]: {
                                /** @description The title of the property. */
                                title: string;
                                /** @description The description of the property. */
                                description?: string;
                                /** @description The icon of the property. */
                                icon?: string;
                                /**
                                 * @description The type of the property. This is the type of the aggregation result.
                                 * @default number
                                 * @enum {unknown}
                                 */
                                type?: "number";
                                /** @description The blueprint identifier to run the aggregation on. */
                                target: string;
                                /** @description The calculation spec of the property. */
                                calculationSpec: ({
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "count";
                                    /**
                                     * @description Whether to aggregate by entities or properties.
                                     * @enum {string}
                                     */
                                    calculationBy: "entities";
                                } | {
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "average";
                                    /** @description The time property to use for the aggregation. */
                                    measureTimeBy?: string;
                                    /** @enum {string} */
                                    averageOf: "hour" | "day" | "week" | "month" | "total";
                                    /**
                                     * @description Whether to aggregate by entities or properties.
                                     * @enum {string}
                                     */
                                    calculationBy: "entities";
                                }) | ({
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {string}
                                     */
                                    func: "sum" | "min" | "max" | "median";
                                    /** @description The property to aggregate. */
                                    property: string;
                                    /**
                                     * @description Whether to aggregate by property or entities.
                                     * @enum {string}
                                     */
                                    calculationBy: "property";
                                } | {
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "average";
                                    /** @description The time property to use for the aggregation. */
                                    measureTimeBy?: string;
                                    /** @enum {string} */
                                    averageOf: "hour" | "day" | "week" | "month" | "total";
                                    /** @description The property to aggregate. */
                                    property: string;
                                    /**
                                     * @description Whether to aggregate by property or entities.
                                     * @enum {string}
                                     */
                                    calculationBy: "property";
                                });
                                query?: components["schemas"]["def-1"];
                                /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                pathFilter?: {
                                    /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                    path: string[];
                                    fromBlueprint?: string;
                                }[];
                            };
                        };
                        /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                        relations?: {
                            [key: string]: {
                                title?: string;
                                target: string;
                                /** @default false */
                                required: boolean;
                                /** @default false */
                                many: boolean;
                                description?: string;
                                type?: string;
                            };
                        };
                        /** @description The destination of the blueprint's changelog. */
                        changelogDestination?: {
                            /** @enum {string} */
                            type: "WEBHOOK";
                            /** @description If `true`, Port's execution agent will be used to send the changelog. */
                            agent?: boolean;
                            /**
                             * Format: uri
                             * @description The URL of the webhook.
                             */
                            url: string;
                        } | {
                            /** @enum {string} */
                            type: "KAFKA";
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a blueprint
         * @description This route allows you to fetch a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change a blueprint
         * @description This route allows you to change a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the blueprint. */
                        identifier?: string;
                        /** @description The title of the blueprint. */
                        title: string;
                        /** @description The description of the blueprint. */
                        description?: string;
                        /** @description The icon of the blueprint. */
                        icon?: string;
                        /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                        teamInheritance?: {
                            /** @description The path to the desired blueprint via relations. */
                            path: string;
                        };
                        ownership?: {
                            /** @enum {string} */
                            type: "Inherited";
                            /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                            path: string;
                            /** @description The title of the ownership property. The default value is `Owning teams`. */
                            title?: string;
                        } | {
                            /** @enum {string} */
                            type: "Direct";
                            /** @description The title of the ownership property. The default value is `Owning teams`. */
                            title?: string;
                        };
                        /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                        schema: {
                            /** @description The properties of the blueprint. */
                            properties: {
                                [key: string]: {
                                    /** @description The title of the property. */
                                    title?: string;
                                    /** @description The description of the property. */
                                    description?: string;
                                    /** @description The icon of the property. */
                                    icon?: string;
                                    /**
                                     * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                     * @enum {unknown}
                                     */
                                    type: "string" | "number" | "boolean" | "object" | "array";
                                    /**
                                     * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                     * @enum {unknown}
                                     */
                                    format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                    /**
                                     * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                     * @enum {unknown}
                                     */
                                    spec?: "open-api" | "embedded-url" | "async-api";
                                    /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                    specAuthentication?: {
                                        clientId: string;
                                        /** Format: url */
                                        authorizationUrl: string;
                                        /** Format: url */
                                        tokenUrl: string;
                                        /** @default [
                                         *       "openid"
                                         *     ] */
                                        authorizationScope?: string[];
                                    };
                                };
                            };
                            /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                            required?: string[];
                        };
                        /**
                         * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                         * @default {}
                         */
                        calculationProperties?: {
                            [key: string]: {
                                /** @description The title of the property. */
                                title?: string;
                                /** @description The description of the property. */
                                description?: string;
                                /** @description The icon of the property. */
                                icon?: string;
                                /** @description The JQ expression that calculates the value of the property. */
                                calculation: string;
                                /**
                                 * @description The type of the property.
                                 * @enum {unknown}
                                 */
                                type: "string" | "number" | "boolean" | "object" | "array";
                                /**
                                 * @description The format of the property.
                                 * @enum {unknown}
                                 */
                                format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                /**
                                 * @description The spec of the property.
                                 * @enum {unknown}
                                 */
                                spec?: "open-api" | "embedded-url" | "async-api";
                                /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                specAuthentication?: {
                                    clientId: string;
                                    /** Format: url */
                                    authorizationUrl: string;
                                    /** Format: url */
                                    tokenUrl: string;
                                    /** @default [
                                     *       "openid"
                                     *     ] */
                                    authorizationScope?: string[];
                                };
                                /** @description Whether the property is colorized. */
                                colorized?: boolean;
                                /** @description When using the `colorized` property, the colors of the property. */
                                colors?: {
                                    [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                };
                                items?: {
                                    /**
                                     * @description The type of the item.
                                     * @enum {unknown}
                                     */
                                    type?: "string" | "number" | "boolean" | "object" | "array";
                                    /**
                                     * @description The format of the item.
                                     * @enum {unknown}
                                     */
                                    format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                };
                            };
                        };
                        /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                        mirrorProperties?: {
                            [key: string]: {
                                /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                path: string;
                                /** @description The title of the property. */
                                title?: string;
                            };
                        };
                        /**
                         * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                         * @default {}
                         */
                        aggregationProperties?: {
                            [key: string]: {
                                /** @description The title of the property. */
                                title: string;
                                /** @description The description of the property. */
                                description?: string;
                                /** @description The icon of the property. */
                                icon?: string;
                                /**
                                 * @description The type of the property. This is the type of the aggregation result.
                                 * @default number
                                 * @enum {unknown}
                                 */
                                type?: "number";
                                /** @description The blueprint identifier to run the aggregation on. */
                                target: string;
                                /** @description The calculation spec of the property. */
                                calculationSpec: ({
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "count";
                                    /**
                                     * @description Whether to aggregate by entities or properties.
                                     * @enum {string}
                                     */
                                    calculationBy: "entities";
                                } | {
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "average";
                                    /** @description The time property to use for the aggregation. */
                                    measureTimeBy?: string;
                                    /** @enum {string} */
                                    averageOf: "hour" | "day" | "week" | "month" | "total";
                                    /**
                                     * @description Whether to aggregate by entities or properties.
                                     * @enum {string}
                                     */
                                    calculationBy: "entities";
                                }) | ({
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {string}
                                     */
                                    func: "sum" | "min" | "max" | "median";
                                    /** @description The property to aggregate. */
                                    property: string;
                                    /**
                                     * @description Whether to aggregate by property or entities.
                                     * @enum {string}
                                     */
                                    calculationBy: "property";
                                } | {
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "average";
                                    /** @description The time property to use for the aggregation. */
                                    measureTimeBy?: string;
                                    /** @enum {string} */
                                    averageOf: "hour" | "day" | "week" | "month" | "total";
                                    /** @description The property to aggregate. */
                                    property: string;
                                    /**
                                     * @description Whether to aggregate by property or entities.
                                     * @enum {string}
                                     */
                                    calculationBy: "property";
                                });
                                query?: components["schemas"]["def-1"];
                                /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                pathFilter?: {
                                    /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                    path: string[];
                                    fromBlueprint?: string;
                                }[];
                            };
                        };
                        /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                        relations?: {
                            [key: string]: {
                                title?: string;
                                target: string;
                                /** @default false */
                                required: boolean;
                                /** @default false */
                                many: boolean;
                                description?: string;
                                type?: string;
                            };
                        };
                        /** @description The destination of the blueprint's changelog. */
                        changelogDestination?: {
                            /** @enum {string} */
                            type: "WEBHOOK";
                            /** @description If `true`, Port's execution agent will be used to send the changelog. */
                            agent?: boolean;
                            /**
                             * Format: uri
                             * @description The URL of the webhook.
                             */
                            url: string;
                        } | {
                            /** @enum {string} */
                            type: "KAFKA";
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a blueprint
         * @description This route allows you to delete a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).<br/><br/> **Note:** Before deleting a blueprint, make sure all associated entities have been deleted. Entity deletion may take a few seconds to complete, so plan accordingly when using the [**Delete an entity**](https://docs.port.io/api-reference/delete-an-entity) endpoint before this endpoint in scripts or automations.
         */
        delete: {
            parameters: {
                query?: {
                    /** @description If `true`, all self-service actions associated with this blueprint will be deleted as well. */
                    delete_actions?: boolean;
                };
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a blueprint
         * @description This route allows you to update a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The identifier of the blueprint. */
                        identifier?: string;
                        /** @description The title of the blueprint. */
                        title?: string;
                        /** @description The description of the blueprint. */
                        description?: string;
                        /** @description The icon of the blueprint. */
                        icon?: string;
                        /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                        teamInheritance?: {
                            /** @description The path to the desired blueprint via relations. */
                            path: string;
                        };
                        ownership?: {
                            /** @enum {string} */
                            type: "Inherited";
                            /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                            path: string;
                            /** @description The title of the ownership property. The default value is `Owning teams`. */
                            title?: string;
                        } | {
                            /** @enum {string} */
                            type: "Direct";
                            /** @description The title of the ownership property. The default value is `Owning teams`. */
                            title?: string;
                        };
                        schema?: {
                            properties: {
                                [key: string]: {
                                    /** @description The title of the property. */
                                    title?: string;
                                    /** @description The description of the property. */
                                    description?: string;
                                    /** @description The icon of the property. */
                                    icon?: string;
                                    /**
                                     * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                     * @enum {unknown}
                                     */
                                    type?: "string" | "number" | "boolean" | "object" | "array";
                                    /**
                                     * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                     * @enum {unknown}
                                     */
                                    format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                    /**
                                     * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                     * @enum {unknown}
                                     */
                                    spec?: "open-api" | "embedded-url" | "async-api";
                                    /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                    specAuthentication?: {
                                        clientId: string;
                                        /** Format: url */
                                        authorizationUrl: string;
                                        /** Format: url */
                                        tokenUrl: string;
                                        /** @default [
                                         *       "openid"
                                         *     ] */
                                        authorizationScope?: string[];
                                    };
                                };
                            };
                            /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                            required?: string[];
                        };
                        /**
                         * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                         * @default {}
                         */
                        calculationProperties?: {
                            [key: string]: {
                                /** @description The title of the property. */
                                title?: string;
                                /** @description The description of the property. */
                                description?: string;
                                /** @description The icon of the property. */
                                icon?: string;
                                /** @description The JQ expression that calculates the value of the property. */
                                calculation: string;
                                /**
                                 * @description The type of the property.
                                 * @enum {unknown}
                                 */
                                type: "string" | "number" | "boolean" | "object" | "array";
                                /**
                                 * @description The format of the property.
                                 * @enum {unknown}
                                 */
                                format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                /**
                                 * @description The spec of the property.
                                 * @enum {unknown}
                                 */
                                spec?: "open-api" | "embedded-url" | "async-api";
                                /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                specAuthentication?: {
                                    clientId: string;
                                    /** Format: url */
                                    authorizationUrl: string;
                                    /** Format: url */
                                    tokenUrl: string;
                                    /** @default [
                                     *       "openid"
                                     *     ] */
                                    authorizationScope?: string[];
                                };
                                /** @description Whether the property is colorized. */
                                colorized?: boolean;
                                /** @description When using the `colorized` property, the colors of the property. */
                                colors?: {
                                    [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                };
                                items?: {
                                    /**
                                     * @description The type of the item.
                                     * @enum {unknown}
                                     */
                                    type?: "string" | "number" | "boolean" | "object" | "array";
                                    /**
                                     * @description The format of the item.
                                     * @enum {unknown}
                                     */
                                    format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                };
                            };
                        };
                        /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                        mirrorProperties?: {
                            [key: string]: {
                                /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                path: string;
                                /** @description The title of the property. */
                                title?: string;
                            };
                        };
                        /**
                         * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                         * @default {}
                         */
                        aggregationProperties?: {
                            [key: string]: {
                                /** @description The title of the property. */
                                title: string;
                                /** @description The description of the property. */
                                description?: string;
                                /** @description The icon of the property. */
                                icon?: string;
                                /**
                                 * @description The type of the property. This is the type of the aggregation result.
                                 * @default number
                                 * @enum {unknown}
                                 */
                                type?: "number";
                                /** @description The blueprint identifier to run the aggregation on. */
                                target: string;
                                /** @description The calculation spec of the property. */
                                calculationSpec: ({
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "count";
                                    /**
                                     * @description Whether to aggregate by entities or properties.
                                     * @enum {string}
                                     */
                                    calculationBy: "entities";
                                } | {
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "average";
                                    /** @description The time property to use for the aggregation. */
                                    measureTimeBy?: string;
                                    /** @enum {string} */
                                    averageOf: "hour" | "day" | "week" | "month" | "total";
                                    /**
                                     * @description Whether to aggregate by entities or properties.
                                     * @enum {string}
                                     */
                                    calculationBy: "entities";
                                }) | ({
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {string}
                                     */
                                    func: "sum" | "min" | "max" | "median";
                                    /** @description The property to aggregate. */
                                    property: string;
                                    /**
                                     * @description Whether to aggregate by property or entities.
                                     * @enum {string}
                                     */
                                    calculationBy: "property";
                                } | {
                                    /**
                                     * @description The function to use for the aggregation.
                                     * @enum {unknown}
                                     */
                                    func: "average";
                                    /** @description The time property to use for the aggregation. */
                                    measureTimeBy?: string;
                                    /** @enum {string} */
                                    averageOf: "hour" | "day" | "week" | "month" | "total";
                                    /** @description The property to aggregate. */
                                    property: string;
                                    /**
                                     * @description Whether to aggregate by property or entities.
                                     * @enum {string}
                                     */
                                    calculationBy: "property";
                                });
                                query?: components["schemas"]["def-1"];
                                /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                pathFilter?: {
                                    /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                    path: string[];
                                    fromBlueprint?: string;
                                }[];
                            };
                        };
                        /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                        relations?: {
                            [key: string]: {
                                title?: string;
                                target: string;
                                /** @default false */
                                required: boolean;
                                /** @default false */
                                many: boolean;
                                description?: string;
                                type?: string;
                            };
                        };
                        /** @description The destination of the blueprint's changelog. */
                        changelogDestination?: {
                            /** @enum {string} */
                            type: "WEBHOOK";
                            /** @description If `true`, Port's execution agent will be used to send the changelog. */
                            agent?: boolean;
                            /**
                             * Format: uri
                             * @description The URL of the webhook.
                             */
                            url: string;
                        } | {
                            /** @enum {string} */
                            type: "KAFKA";
                        };
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/properties/{property_identifier}/rename": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Rename a property in a blueprint
         * @description This route allows you to change the identifier of a property in a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint you want to change. */
                    blueprint_identifier: string;
                    /** @description The identifier of the property you want to rename. */
                    property_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The new identifier of the property. */
                        newPropertyName?: string;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/mirror/{property_identifier}/rename": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Rename a blueprint's mirror property
         * @description This route allows you to change the identifier of a mirror property in a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint you want to change. */
                    blueprint_identifier: string;
                    /** @description The identifier of the property you want to rename. */
                    property_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The new identifier of the mirror property. */
                        newMirrorName?: string;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/relations/{relation_identifier}/rename": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Rename a blueprint's relation
         * @description This route allows you to change the identifier of a relation in a specific blueprint in your Port account.<br/><br/>To learn more about blueprints, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint you want to change. */
                    blueprint_identifier: string;
                    /** @description The identifier of the relation you want to rename. */
                    relation_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The new identifier of the relation. */
                        newRelationIdentifier?: string;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            blueprint: {
                                /** @description The identifier of the blueprint. */
                                identifier: string;
                                /** @description The title of the blueprint. */
                                title: string;
                                /** @description The description of the blueprint. */
                                description?: string;
                                /** @description The icon of the blueprint. */
                                icon?: string;
                                /** @description A relation to another blueprint from which to inherit the team. Can be any blueprint connected to this one via any number of relations. `path` is the path to the desired blueprint via relations, for example: `"relationIdentifier.relationIdentifierInRelatedBlueprint"` */
                                teamInheritance?: {
                                    /** @description The path to the desired blueprint via relations. */
                                    path: string;
                                };
                                ownership?: {
                                    /** @enum {string} */
                                    type: "Inherited";
                                    /** @description The `path` key is a dot-separated path of relation identifiers that lead to the desired blueprint. */
                                    path: string;
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                } | {
                                    /** @enum {string} */
                                    type: "Direct";
                                    /** @description The title of the ownership property. The default value is `Owning teams`. */
                                    title?: string;
                                };
                                /** @description The schema of the blueprint, see `properties` and `required` below for more information. */
                                schema: {
                                    /** @description The properties of the blueprint. */
                                    properties: {
                                        [key: string]: {
                                            /** @description The title of the property. */
                                            title?: string;
                                            /** @description The description of the property. */
                                            description?: string;
                                            /** @description The icon of the property. */
                                            icon?: string;
                                            /**
                                             * @description The [type](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            type: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The type's [format](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties).
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "blueprints" | "team" | "timer" | "proto";
                                            /**
                                             * @description The [spec](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/#supported-properties) of the property.
                                             * @enum {unknown}
                                             */
                                            spec?: "open-api" | "embedded-url" | "async-api";
                                            /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                            specAuthentication?: {
                                                clientId: string;
                                                /** Format: url */
                                                authorizationUrl: string;
                                                /** Format: url */
                                                tokenUrl: string;
                                                /** @default [
                                                 *       "openid"
                                                 *     ] */
                                                authorizationScope: string[];
                                            };
                                        };
                                    };
                                    /** @description The required properties of the blueprint, these must be provided when creating an entity based on this blueprint. This is an array of the required properties' identifiers. */
                                    required?: string[];
                                };
                                /**
                                 * @description The [calculation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/calculation-property/) of the blueprint.
                                 * @default {}
                                 */
                                calculationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title?: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /** @description The JQ expression that calculates the value of the property. */
                                        calculation: string;
                                        /**
                                         * @description The type of the property.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        /**
                                         * @description The format of the property.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "idn-email" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "proto";
                                        /**
                                         * @description The spec of the property.
                                         * @enum {unknown}
                                         */
                                        spec?: "open-api" | "embedded-url" | "async-api";
                                        /** @description When using the `spec` property with `embedded-url`, the authentication spec of the property. */
                                        specAuthentication?: {
                                            clientId: string;
                                            /** Format: url */
                                            authorizationUrl: string;
                                            /** Format: url */
                                            tokenUrl: string;
                                            /** @default [
                                             *       "openid"
                                             *     ] */
                                            authorizationScope: string[];
                                        };
                                        /** @description Whether the property is colorized. */
                                        colorized?: boolean;
                                        /** @description When using the `colorized` property, the colors of the property. */
                                        colors?: {
                                            [key: string]: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                        };
                                        items?: {
                                            /**
                                             * @description The type of the item.
                                             * @enum {unknown}
                                             */
                                            type?: "string" | "number" | "boolean" | "object" | "array";
                                            /**
                                             * @description The format of the item.
                                             * @enum {unknown}
                                             */
                                            format?: "date-time" | "url" | "email" | "idn-format" | "ipv4" | "ipv6" | "markdown" | "yaml" | "user" | "team" | "timer" | "proto";
                                        };
                                    };
                                };
                                /** @description The [mirror properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/mirror-property/) of the blueprint. */
                                mirrorProperties?: {
                                    [key: string]: {
                                        /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots, the last identifier is the property identifier. */
                                        path: string;
                                        /** @description The title of the property. */
                                        title?: string;
                                    };
                                };
                                /**
                                 * @description The [aggregation properties](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) of the blueprint.
                                 * @default {}
                                 */
                                aggregationProperties: {
                                    [key: string]: {
                                        /** @description The title of the property. */
                                        title: string;
                                        /** @description The description of the property. */
                                        description?: string;
                                        /** @description The icon of the property. */
                                        icon?: string;
                                        /**
                                         * @description The type of the property. This is the type of the aggregation result.
                                         * @default number
                                         * @enum {unknown}
                                         */
                                        type: "number";
                                        /** @description The blueprint identifier to run the aggregation on. */
                                        target: string;
                                        /** @description The calculation spec of the property. */
                                        calculationSpec: ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "count";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /**
                                             * @description Whether to aggregate by entities or properties.
                                             * @enum {string}
                                             */
                                            calculationBy: "entities";
                                        }) | ({
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {string}
                                             */
                                            func: "sum" | "min" | "max" | "median";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        } | {
                                            /**
                                             * @description The function to use for the aggregation.
                                             * @enum {unknown}
                                             */
                                            func: "average";
                                            /** @description The time property to use for the aggregation. */
                                            measureTimeBy?: string;
                                            /** @enum {string} */
                                            averageOf: "hour" | "day" | "week" | "month" | "total";
                                            /** @description The property to aggregate. */
                                            property: string;
                                            /**
                                             * @description Whether to aggregate by property or entities.
                                             * @enum {string}
                                             */
                                            calculationBy: "property";
                                        });
                                        query?: components["schemas"]["def-1"];
                                        /** @description Optional filter to run the aggregation on entities that are connected through a specific path. When empty will use all the related entities from all possible paths */
                                        pathFilter?: {
                                            /** @description The path to the property in the related blueprint. This is a string of relation identifiers separated by dots. */
                                            path: string[];
                                            fromBlueprint?: string;
                                        }[];
                                    };
                                };
                                /** @description The [relations](${DOCS_URL}/build-your-software-catalog/customize-integrations/configure-data-model/relate-blueprints/) of the blueprint. */
                                relations?: {
                                    [key: string]: {
                                        title?: string;
                                        target: string;
                                        /** @default false */
                                        required: boolean;
                                        /** @default false */
                                        many: boolean;
                                        description?: string;
                                        type?: string;
                                    };
                                };
                                /** @description The destination of the blueprint's changelog. */
                                changelogDestination?: {
                                    /** @enum {string} */
                                    type: "WEBHOOK";
                                    /** @description If `true`, Port's execution agent will be used to send the changelog. */
                                    agent?: boolean;
                                    /**
                                     * Format: uri
                                     * @description The URL of the webhook.
                                     */
                                    url: string;
                                } | {
                                    /** @enum {string} */
                                    type: "KAFKA";
                                };
                                updatedBy: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get actions/automations
         * @description This route allows you to fetch one or more self-service actions and/or automations in your Port account.<br/><br/>The call will perform a logical `AND` between all query parameters below, and return all actions and automations that match the criteria.<br/><br/>To learn more about actions and automations, check out the [documentation](https://docs.port.io/actions-and-automations/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The identifier/s of the action/s and/or automation/s you want to fetch. */
                    action_identifier?: string[];
                    /** @description The identifier/s of the blueprint/s whose actions/automations you wish to fetch. */
                    blueprint_identifier?: string[];
                    /** @description The [operation type/s](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/#basic-details) of the action/s you want to fetch. Relevant only for self-service actions. */
                    operation?: ("DAY-2" | "DELETE" | "CREATE")[];
                    /** @description Only relevant for **automations**. If `true`, only published automations will be fetched. */
                    published?: boolean;
                    trigger_type?: "self-service" | "automation";
                    /** @description The event/s that triggered the automation/s you want to fetch. Relevant only for automations. */
                    trigger_event?: ("ENTITY_CREATED" | "ENTITY_UPDATED" | "ENTITY_DELETED" | "TIMER_PROPERTY_EXPIRED" | "ANY_ENTITY_CHANGE" | "RUN_CREATED" | "RUN_UPDATED" | "ANY_RUN_CHANGE")[];
                    trigger_event_action_identifier?: string[];
                    version?: "v1" | "v2";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create an action/automation
         * @description This route allows you to create a new self-service action or automation in your Port account.<br/><br/>To learn more about actions and automations, check out the [documentation](https://docs.port.io/actions-and-automations/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the action. */
                        identifier: string;
                        /** @description The title of the action. */
                        title?: string;
                        /** @description The icon of the action. */
                        icon?: string;
                        /** @description The description of the action. */
                        description?: string;
                        trigger: {
                            /**
                             * @description The [operation type](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/#basic-details) of the action.
                             * @enum {string}
                             */
                            operation: "DAY-2" | "DELETE";
                            /** @enum {string} */
                            type: "self-service";
                            /** @description The identifier of the blueprint that the action is associated with.<br/>Note that this is optional, as actions do not have to be tied directly to a blueprint. */
                            blueprintIdentifier?: string;
                            /** @description The [user inputs](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/user-inputs/) of the action. */
                            userInputs: {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                order: string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                /** @description The steps of the user inputs. Each step is an object containing its title and the order of its properties. */
                                steps: {
                                    /** @description The title of the step. */
                                    title: string;
                                    /** @description The order of the properties in the step - an array of property identifiers. */
                                    order?: string[];
                                }[];
                            };
                            actionCardButtonText?: string;
                            executeActionButtonText?: string;
                            /** @description Filters used to include/exclude specific entities from the action. */
                            condition?: {
                                /** @enum {string} */
                                type: "SEARCH";
                                rules: ({
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    } | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isEmpty" | "isNotEmpty";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=";
                                    value: number | string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isExpired" | "isNotExpired";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                                    value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "relatedTo";
                                    blueprint: string;
                                    value: string | string[];
                                    /** @enum {unknown} */
                                    direction?: "upstream" | "downstream";
                                    required?: boolean;
                                } | {
                                    propertySchema: {
                                        type: string;
                                        format?: string;
                                        items?: {
                                            type: string;
                                            format?: string;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "contains";
                                    value?: null | string | number | boolean;
                                } | {
                                    property: {
                                        path: (string | {
                                            relation?: string;
                                            maxHops?: number;
                                        })[];
                                        fromBlueprint?: string;
                                    };
                                    /** @enum {string} */
                                    operator: "matchAny";
                                    value: string | string[];
                                } | components["schemas"]["def-1"])[];
                                /** @enum {string} */
                                combinator: "and" | "or";
                            };
                        } | {
                            /**
                             * @description The [operation type](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/#basic-details) of the action.
                             * @enum {string}
                             */
                            operation: "CREATE";
                            /** @enum {string} */
                            type: "self-service";
                            /** @description The identifier of the blueprint that the action is associated with.<br/>Note that this is optional, as actions do not have to be tied directly to a blueprint. */
                            blueprintIdentifier?: string;
                            /** @description The [user inputs](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/user-inputs/) of the action. */
                            userInputs: {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                order: string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                /** @description The steps of the user inputs. Each step is an object containing its title and the order of its properties. */
                                steps: {
                                    /** @description The title of the step. */
                                    title: string;
                                    /** @description The order of the properties in the step - an array of property identifiers. */
                                    order?: string[];
                                }[];
                            };
                            actionCardButtonText?: string;
                            executeActionButtonText?: string;
                        } | {
                            /** @enum {string} */
                            type: "automation";
                            /** @description The [event](https://docs.port.io/actions-and-automations/define-automations/setup-trigger) that triggers the action. */
                            event: {
                                /** @enum {string} */
                                type: "ENTITY_CREATED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ENTITY_UPDATED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ENTITY_DELETED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "TIMER_PROPERTY_EXPIRED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                                /** @description The identifier of the timer property in the specified blueprint. */
                                propertyIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ANY_ENTITY_CHANGE";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "RUN_CREATED";
                                actionIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "RUN_UPDATED";
                                actionIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ANY_RUN_CHANGE";
                                actionIdentifier: string;
                            };
                            /** @description Filters used to include/exclude specific entities from the automation. */
                            condition?: {
                                /** @enum {string} */
                                type: "JQ";
                                /** @description An array of [jq expressions](https://docs.port.io/search-and-query/#jq-expressions) used to filter entities.<br/>Read more [here](https://docs.port.io/actions-and-automations/define-automations/setup-trigger#conditions). */
                                expressions: string[];
                                /** @enum {string} */
                                combinator?: "and" | "or";
                            };
                        };
                        /** @description Details the action's backend type and details. */
                        invocationMethod: {
                            /** @enum {string} */
                            type: "KAFKA";
                            /** @description An object containing the [action payload](https://docs.port.io/create-self-service-experiences/setup-backend/#define-the-actions-payload). */
                            payload?: unknown[] | Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "WEBHOOK";
                            /** @description The URL of the webhook. */
                            url: string;
                            /** @description If `true`, Port's [execution agent](https://docs.port.io/create-self-service-experiences/setup-backend/webhook/port-execution-agent/) will be used to handle invocations of this action. */
                            agent?: boolean | string;
                            /** @description If `true`, the action will be executed [synchronously](https://docs.port.io/create-self-service-experiences/setup-backend/webhook/#sync-vs-async-execution). */
                            synchronized?: boolean | string;
                            /** @description The HTTP method of the webhook (`POST`, `PUT`, `PATCH`, or `DELETE`). */
                            method?: string;
                            /** @description A JSON object containing the headers to be sent to the webhook in each execution, in `"key"`:`"value"` pairs. */
                            headers?: {
                                [key: string]: string;
                            };
                            /** @description The body sent to the webhook in each execution. This is where the [action payload](https://docs.port.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) is specified. */
                            body?: unknown[] | Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "GITHUB";
                            org: string;
                            repo: string;
                            workflow: string;
                            workflowInputs?: Record<string, never>;
                            reportWorkflowStatus?: boolean | string;
                        } | {
                            /** @enum {string} */
                            type: "GITLAB";
                            projectName: string;
                            groupName: string;
                            defaultRef?: string;
                            pipelineVariables?: Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "AZURE_DEVOPS";
                            webhook: string;
                            org: string;
                            payload?: unknown[] | Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "UPSERT_ENTITY";
                            blueprintIdentifier: string;
                            mapping: {
                                identifier?: string;
                                title?: string;
                                team?: string | string[];
                                icon?: string;
                                properties?: Record<string, never>;
                                relations?: {
                                    [key: string]: string | string[] | null;
                                };
                            };
                        };
                        /** @description Determines whether the action requires approval before execution.<br/>Choose `ALL` to require all specified users to approve the action, or `ANY` to require only one. */
                        requiredApproval?: {
                            /** @enum {string} */
                            type: "ANY" | "ALL";
                        } | boolean;
                        /** @description The notification configuration for the approval process. Relevant only if `requiredApproval` is set to `true`. */
                        approvalNotification?: {
                            /**
                             * @default email
                             * @enum {string}
                             */
                            type: "webhook" | "email";
                        } & ({
                            /** @enum {string} */
                            type: "webhook";
                            /** @enum {string} */
                            format?: "json" | "slack";
                            /** Format: uri */
                            url: string;
                        } | {
                            /** @enum {string} */
                            type: "email";
                        });
                        /** @description Only relevant for **automations**. If `false`, the automation will be inactive (will not be triggered). */
                        publish?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/actions/{action_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an action/automation
         * @description This route allows you to fetch the details of a self-service action or automation.<br/><br/>To learn more about actions and automations, check out the [documentation](https://docs.port.io/actions-and-automations/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the action/automation you want to operate on. */
                    action_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change an action/automation
         * @description This route allows you to change the details of an existing self-service action or automation in your Port account.<br/><br/>To learn more about actions and automations, check out the [documentation](https://docs.port.io/actions-and-automations/).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the action/automation you want to operate on. */
                    action_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the action. */
                        identifier: string;
                        /** @description The title of the action. */
                        title?: string;
                        /** @description The icon of the action. */
                        icon?: string;
                        /** @description The description of the action. */
                        description?: string;
                        trigger: {
                            /**
                             * @description The [operation type](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/#basic-details) of the action.
                             * @enum {string}
                             */
                            operation: "DAY-2" | "DELETE";
                            /** @enum {string} */
                            type: "self-service";
                            /** @description The identifier of the blueprint that the action is associated with.<br/>Note that this is optional, as actions do not have to be tied directly to a blueprint. */
                            blueprintIdentifier?: string;
                            /** @description The [user inputs](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/user-inputs/) of the action. */
                            userInputs: {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                order: string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                /** @description The steps of the user inputs. Each step is an object containing its title and the order of its properties. */
                                steps: {
                                    /** @description The title of the step. */
                                    title: string;
                                    /** @description The order of the properties in the step - an array of property identifiers. */
                                    order?: string[];
                                }[];
                            };
                            actionCardButtonText?: string;
                            executeActionButtonText?: string;
                            /** @description Filters used to include/exclude specific entities from the action. */
                            condition?: {
                                /** @enum {string} */
                                type: "SEARCH";
                                rules: ({
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    } | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isEmpty" | "isNotEmpty";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=";
                                    value: number | string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isExpired" | "isNotExpired";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                                    value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "relatedTo";
                                    blueprint: string;
                                    value: string | string[];
                                    /** @enum {unknown} */
                                    direction?: "upstream" | "downstream";
                                    required?: boolean;
                                } | {
                                    propertySchema: {
                                        type: string;
                                        format?: string;
                                        items?: {
                                            type: string;
                                            format?: string;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "contains";
                                    value?: null | string | number | boolean;
                                } | {
                                    property: {
                                        path: (string | {
                                            relation?: string;
                                            maxHops?: number;
                                        })[];
                                        fromBlueprint?: string;
                                    };
                                    /** @enum {string} */
                                    operator: "matchAny";
                                    value: string | string[];
                                } | components["schemas"]["def-1"])[];
                                /** @enum {string} */
                                combinator: "and" | "or";
                            };
                        } | {
                            /**
                             * @description The [operation type](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/#basic-details) of the action.
                             * @enum {string}
                             */
                            operation: "CREATE";
                            /** @enum {string} */
                            type: "self-service";
                            /** @description The identifier of the blueprint that the action is associated with.<br/>Note that this is optional, as actions do not have to be tied directly to a blueprint. */
                            blueprintIdentifier?: string;
                            /** @description The [user inputs](https://docs.port.io/create-self-service-experiences/setup-ui-for-action/user-inputs/) of the action. */
                            userInputs: {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                order: string[];
                            } | {
                                properties: {
                                    [key: string]: {
                                        /**
                                         * Type
                                         * @description The type of the input.
                                         * @enum {unknown}
                                         */
                                        type: "string" | "number" | "boolean" | "object" | "array";
                                        jqQuery?: null;
                                        /**
                                         * Format
                                         * @description The format of the input.
                                         * @enum {unknown}
                                         */
                                        format?: "date-time" | "url" | "email" | "ipv4" | "ipv6" | "yaml" | "entity" | "user" | "team" | "proto" | "markdown" | "multi-line";
                                        /**
                                         * Blueprint
                                         * @description When using the `entity` format, this is the identifier of the blueprint whose entities will be selectable via this input.
                                         */
                                        blueprint?: string;
                                        /**
                                         * Depends On
                                         * @description The identifiers of the inputs that this input depends on. This input will be disabled until they have been given a value.
                                         */
                                        dependsOn?: string[];
                                        /**
                                         * Visible
                                         * @description The visibility of the input. Resolves to a boolean value (`true` = visible).
                                         */
                                        visible?: components["schemas"]["def-0"] | boolean;
                                        /**
                                         * Icon
                                         * @description The icon of the input.
                                         */
                                        icon?: string;
                                        /**
                                         * Dataset
                                         * @description The dataset to use for entity selection inputs.
                                         */
                                        dataset?: components["schemas"]["def-2"];
                                        /**
                                         * Sort
                                         * @description Relevant only for `Entity selection` inputs (`type` = `string` and `format` = `entity`).<br/>This input allows you to sort the entities in the dropdown by a specific property.
                                         */
                                        sort?: {
                                            /**
                                             * Property
                                             * @description The property by which to sort the entities.
                                             */
                                            property: string;
                                            /**
                                             * Order
                                             * @description The order in which to sort the entities.
                                             * @enum {string}
                                             */
                                            order: "ASC" | "DESC";
                                        };
                                    };
                                };
                                required?: components["schemas"]["def-0"] | string[];
                                titles?: {
                                    [key: string]: {
                                        title?: string;
                                        description?: string;
                                        visible?: boolean | components["schemas"]["def-0"];
                                    };
                                };
                                /** @description The steps of the user inputs. Each step is an object containing its title and the order of its properties. */
                                steps: {
                                    /** @description The title of the step. */
                                    title: string;
                                    /** @description The order of the properties in the step - an array of property identifiers. */
                                    order?: string[];
                                }[];
                            };
                            actionCardButtonText?: string;
                            executeActionButtonText?: string;
                        } | {
                            /** @enum {string} */
                            type: "automation";
                            /** @description The [event](https://docs.port.io/actions-and-automations/define-automations/setup-trigger) that triggers the action. */
                            event: {
                                /** @enum {string} */
                                type: "ENTITY_CREATED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ENTITY_UPDATED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ENTITY_DELETED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "TIMER_PROPERTY_EXPIRED";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                                /** @description The identifier of the timer property in the specified blueprint. */
                                propertyIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ANY_ENTITY_CHANGE";
                                /** @description The identifier of the blueprint whose entities will trigger the automation. */
                                blueprintIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "RUN_CREATED";
                                actionIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "RUN_UPDATED";
                                actionIdentifier: string;
                            } | {
                                /** @enum {string} */
                                type: "ANY_RUN_CHANGE";
                                actionIdentifier: string;
                            };
                            /** @description Filters used to include/exclude specific entities from the automation. */
                            condition?: {
                                /** @enum {string} */
                                type: "JQ";
                                /** @description An array of [jq expressions](https://docs.port.io/search-and-query/#jq-expressions) used to filter entities.<br/>Read more [here](https://docs.port.io/actions-and-automations/define-automations/setup-trigger#conditions). */
                                expressions: string[];
                                /** @enum {string} */
                                combinator?: "and" | "or";
                            };
                        };
                        /** @description Details the action's backend type and details. */
                        invocationMethod: {
                            /** @enum {string} */
                            type: "KAFKA";
                            /** @description An object containing the [action payload](https://docs.port.io/create-self-service-experiences/setup-backend/#define-the-actions-payload). */
                            payload?: unknown[] | Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "WEBHOOK";
                            /** @description The URL of the webhook. */
                            url: string;
                            /** @description If `true`, Port's [execution agent](https://docs.port.io/create-self-service-experiences/setup-backend/webhook/port-execution-agent/) will be used to handle invocations of this action. */
                            agent?: boolean | string;
                            /** @description If `true`, the action will be executed [synchronously](https://docs.port.io/create-self-service-experiences/setup-backend/webhook/#sync-vs-async-execution). */
                            synchronized?: boolean | string;
                            /** @description The HTTP method of the webhook (`POST`, `PUT`, `PATCH`, or `DELETE`). */
                            method?: string;
                            /** @description A JSON object containing the headers to be sent to the webhook in each execution, in `"key"`:`"value"` pairs. */
                            headers?: {
                                [key: string]: string;
                            };
                            /** @description The body sent to the webhook in each execution. This is where the [action payload](https://docs.port.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) is specified. */
                            body?: unknown[] | Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "GITHUB";
                            org: string;
                            repo: string;
                            workflow: string;
                            workflowInputs?: Record<string, never>;
                            reportWorkflowStatus?: boolean | string;
                        } | {
                            /** @enum {string} */
                            type: "GITLAB";
                            projectName: string;
                            groupName: string;
                            defaultRef?: string;
                            pipelineVariables?: Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "AZURE_DEVOPS";
                            webhook: string;
                            org: string;
                            payload?: unknown[] | Record<string, never>;
                        } | {
                            /** @enum {string} */
                            type: "UPSERT_ENTITY";
                            blueprintIdentifier: string;
                            mapping: {
                                identifier?: string;
                                title?: string;
                                team?: string | string[];
                                icon?: string;
                                properties?: Record<string, never>;
                                relations?: {
                                    [key: string]: string | string[] | null;
                                };
                            };
                        };
                        /** @description Determines whether the action requires approval before execution.<br/>Choose `ALL` to require all specified users to approve the action, or `ANY` to require only one. */
                        requiredApproval?: {
                            /** @enum {string} */
                            type: "ANY" | "ALL";
                        } | boolean;
                        /** @description The notification configuration for the approval process. Relevant only if `requiredApproval` is set to `true`. */
                        approvalNotification?: {
                            /**
                             * @default email
                             * @enum {string}
                             */
                            type: "webhook" | "email";
                        } & ({
                            /** @enum {string} */
                            type: "webhook";
                            /** @enum {string} */
                            format?: "json" | "slack";
                            /** Format: uri */
                            url: string;
                        } | {
                            /** @enum {string} */
                            type: "email";
                        });
                        /** @description Only relevant for **automations**. If `false`, the automation will be inactive (will not be triggered). */
                        publish?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete an action/automation
         * @description This route allows you to delete a self-service action or automation.<br/><br/>To learn more about actions and automations, check out the [documentation](https://docs.port.io/actions-and-automations/).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the action/automation you want to operate on. */
                    action_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This route is deprecated since November 20th 2024
         * @deprecated
         * @description This route is deprecated since November 20th 2024
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * This route is deprecated since November 20th 2024
         * @deprecated
         * @description This route is deprecated since November 20th 2024
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * This route is deprecated since November 20th 2024
         * @deprecated
         * @description This route is deprecated since November 20th 2024
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/actions/{action_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This route is deprecated since November 20th 2024
         * @deprecated
         * @description This route is deprecated since November 20th 2024
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * This route is deprecated since November 20th 2024
         * @deprecated
         * @description This route is deprecated since November 20th 2024
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * This route is deprecated since November 20th 2024
         * @deprecated
         * @description This route is deprecated since November 20th 2024
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/actions/{action_identifier}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a self-service action
         * @description This route allows you to execute a self-service action, thus creating an action run.<br/><br/>To learn more about action runs, check out the [documentation](https://docs.port.io/create-self-service-experiences/reflect-action-progress/).
         */
        post: {
            parameters: {
                query?: {
                    /** @description The executing user of the action. If not provided, the action will be run on behalf of the user/machine who initiated the action (identified by the bearer token used to execute this route). */
                    run_as?: string;
                };
                header?: never;
                path: {
                    /** @description The identifier of the action/automation you want to operate on. */
                    action_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The action's user inputs, in `"key"`:`"value"` pairs, where the key is the input's identifier and the value is the input's value. */
                        properties: Record<string, never>;
                        /** @description The identifier of the entity that the action will be executed on, if relevant. */
                        entity?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            run?: {
                                id: string;
                                blueprint?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                entity?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                action: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                properties: Record<string, never>;
                                rawProperties?: Record<string, never>;
                                /** Format: date-time */
                                endedAt?: string;
                                source: string | Record<string, never>;
                                requiredApproval: boolean | {
                                    /** @enum {string} */
                                    type: "ALL" | "ANY";
                                };
                                status: string;
                                statusLabel?: string | null;
                                link?: string[] | string;
                                summary?: string;
                                approval?: {
                                    description?: string;
                                    userId?: string | null;
                                    state?: string;
                                } | null;
                                payload?: {
                                    type?: string;
                                    /** Format: uri */
                                    url?: string;
                                    agent?: boolean;
                                    synchronized?: boolean;
                                    method?: string;
                                    headers?: {
                                        RUN_ID?: string;
                                    };
                                    body?: {
                                        port_context?: {
                                            runId?: string;
                                        };
                                    };
                                } | null;
                                response?: string | unknown[] | Record<string, never>;
                                createdBy?: string;
                                impersonatedBy?: string;
                                updatedBy?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/actions/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an action run's details
         * @description This route allows you to fetch the details of an action run.<br/><br/>To learn more about action runs, check out the [documentation](https://docs.port.io/create-self-service-experiences/reflect-action-progress/).
         */
        get: {
            parameters: {
                query?: {
                    version?: "v1" | "v2";
                };
                header?: never;
                path: {
                    /** @description The identifier of the action run. */
                    run_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            run?: {
                                id: string;
                                blueprint?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                entity?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                action: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                properties: Record<string, never>;
                                rawProperties?: Record<string, never>;
                                /** Format: date-time */
                                endedAt?: string;
                                source: string | Record<string, never>;
                                requiredApproval: boolean | {
                                    /** @enum {string} */
                                    type: "ALL" | "ANY";
                                };
                                status: string;
                                statusLabel?: string | null;
                                link?: string[] | string;
                                summary?: string;
                                approval?: {
                                    description?: string;
                                    userId?: string | null;
                                    state?: string;
                                } | null;
                                payload?: {
                                    type?: string;
                                    /** Format: uri */
                                    url?: string;
                                    agent?: boolean;
                                    synchronized?: boolean;
                                    method?: string;
                                    headers?: {
                                        RUN_ID?: string;
                                    };
                                    body?: {
                                        port_context?: {
                                            runId?: string;
                                        };
                                    };
                                } | null;
                                response?: string | unknown[] | Record<string, never>;
                                createdBy?: string;
                                impersonatedBy?: string;
                                updatedBy?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an action run
         * @description This route allows you to update an action run's details. This can be used to update the run's status & label, and add links to it (e.g. external logs of the job runner).<br/><br/>To learn more about action runs, check out the [documentation](https://docs.port.io/create-self-service-experiences/reflect-action-progress/).
         */
        patch: {
            parameters: {
                query?: {
                    version?: "v1" | "v2";
                };
                header?: never;
                path: {
                    /** @description The identifier of the action run. */
                    run_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "SUCCESS" | "FAILURE";
                        /** @description A label to describe the status of the action run. */
                        statusLabel?: string;
                        /** @description One or more links to be displayed in the run's page in Port. For example, a link to the external logs of the job runner. */
                        link?: string | string[];
                        /** @deprecated */
                        message?: Record<string, never>;
                        /** @description A summary of the action run, which will be displayed in the run's page in Port. */
                        summary?: string;
                        /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                        externalRunId?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            run?: {
                                id: string;
                                blueprint?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                entity?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                action: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                properties: Record<string, never>;
                                rawProperties?: Record<string, never>;
                                /** Format: date-time */
                                endedAt?: string;
                                source: string | Record<string, never>;
                                requiredApproval: boolean | {
                                    /** @enum {string} */
                                    type: "ALL" | "ANY";
                                };
                                status: string;
                                statusLabel?: string | null;
                                link?: string[] | string;
                                summary?: string;
                                approval?: {
                                    description?: string;
                                    userId?: string | null;
                                    state?: string;
                                } | null;
                                payload?: {
                                    type?: string;
                                    /** Format: uri */
                                    url?: string;
                                    agent?: boolean;
                                    synchronized?: boolean;
                                    method?: string;
                                    headers?: {
                                        RUN_ID?: string;
                                    };
                                    body?: {
                                        port_context?: {
                                            runId?: string;
                                        };
                                    };
                                } | null;
                                response?: string | unknown[] | Record<string, never>;
                                createdBy?: string;
                                impersonatedBy?: string;
                                updatedBy?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/actions/runs/{run_id}/approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Approve an action run
         * @description This route allows you to approve or decline a request to execute an action that requires approval.<br/><br/>To learn more about manual approval for actions, check out the [documentation](https://docs.port.io/create-self-service-experiences/set-self-service-actions-rbac/#configure-manual-approval-for-actions).
         */
        patch: {
            parameters: {
                query?: {
                    version?: "v1" | "v2";
                };
                header?: never;
                path: {
                    /** @description The identifier of the action run. */
                    run_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "DECLINE" | "APPROVE";
                        /** @description A description and/or reason for the given status. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            run?: {
                                id: string;
                                blueprint?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                entity?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                action: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                properties: Record<string, never>;
                                rawProperties?: Record<string, never>;
                                /** Format: date-time */
                                endedAt?: string;
                                source: string | Record<string, never>;
                                requiredApproval: boolean | {
                                    /** @enum {string} */
                                    type: "ALL" | "ANY";
                                };
                                status: string;
                                statusLabel?: string | null;
                                link?: string[] | string;
                                summary?: string;
                                approval?: {
                                    description?: string;
                                    userId?: string | null;
                                    state?: string;
                                } | null;
                                payload?: {
                                    type?: string;
                                    /** Format: uri */
                                    url?: string;
                                    agent?: boolean;
                                    synchronized?: boolean;
                                    method?: string;
                                    headers?: {
                                        RUN_ID?: string;
                                    };
                                    body?: {
                                        port_context?: {
                                            runId?: string;
                                        };
                                    };
                                } | null;
                                response?: string | unknown[] | Record<string, never>;
                                createdBy?: string;
                                impersonatedBy?: string;
                                updatedBy?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/actions/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all action runs
         * @description This route allows you to fetch all action runs in your Port account. The route will perform a logical `AND` between all query parameters below, and return all action runs that match the criteria.<br/><br/>To learn more about action runs, check out the [documentation](https://docs.port.io/create-self-service-experiences/reflect-action-progress/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The identifier of the entity associated with the action run. */
                    entity?: string;
                    /** @description The identifier of the blueprint associated with the action run. */
                    blueprint?: string;
                    /** @description If `true`, only running action runs will be fetched. */
                    active?: boolean;
                    /** @description The email of the user who initiated the action run. */
                    user_email?: string;
                    /** @description The id of the user who initiated the action run. */
                    user_id?: string;
                    /** @description The maximum number of action runs to fetch. */
                    limit?: number;
                    /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                    external_run_id?: string;
                    version?: "v1" | "v2";
                    action?: string;
                    source?: ("UI" | "API" | "AUTOMATION")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            runs?: {
                                id: string;
                                blueprint?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                entity?: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                action: {
                                    identifier: string;
                                    title?: string | null;
                                    icon?: string | null;
                                    deleted?: boolean;
                                };
                                properties: Record<string, never>;
                                rawProperties?: Record<string, never>;
                                /** Format: date-time */
                                endedAt?: string;
                                source: string | Record<string, never>;
                                requiredApproval: boolean | {
                                    /** @enum {string} */
                                    type: "ALL" | "ANY";
                                };
                                status: string;
                                statusLabel?: string | null;
                                link?: string[] | string;
                                summary?: string;
                                approval?: {
                                    description?: string;
                                    userId?: string | null;
                                    state?: string;
                                } | null;
                                payload?: {
                                    type?: string;
                                    /** Format: uri */
                                    url?: string;
                                    agent?: boolean;
                                    synchronized?: boolean;
                                    method?: string;
                                    headers?: {
                                        RUN_ID?: string;
                                    };
                                    body?: {
                                        port_context?: {
                                            runId?: string;
                                        };
                                    };
                                } | null;
                                response?: string | unknown[] | Record<string, never>;
                                createdBy?: string;
                                impersonatedBy?: string;
                                updatedBy?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/actions/runs/{run_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an action's run logs
         * @description This route allows you to fetch the logs from an action run.<br/><br/>To learn more about action runs, check out the [documentation](https://docs.port.io/create-self-service-experiences/reflect-action-progress/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The maximum number of logs to fetch. */
                    limit?: number;
                    /** @description The number of logs to skip. */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description The identifier of the action run. */
                    run_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            runLogs?: {
                                id: string;
                                runId: string;
                                message: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a log to an action run
         * @description This route allows you to send a log message back to Port, which will be displayed in the action run's page. You can also use this route to update the run's termination status (SUCCESS/FAILURE) and label describing the status.<br/><br/>To learn more about action runs, check out the [documentation](https://docs.port.io/create-self-service-experiences/reflect-action-progress/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the action run. */
                    run_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The termination status of the action run. Can be left blank if you only want to send a log message.
                         * @enum {string}
                         */
                        terminationStatus?: "SUCCESS" | "FAILURE";
                        /** @description A label to describe the status of the action run. Can be left blank if you only want to send a log message. */
                        statusLabel?: string;
                        /** @description The log message to send back to Port. */
                        message: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            runLog?: {
                                id: string;
                                runId: string;
                                message: string;
                                createdBy: string;
                                /** Format: date-time */
                                createdAt: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/actions/runs/{run_id}/approvers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an action run's approvers
         * @description This route allows you to fetch the approvers of a specific action run.<br/><br/>To learn more about manual approval for actions, check out the [documentation](https://docs.port.io/create-self-service-experiences/set-self-service-actions-rbac/#configure-manual-approval-for-actions).
         */
        get: {
            parameters: {
                query: {
                    /** @description If `true`, the route will also return the users who have not yet approved the action run. */
                    include_pending_approvers: boolean;
                };
                header?: never;
                path: {
                    /** @description The identifier of the action run. */
                    run_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            approvers?: {
                                userId: string;
                                state: string;
                                description?: string | null;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all pages in your portal
         * @description This route allows you to get all pages in your portal.<br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        get: {
            parameters: {
                query: {
                    compact: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create pages in your portal
         * @description This route allows you to create pages in your portal.<br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example string */
                        identifier: string;
                        blueprint?: string;
                        title?: string;
                        description?: string;
                        icon?: string;
                        /** @enum {string|null} */
                        sidebar?: null | "catalog";
                        parent?: string | null;
                        after?: string | null;
                        locked?: boolean;
                        requiredQueryParams?: string[];
                        widgets?: ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "ai-agent";
                            title?: string;
                            description?: string;
                            agentIdentifier: string;
                            icon?: string;
                            useMCP?: boolean;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "entity-info";
                            title?: string;
                            description?: string;
                            icon?: string;
                            entity: string;
                            hiddenQuery?: string[];
                            order?: string[];
                            showEmptyValues?: boolean;
                            blueprint: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "entity-details";
                            title?: string;
                            description?: string;
                            icon?: string;
                            entity: string;
                            hiddenQuery?: string[];
                            order?: string[];
                            showEmptyValues?: boolean;
                            blueprint: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "action-runs-table-widget";
                            icon?: string;
                            description?: string;
                            title?: string;
                            /** @enum {string} */
                            displayMode?: "single" | "widget";
                            action: string;
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "action-card-widget";
                            icon?: string;
                            description?: string;
                            title?: string;
                            actions: {
                                action: string;
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "links-widget";
                            title?: string;
                            description?: string;
                            icon?: string;
                            links: {
                                title: string;
                                description?: string;
                                url: string;
                                icon?: string;
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-entities-explorer";
                            icon?: string;
                            description?: string;
                            emptyStateText?: string;
                            title?: string;
                            blueprint?: string;
                            dataset: components["schemas"]["def-1"];
                            excludedFields?: string[];
                            /** @enum {string} */
                            displayMode?: "tabs" | "single" | "widget";
                            blueprintConfig?: {
                                [key: string]: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        shown?: string[];
                                        order?: string[];
                                    };
                                    tabIndex?: number;
                                    hidden?: boolean;
                                    title?: string;
                                    description?: string;
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-entities-explorer-by-direction";
                            title?: string;
                            blueprintConfig?: {
                                [key: string]: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        shown?: string[];
                                        order?: string[];
                                    };
                                    tabIndex?: number;
                                    hidden?: boolean;
                                    title?: string;
                                    description?: string;
                                    dataset?: components["schemas"]["def-1"];
                                    targetBlueprint?: string;
                                    relatedProperty?: string;
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-audit-log";
                            title?: string;
                            description?: string;
                            query: {
                                /** @description An identifier of the log event you want to fetch. */
                                identifier?: string;
                                /** @description Fetch all audit logs related to the specified entity. */
                                entity?: string;
                                /** @description Fetch all audit logs related to the specified blueprint. */
                                blueprint?: string;
                                /** @description Fetch all audit logs related to the specified action run. */
                                run_id?: string;
                                /** @description Fetch all audit logs related to the specified webhook. */
                                webhookId?: string;
                                /** @description Fetch all audit logs related to the specified webhook event. */
                                webhookEventId?: string;
                                /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                origin?: string[];
                                /** @description Fetch all audit logs related to the specified integration. */
                                InstallationId?: string;
                                /** @description Fetch all audit logs related to the specified resource type/s. */
                                resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                /**
                                 * Format: date-time
                                 * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                 */
                                from?: string;
                                /**
                                 * Format: date-time
                                 * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                 */
                                to?: string;
                                /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                action?: string;
                                /**
                                 * @description Fetch all audit logs with the specified status.
                                 * @enum {string}
                                 */
                                status?: "SUCCESS" | "FAILURE";
                                /** @description The maximum number of logs to fetch. */
                                limit?: number;
                                /** @enum {string} */
                                actionType?: "automation" | "self-service";
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "users-table";
                            title?: string;
                            query?: {
                                team?: string;
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "teams-table";
                            title?: string;
                            query?: {
                                user?: string;
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "runs-table";
                            title?: string;
                            query?: {
                                /** @description The identifier of the entity associated with the action run. */
                                entity?: string;
                                /** @description The identifier of the blueprint associated with the action run. */
                                blueprint?: string;
                                /** @description If `true`, only running action runs will be fetched. */
                                active?: boolean;
                                /** @description The email of the user who initiated the action run. */
                                user_email?: string;
                                /** @description The id of the user who initiated the action run. */
                                user_id?: string;
                                /** @description The maximum number of action runs to fetch. */
                                limit?: number;
                                /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                external_run_id?: string;
                                /** @enum {string} */
                                version?: "v1" | "v2";
                                action?: string;
                                source?: ("UI" | "API" | "AUTOMATION")[];
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "run-info";
                            title?: string;
                            runId: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "user-info";
                            title?: string;
                            user_email: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "graph-entities-explorer";
                            title?: string;
                            dataset: components["schemas"]["def-1"];
                            hiddenBlueprints?: string[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "entities-pie-chart";
                            title?: string;
                            blueprint?: string;
                            property: string;
                            description?: string;
                            dataset: components["schemas"]["def-1"];
                            emptyStateText?: string;
                        } | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "propertiesValueHistory";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            entity: string;
                            properties: string[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "aggregatePropertiesValues";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            func: "sum" | "average" | "min" | "max" | "median" | "last";
                            properties: string[];
                            measureTimeBy: string;
                            dataset?: components["schemas"]["def-1"];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "countEntities";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            func: "count" | "average";
                            breakdownProperty?: string;
                            measureTimeBy: string;
                            dataset?: components["schemas"]["def-1"];
                        }) | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "entities-number-chart";
                            title?: string;
                            icon?: string;
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            unit: "none" | "$" | "€" | "£" | "%" | "custom";
                            /** @enum {string} */
                            unitAlignment?: "left" | "right";
                            /** @enum {string} */
                            calculationBy?: "entities" | "property";
                            conditionalFormatting?: {
                                /** @enum {unknown} */
                                operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                value: number;
                                message?: string;
                                description?: string;
                                /** @enum {string} */
                                color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                            }[];
                        } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "iframe-widget";
                            title: string;
                            icon?: string;
                            description?: string;
                            /** Format: url */
                            url: string;
                            /** @enum {string} */
                            urlType: "public" | "protected";
                        } & unknown) | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "markdown";
                            title: string;
                            icon?: string;
                            markdown?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "team-info";
                            title?: string;
                            team_name: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "recently-viewed-entities";
                            title: string;
                            icon?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "recently-used-actions";
                            title: string;
                            icon?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "my-entities";
                            title: string;
                            icon?: string;
                        } | components["schemas"]["def-3"] | components["schemas"]["def-4"] | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "grouper";
                            title?: string;
                            /** @enum {string} */
                            displayMode: "tabs" | "switch";
                            activeGroupUrlParam?: string;
                            groupsOrder?: string[];
                            groups: {
                                title: string;
                                icon?: string;
                                widgets: ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "ai-agent";
                                    title?: string;
                                    description?: string;
                                    agentIdentifier: string;
                                    icon?: string;
                                    useMCP?: boolean;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "entity-info";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    entity: string;
                                    hiddenQuery?: string[];
                                    order?: string[];
                                    showEmptyValues?: boolean;
                                    blueprint: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "entity-details";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    entity: string;
                                    hiddenQuery?: string[];
                                    order?: string[];
                                    showEmptyValues?: boolean;
                                    blueprint: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "action-runs-table-widget";
                                    icon?: string;
                                    description?: string;
                                    title?: string;
                                    /** @enum {string} */
                                    displayMode?: "single" | "widget";
                                    action: string;
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "action-card-widget";
                                    icon?: string;
                                    description?: string;
                                    title?: string;
                                    actions: {
                                        action: string;
                                    }[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "links-widget";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    links: {
                                        title: string;
                                        description?: string;
                                        url: string;
                                        icon?: string;
                                    }[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-entities-explorer";
                                    icon?: string;
                                    description?: string;
                                    emptyStateText?: string;
                                    title?: string;
                                    blueprint?: string;
                                    dataset: components["schemas"]["def-1"];
                                    excludedFields?: string[];
                                    /** @enum {string} */
                                    displayMode?: "tabs" | "single" | "widget";
                                    blueprintConfig?: {
                                        [key: string]: {
                                            filterSettings?: {
                                                filterBy: components["schemas"]["def-1"];
                                            };
                                            groupSettings?: {
                                                groupBy: string[];
                                            };
                                            sortSettings?: {
                                                sortBy?: {
                                                    property: string;
                                                    /** @enum {unknown} */
                                                    order: "asc" | "desc";
                                                }[];
                                            };
                                            propertiesSettings?: {
                                                hidden?: string[];
                                                shown?: string[];
                                                order?: string[];
                                            };
                                            tabIndex?: number;
                                            hidden?: boolean;
                                            title?: string;
                                            description?: string;
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-entities-explorer-by-direction";
                                    title?: string;
                                    blueprintConfig?: {
                                        [key: string]: {
                                            filterSettings?: {
                                                filterBy: components["schemas"]["def-1"];
                                            };
                                            groupSettings?: {
                                                groupBy: string[];
                                            };
                                            sortSettings?: {
                                                sortBy?: {
                                                    property: string;
                                                    /** @enum {unknown} */
                                                    order: "asc" | "desc";
                                                }[];
                                            };
                                            propertiesSettings?: {
                                                hidden?: string[];
                                                shown?: string[];
                                                order?: string[];
                                            };
                                            tabIndex?: number;
                                            hidden?: boolean;
                                            title?: string;
                                            description?: string;
                                            dataset?: components["schemas"]["def-1"];
                                            targetBlueprint?: string;
                                            relatedProperty?: string;
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-audit-log";
                                    title?: string;
                                    description?: string;
                                    query: {
                                        /** @description An identifier of the log event you want to fetch. */
                                        identifier?: string;
                                        /** @description Fetch all audit logs related to the specified entity. */
                                        entity?: string;
                                        /** @description Fetch all audit logs related to the specified blueprint. */
                                        blueprint?: string;
                                        /** @description Fetch all audit logs related to the specified action run. */
                                        run_id?: string;
                                        /** @description Fetch all audit logs related to the specified webhook. */
                                        webhookId?: string;
                                        /** @description Fetch all audit logs related to the specified webhook event. */
                                        webhookEventId?: string;
                                        /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                        origin?: string[];
                                        /** @description Fetch all audit logs related to the specified integration. */
                                        InstallationId?: string;
                                        /** @description Fetch all audit logs related to the specified resource type/s. */
                                        resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                        /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                        includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                        /**
                                         * Format: date-time
                                         * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                         */
                                        from?: string;
                                        /**
                                         * Format: date-time
                                         * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                         */
                                        to?: string;
                                        /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                        action?: string;
                                        /**
                                         * @description Fetch all audit logs with the specified status.
                                         * @enum {string}
                                         */
                                        status?: "SUCCESS" | "FAILURE";
                                        /** @description The maximum number of logs to fetch. */
                                        limit?: number;
                                        /** @enum {string} */
                                        actionType?: "automation" | "self-service";
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "users-table";
                                    title?: string;
                                    query?: {
                                        team?: string;
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "teams-table";
                                    title?: string;
                                    query?: {
                                        user?: string;
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "runs-table";
                                    title?: string;
                                    query?: {
                                        /** @description The identifier of the entity associated with the action run. */
                                        entity?: string;
                                        /** @description The identifier of the blueprint associated with the action run. */
                                        blueprint?: string;
                                        /** @description If `true`, only running action runs will be fetched. */
                                        active?: boolean;
                                        /** @description The email of the user who initiated the action run. */
                                        user_email?: string;
                                        /** @description The id of the user who initiated the action run. */
                                        user_id?: string;
                                        /** @description The maximum number of action runs to fetch. */
                                        limit?: number;
                                        /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                        external_run_id?: string;
                                        /** @enum {string} */
                                        version?: "v1" | "v2";
                                        action?: string;
                                        source?: ("UI" | "API" | "AUTOMATION")[];
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "run-info";
                                    title?: string;
                                    runId: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "user-info";
                                    title?: string;
                                    user_email: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "graph-entities-explorer";
                                    title?: string;
                                    dataset: components["schemas"]["def-1"];
                                    hiddenBlueprints?: string[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "entities-pie-chart";
                                    title?: string;
                                    blueprint?: string;
                                    property: string;
                                    description?: string;
                                    dataset: components["schemas"]["def-1"];
                                    emptyStateText?: string;
                                } | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "propertiesValueHistory";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    entity: string;
                                    properties: string[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "aggregatePropertiesValues";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    func: "sum" | "average" | "min" | "max" | "median" | "last";
                                    properties: string[];
                                    measureTimeBy: string;
                                    dataset?: components["schemas"]["def-1"];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "countEntities";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    func: "count" | "average";
                                    breakdownProperty?: string;
                                    measureTimeBy: string;
                                    dataset?: components["schemas"]["def-1"];
                                }) | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "entities-number-chart";
                                    title?: string;
                                    icon?: string;
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    unit: "none" | "$" | "€" | "£" | "%" | "custom";
                                    /** @enum {string} */
                                    unitAlignment?: "left" | "right";
                                    /** @enum {string} */
                                    calculationBy?: "entities" | "property";
                                    conditionalFormatting?: {
                                        /** @enum {unknown} */
                                        operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                        value: number;
                                        message?: string;
                                        description?: string;
                                        /** @enum {string} */
                                        color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                    }[];
                                } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "iframe-widget";
                                    title: string;
                                    icon?: string;
                                    description?: string;
                                    /** Format: url */
                                    url: string;
                                    /** @enum {string} */
                                    urlType: "public" | "protected";
                                } & unknown) | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "markdown";
                                    title: string;
                                    icon?: string;
                                    markdown?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "team-info";
                                    title?: string;
                                    team_name: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "recently-viewed-entities";
                                    title: string;
                                    icon?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "recently-used-actions";
                                    title: string;
                                    icon?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "my-entities";
                                    title: string;
                                    icon?: string;
                                } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "dashboard-widget";
                            layout: {
                                height: number;
                                columns: {
                                    size: number;
                                    id: string;
                                }[];
                            }[];
                            widgets: ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "ai-agent";
                                title?: string;
                                description?: string;
                                agentIdentifier: string;
                                icon?: string;
                                useMCP?: boolean;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "entity-info";
                                title?: string;
                                description?: string;
                                icon?: string;
                                entity: string;
                                hiddenQuery?: string[];
                                order?: string[];
                                showEmptyValues?: boolean;
                                blueprint: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "entity-details";
                                title?: string;
                                description?: string;
                                icon?: string;
                                entity: string;
                                hiddenQuery?: string[];
                                order?: string[];
                                showEmptyValues?: boolean;
                                blueprint: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "action-runs-table-widget";
                                icon?: string;
                                description?: string;
                                title?: string;
                                /** @enum {string} */
                                displayMode?: "single" | "widget";
                                action: string;
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "action-card-widget";
                                icon?: string;
                                description?: string;
                                title?: string;
                                actions: {
                                    action: string;
                                }[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "links-widget";
                                title?: string;
                                description?: string;
                                icon?: string;
                                links: {
                                    title: string;
                                    description?: string;
                                    url: string;
                                    icon?: string;
                                }[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-entities-explorer";
                                icon?: string;
                                description?: string;
                                emptyStateText?: string;
                                title?: string;
                                blueprint?: string;
                                dataset: components["schemas"]["def-1"];
                                excludedFields?: string[];
                                /** @enum {string} */
                                displayMode?: "tabs" | "single" | "widget";
                                blueprintConfig?: {
                                    [key: string]: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            shown?: string[];
                                            order?: string[];
                                        };
                                        tabIndex?: number;
                                        hidden?: boolean;
                                        title?: string;
                                        description?: string;
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-entities-explorer-by-direction";
                                title?: string;
                                blueprintConfig?: {
                                    [key: string]: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            shown?: string[];
                                            order?: string[];
                                        };
                                        tabIndex?: number;
                                        hidden?: boolean;
                                        title?: string;
                                        description?: string;
                                        dataset?: components["schemas"]["def-1"];
                                        targetBlueprint?: string;
                                        relatedProperty?: string;
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-audit-log";
                                title?: string;
                                description?: string;
                                query: {
                                    /** @description An identifier of the log event you want to fetch. */
                                    identifier?: string;
                                    /** @description Fetch all audit logs related to the specified entity. */
                                    entity?: string;
                                    /** @description Fetch all audit logs related to the specified blueprint. */
                                    blueprint?: string;
                                    /** @description Fetch all audit logs related to the specified action run. */
                                    run_id?: string;
                                    /** @description Fetch all audit logs related to the specified webhook. */
                                    webhookId?: string;
                                    /** @description Fetch all audit logs related to the specified webhook event. */
                                    webhookEventId?: string;
                                    /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                    origin?: string[];
                                    /** @description Fetch all audit logs related to the specified integration. */
                                    InstallationId?: string;
                                    /** @description Fetch all audit logs related to the specified resource type/s. */
                                    resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                    /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                    includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                    /**
                                     * Format: date-time
                                     * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                     */
                                    from?: string;
                                    /**
                                     * Format: date-time
                                     * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                     */
                                    to?: string;
                                    /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                    action?: string;
                                    /**
                                     * @description Fetch all audit logs with the specified status.
                                     * @enum {string}
                                     */
                                    status?: "SUCCESS" | "FAILURE";
                                    /** @description The maximum number of logs to fetch. */
                                    limit?: number;
                                    /** @enum {string} */
                                    actionType?: "automation" | "self-service";
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "users-table";
                                title?: string;
                                query?: {
                                    team?: string;
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "teams-table";
                                title?: string;
                                query?: {
                                    user?: string;
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "runs-table";
                                title?: string;
                                query?: {
                                    /** @description The identifier of the entity associated with the action run. */
                                    entity?: string;
                                    /** @description The identifier of the blueprint associated with the action run. */
                                    blueprint?: string;
                                    /** @description If `true`, only running action runs will be fetched. */
                                    active?: boolean;
                                    /** @description The email of the user who initiated the action run. */
                                    user_email?: string;
                                    /** @description The id of the user who initiated the action run. */
                                    user_id?: string;
                                    /** @description The maximum number of action runs to fetch. */
                                    limit?: number;
                                    /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                    external_run_id?: string;
                                    /** @enum {string} */
                                    version?: "v1" | "v2";
                                    action?: string;
                                    source?: ("UI" | "API" | "AUTOMATION")[];
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "run-info";
                                title?: string;
                                runId: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "user-info";
                                title?: string;
                                user_email: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "graph-entities-explorer";
                                title?: string;
                                dataset: components["schemas"]["def-1"];
                                hiddenBlueprints?: string[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "entities-pie-chart";
                                title?: string;
                                blueprint?: string;
                                property: string;
                                description?: string;
                                dataset: components["schemas"]["def-1"];
                                emptyStateText?: string;
                            } | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "propertiesValueHistory";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                entity: string;
                                properties: string[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "aggregatePropertiesValues";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                func: "sum" | "average" | "min" | "max" | "median" | "last";
                                properties: string[];
                                measureTimeBy: string;
                                dataset?: components["schemas"]["def-1"];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "countEntities";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                func: "count" | "average";
                                breakdownProperty?: string;
                                measureTimeBy: string;
                                dataset?: components["schemas"]["def-1"];
                            }) | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "entities-number-chart";
                                title?: string;
                                icon?: string;
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                unit: "none" | "$" | "€" | "£" | "%" | "custom";
                                /** @enum {string} */
                                unitAlignment?: "left" | "right";
                                /** @enum {string} */
                                calculationBy?: "entities" | "property";
                                conditionalFormatting?: {
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                    value: number;
                                    message?: string;
                                    description?: string;
                                    /** @enum {string} */
                                    color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                }[];
                            } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "iframe-widget";
                                title: string;
                                icon?: string;
                                description?: string;
                                /** Format: url */
                                url: string;
                                /** @enum {string} */
                                urlType: "public" | "protected";
                            } & unknown) | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "markdown";
                                title: string;
                                icon?: string;
                                markdown?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "team-info";
                                title?: string;
                                team_name: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "recently-viewed-entities";
                                title: string;
                                icon?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "recently-used-actions";
                                title: string;
                                icon?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "my-entities";
                                title: string;
                                icon?: string;
                            } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
                        })[];
                        /** @enum {string} */
                        type?: "run" | "user" | "team" | "entity" | "users-and-teams" | "runs-history" | "audit-log" | "blueprint-entities" | "dashboard" | "home";
                        /** @default true */
                        showInSidebar?: boolean;
                        /**
                         * @default software_catalog
                         * @enum {string}
                         */
                        section?: "software_catalog" | "organization";
                        pageFilters?: {
                            /**
                             * /schemas/filterTag
                             * @example {
                             *       "combinator": "and",
                             *       "rules": [
                             *         {
                             *           "property": "$blueprint",
                             *           "operator": "=",
                             *           "value": "service"
                             *         }
                             *       ]
                             *     }
                             */
                            query: {
                                /**
                                 * @description The combinator to use for the rules.
                                 * @enum {unknown}
                                 */
                                combinator: "and";
                                rules: ({
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    } | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isEmpty" | "isNotEmpty";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=";
                                    value: number | string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isExpired" | "isNotExpired";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                                    value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "relatedTo";
                                    blueprint: string;
                                    value: string | string[];
                                    /** @enum {unknown} */
                                    direction?: "upstream" | "downstream";
                                    required?: boolean;
                                } | {
                                    propertySchema: {
                                        type: string;
                                        format?: string;
                                        items?: {
                                            type: string;
                                            format?: string;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "contains";
                                    value?: null | string | number | boolean;
                                } | {
                                    property: {
                                        path: (string | {
                                            relation?: string;
                                            maxHops?: number;
                                        })[];
                                        fromBlueprint?: string;
                                    };
                                    /** @enum {string} */
                                    operator: "matchAny";
                                    value: string | string[];
                                } | components["schemas"]["def-1"])[];
                            };
                            identifier: string;
                            title: string;
                        }[];
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pages/{identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a page
         * @description This route allows you to get a specific page in your portal.<br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a page
         * @description This route allows you to delete a specific page in your portal.<br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Patch a page
         * @description This route allows you to update a specific page in your portal.<br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example string */
                        identifier?: string;
                        blueprint?: string;
                        title?: string;
                        description?: string;
                        icon?: string;
                        parent?: string | null;
                        after?: string | null;
                        locked?: boolean;
                        widgets?: ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "ai-agent";
                            title?: string;
                            description?: string;
                            agentIdentifier: string;
                            icon?: string;
                            useMCP?: boolean;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "entity-info";
                            title?: string;
                            description?: string;
                            icon?: string;
                            entity: string;
                            hiddenQuery?: string[];
                            order?: string[];
                            showEmptyValues?: boolean;
                            blueprint: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "entity-details";
                            title?: string;
                            description?: string;
                            icon?: string;
                            entity: string;
                            hiddenQuery?: string[];
                            order?: string[];
                            showEmptyValues?: boolean;
                            blueprint: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "action-runs-table-widget";
                            icon?: string;
                            description?: string;
                            title?: string;
                            /** @enum {string} */
                            displayMode?: "single" | "widget";
                            action: string;
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "action-card-widget";
                            icon?: string;
                            description?: string;
                            title?: string;
                            actions: {
                                action: string;
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "links-widget";
                            title?: string;
                            description?: string;
                            icon?: string;
                            links: {
                                title: string;
                                description?: string;
                                url: string;
                                icon?: string;
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-entities-explorer";
                            icon?: string;
                            description?: string;
                            emptyStateText?: string;
                            title?: string;
                            blueprint?: string;
                            dataset: components["schemas"]["def-1"];
                            excludedFields?: string[];
                            /** @enum {string} */
                            displayMode?: "tabs" | "single" | "widget";
                            blueprintConfig?: {
                                [key: string]: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        shown?: string[];
                                        order?: string[];
                                    };
                                    tabIndex?: number;
                                    hidden?: boolean;
                                    title?: string;
                                    description?: string;
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-entities-explorer-by-direction";
                            title?: string;
                            blueprintConfig?: {
                                [key: string]: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        shown?: string[];
                                        order?: string[];
                                    };
                                    tabIndex?: number;
                                    hidden?: boolean;
                                    title?: string;
                                    description?: string;
                                    dataset?: components["schemas"]["def-1"];
                                    targetBlueprint?: string;
                                    relatedProperty?: string;
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-audit-log";
                            title?: string;
                            description?: string;
                            query: {
                                /** @description An identifier of the log event you want to fetch. */
                                identifier?: string;
                                /** @description Fetch all audit logs related to the specified entity. */
                                entity?: string;
                                /** @description Fetch all audit logs related to the specified blueprint. */
                                blueprint?: string;
                                /** @description Fetch all audit logs related to the specified action run. */
                                run_id?: string;
                                /** @description Fetch all audit logs related to the specified webhook. */
                                webhookId?: string;
                                /** @description Fetch all audit logs related to the specified webhook event. */
                                webhookEventId?: string;
                                /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                origin?: string[];
                                /** @description Fetch all audit logs related to the specified integration. */
                                InstallationId?: string;
                                /** @description Fetch all audit logs related to the specified resource type/s. */
                                resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                /**
                                 * Format: date-time
                                 * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                 */
                                from?: string;
                                /**
                                 * Format: date-time
                                 * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                 */
                                to?: string;
                                /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                action?: string;
                                /**
                                 * @description Fetch all audit logs with the specified status.
                                 * @enum {string}
                                 */
                                status?: "SUCCESS" | "FAILURE";
                                /** @description The maximum number of logs to fetch. */
                                limit?: number;
                                /** @enum {string} */
                                actionType?: "automation" | "self-service";
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "users-table";
                            title?: string;
                            query?: {
                                team?: string;
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "teams-table";
                            title?: string;
                            query?: {
                                user?: string;
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "runs-table";
                            title?: string;
                            query?: {
                                /** @description The identifier of the entity associated with the action run. */
                                entity?: string;
                                /** @description The identifier of the blueprint associated with the action run. */
                                blueprint?: string;
                                /** @description If `true`, only running action runs will be fetched. */
                                active?: boolean;
                                /** @description The email of the user who initiated the action run. */
                                user_email?: string;
                                /** @description The id of the user who initiated the action run. */
                                user_id?: string;
                                /** @description The maximum number of action runs to fetch. */
                                limit?: number;
                                /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                external_run_id?: string;
                                /** @enum {string} */
                                version?: "v1" | "v2";
                                action?: string;
                                source?: ("UI" | "API" | "AUTOMATION")[];
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "run-info";
                            title?: string;
                            runId: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "user-info";
                            title?: string;
                            user_email: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "graph-entities-explorer";
                            title?: string;
                            dataset: components["schemas"]["def-1"];
                            hiddenBlueprints?: string[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "entities-pie-chart";
                            title?: string;
                            blueprint?: string;
                            property: string;
                            description?: string;
                            dataset: components["schemas"]["def-1"];
                            emptyStateText?: string;
                        } | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "propertiesValueHistory";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            entity: string;
                            properties: string[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "aggregatePropertiesValues";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            func: "sum" | "average" | "min" | "max" | "median" | "last";
                            properties: string[];
                            measureTimeBy: string;
                            dataset?: components["schemas"]["def-1"];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "countEntities";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            func: "count" | "average";
                            breakdownProperty?: string;
                            measureTimeBy: string;
                            dataset?: components["schemas"]["def-1"];
                        }) | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "entities-number-chart";
                            title?: string;
                            icon?: string;
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            unit: "none" | "$" | "€" | "£" | "%" | "custom";
                            /** @enum {string} */
                            unitAlignment?: "left" | "right";
                            /** @enum {string} */
                            calculationBy?: "entities" | "property";
                            conditionalFormatting?: {
                                /** @enum {unknown} */
                                operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                value: number;
                                message?: string;
                                description?: string;
                                /** @enum {string} */
                                color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                            }[];
                        } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "iframe-widget";
                            title: string;
                            icon?: string;
                            description?: string;
                            /** Format: url */
                            url: string;
                            /** @enum {string} */
                            urlType: "public" | "protected";
                        } & unknown) | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "markdown";
                            title: string;
                            icon?: string;
                            markdown?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "team-info";
                            title?: string;
                            team_name: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "recently-viewed-entities";
                            title: string;
                            icon?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "recently-used-actions";
                            title: string;
                            icon?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "my-entities";
                            title: string;
                            icon?: string;
                        } | components["schemas"]["def-3"] | components["schemas"]["def-4"] | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "grouper";
                            title?: string;
                            /** @enum {string} */
                            displayMode: "tabs" | "switch";
                            activeGroupUrlParam?: string;
                            groupsOrder?: string[];
                            groups: {
                                title: string;
                                icon?: string;
                                widgets: ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "ai-agent";
                                    title?: string;
                                    description?: string;
                                    agentIdentifier: string;
                                    icon?: string;
                                    useMCP?: boolean;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "entity-info";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    entity: string;
                                    hiddenQuery?: string[];
                                    order?: string[];
                                    showEmptyValues?: boolean;
                                    blueprint: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "entity-details";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    entity: string;
                                    hiddenQuery?: string[];
                                    order?: string[];
                                    showEmptyValues?: boolean;
                                    blueprint: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "action-runs-table-widget";
                                    icon?: string;
                                    description?: string;
                                    title?: string;
                                    /** @enum {string} */
                                    displayMode?: "single" | "widget";
                                    action: string;
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "action-card-widget";
                                    icon?: string;
                                    description?: string;
                                    title?: string;
                                    actions: {
                                        action: string;
                                    }[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "links-widget";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    links: {
                                        title: string;
                                        description?: string;
                                        url: string;
                                        icon?: string;
                                    }[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-entities-explorer";
                                    icon?: string;
                                    description?: string;
                                    emptyStateText?: string;
                                    title?: string;
                                    blueprint?: string;
                                    dataset: components["schemas"]["def-1"];
                                    excludedFields?: string[];
                                    /** @enum {string} */
                                    displayMode?: "tabs" | "single" | "widget";
                                    blueprintConfig?: {
                                        [key: string]: {
                                            filterSettings?: {
                                                filterBy: components["schemas"]["def-1"];
                                            };
                                            groupSettings?: {
                                                groupBy: string[];
                                            };
                                            sortSettings?: {
                                                sortBy?: {
                                                    property: string;
                                                    /** @enum {unknown} */
                                                    order: "asc" | "desc";
                                                }[];
                                            };
                                            propertiesSettings?: {
                                                hidden?: string[];
                                                shown?: string[];
                                                order?: string[];
                                            };
                                            tabIndex?: number;
                                            hidden?: boolean;
                                            title?: string;
                                            description?: string;
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-entities-explorer-by-direction";
                                    title?: string;
                                    blueprintConfig?: {
                                        [key: string]: {
                                            filterSettings?: {
                                                filterBy: components["schemas"]["def-1"];
                                            };
                                            groupSettings?: {
                                                groupBy: string[];
                                            };
                                            sortSettings?: {
                                                sortBy?: {
                                                    property: string;
                                                    /** @enum {unknown} */
                                                    order: "asc" | "desc";
                                                }[];
                                            };
                                            propertiesSettings?: {
                                                hidden?: string[];
                                                shown?: string[];
                                                order?: string[];
                                            };
                                            tabIndex?: number;
                                            hidden?: boolean;
                                            title?: string;
                                            description?: string;
                                            dataset?: components["schemas"]["def-1"];
                                            targetBlueprint?: string;
                                            relatedProperty?: string;
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-audit-log";
                                    title?: string;
                                    description?: string;
                                    query: {
                                        /** @description An identifier of the log event you want to fetch. */
                                        identifier?: string;
                                        /** @description Fetch all audit logs related to the specified entity. */
                                        entity?: string;
                                        /** @description Fetch all audit logs related to the specified blueprint. */
                                        blueprint?: string;
                                        /** @description Fetch all audit logs related to the specified action run. */
                                        run_id?: string;
                                        /** @description Fetch all audit logs related to the specified webhook. */
                                        webhookId?: string;
                                        /** @description Fetch all audit logs related to the specified webhook event. */
                                        webhookEventId?: string;
                                        /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                        origin?: string[];
                                        /** @description Fetch all audit logs related to the specified integration. */
                                        InstallationId?: string;
                                        /** @description Fetch all audit logs related to the specified resource type/s. */
                                        resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                        /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                        includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                        /**
                                         * Format: date-time
                                         * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                         */
                                        from?: string;
                                        /**
                                         * Format: date-time
                                         * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                         */
                                        to?: string;
                                        /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                        action?: string;
                                        /**
                                         * @description Fetch all audit logs with the specified status.
                                         * @enum {string}
                                         */
                                        status?: "SUCCESS" | "FAILURE";
                                        /** @description The maximum number of logs to fetch. */
                                        limit?: number;
                                        /** @enum {string} */
                                        actionType?: "automation" | "self-service";
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "users-table";
                                    title?: string;
                                    query?: {
                                        team?: string;
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "teams-table";
                                    title?: string;
                                    query?: {
                                        user?: string;
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "runs-table";
                                    title?: string;
                                    query?: {
                                        /** @description The identifier of the entity associated with the action run. */
                                        entity?: string;
                                        /** @description The identifier of the blueprint associated with the action run. */
                                        blueprint?: string;
                                        /** @description If `true`, only running action runs will be fetched. */
                                        active?: boolean;
                                        /** @description The email of the user who initiated the action run. */
                                        user_email?: string;
                                        /** @description The id of the user who initiated the action run. */
                                        user_id?: string;
                                        /** @description The maximum number of action runs to fetch. */
                                        limit?: number;
                                        /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                        external_run_id?: string;
                                        /** @enum {string} */
                                        version?: "v1" | "v2";
                                        action?: string;
                                        source?: ("UI" | "API" | "AUTOMATION")[];
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "run-info";
                                    title?: string;
                                    runId: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "user-info";
                                    title?: string;
                                    user_email: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "graph-entities-explorer";
                                    title?: string;
                                    dataset: components["schemas"]["def-1"];
                                    hiddenBlueprints?: string[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "entities-pie-chart";
                                    title?: string;
                                    blueprint?: string;
                                    property: string;
                                    description?: string;
                                    dataset: components["schemas"]["def-1"];
                                    emptyStateText?: string;
                                } | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "propertiesValueHistory";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    entity: string;
                                    properties: string[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "aggregatePropertiesValues";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    func: "sum" | "average" | "min" | "max" | "median" | "last";
                                    properties: string[];
                                    measureTimeBy: string;
                                    dataset?: components["schemas"]["def-1"];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "countEntities";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    func: "count" | "average";
                                    breakdownProperty?: string;
                                    measureTimeBy: string;
                                    dataset?: components["schemas"]["def-1"];
                                }) | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "entities-number-chart";
                                    title?: string;
                                    icon?: string;
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    unit: "none" | "$" | "€" | "£" | "%" | "custom";
                                    /** @enum {string} */
                                    unitAlignment?: "left" | "right";
                                    /** @enum {string} */
                                    calculationBy?: "entities" | "property";
                                    conditionalFormatting?: {
                                        /** @enum {unknown} */
                                        operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                        value: number;
                                        message?: string;
                                        description?: string;
                                        /** @enum {string} */
                                        color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                    }[];
                                } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "iframe-widget";
                                    title: string;
                                    icon?: string;
                                    description?: string;
                                    /** Format: url */
                                    url: string;
                                    /** @enum {string} */
                                    urlType: "public" | "protected";
                                } & unknown) | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "markdown";
                                    title: string;
                                    icon?: string;
                                    markdown?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "team-info";
                                    title?: string;
                                    team_name: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "recently-viewed-entities";
                                    title: string;
                                    icon?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "recently-used-actions";
                                    title: string;
                                    icon?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "my-entities";
                                    title: string;
                                    icon?: string;
                                } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "dashboard-widget";
                            layout: {
                                height: number;
                                columns: {
                                    size: number;
                                    id: string;
                                }[];
                            }[];
                            widgets: ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "ai-agent";
                                title?: string;
                                description?: string;
                                agentIdentifier: string;
                                icon?: string;
                                useMCP?: boolean;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "entity-info";
                                title?: string;
                                description?: string;
                                icon?: string;
                                entity: string;
                                hiddenQuery?: string[];
                                order?: string[];
                                showEmptyValues?: boolean;
                                blueprint: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "entity-details";
                                title?: string;
                                description?: string;
                                icon?: string;
                                entity: string;
                                hiddenQuery?: string[];
                                order?: string[];
                                showEmptyValues?: boolean;
                                blueprint: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "action-runs-table-widget";
                                icon?: string;
                                description?: string;
                                title?: string;
                                /** @enum {string} */
                                displayMode?: "single" | "widget";
                                action: string;
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "action-card-widget";
                                icon?: string;
                                description?: string;
                                title?: string;
                                actions: {
                                    action: string;
                                }[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "links-widget";
                                title?: string;
                                description?: string;
                                icon?: string;
                                links: {
                                    title: string;
                                    description?: string;
                                    url: string;
                                    icon?: string;
                                }[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-entities-explorer";
                                icon?: string;
                                description?: string;
                                emptyStateText?: string;
                                title?: string;
                                blueprint?: string;
                                dataset: components["schemas"]["def-1"];
                                excludedFields?: string[];
                                /** @enum {string} */
                                displayMode?: "tabs" | "single" | "widget";
                                blueprintConfig?: {
                                    [key: string]: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            shown?: string[];
                                            order?: string[];
                                        };
                                        tabIndex?: number;
                                        hidden?: boolean;
                                        title?: string;
                                        description?: string;
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-entities-explorer-by-direction";
                                title?: string;
                                blueprintConfig?: {
                                    [key: string]: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            shown?: string[];
                                            order?: string[];
                                        };
                                        tabIndex?: number;
                                        hidden?: boolean;
                                        title?: string;
                                        description?: string;
                                        dataset?: components["schemas"]["def-1"];
                                        targetBlueprint?: string;
                                        relatedProperty?: string;
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-audit-log";
                                title?: string;
                                description?: string;
                                query: {
                                    /** @description An identifier of the log event you want to fetch. */
                                    identifier?: string;
                                    /** @description Fetch all audit logs related to the specified entity. */
                                    entity?: string;
                                    /** @description Fetch all audit logs related to the specified blueprint. */
                                    blueprint?: string;
                                    /** @description Fetch all audit logs related to the specified action run. */
                                    run_id?: string;
                                    /** @description Fetch all audit logs related to the specified webhook. */
                                    webhookId?: string;
                                    /** @description Fetch all audit logs related to the specified webhook event. */
                                    webhookEventId?: string;
                                    /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                    origin?: string[];
                                    /** @description Fetch all audit logs related to the specified integration. */
                                    InstallationId?: string;
                                    /** @description Fetch all audit logs related to the specified resource type/s. */
                                    resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                    /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                    includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                    /**
                                     * Format: date-time
                                     * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                     */
                                    from?: string;
                                    /**
                                     * Format: date-time
                                     * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                     */
                                    to?: string;
                                    /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                    action?: string;
                                    /**
                                     * @description Fetch all audit logs with the specified status.
                                     * @enum {string}
                                     */
                                    status?: "SUCCESS" | "FAILURE";
                                    /** @description The maximum number of logs to fetch. */
                                    limit?: number;
                                    /** @enum {string} */
                                    actionType?: "automation" | "self-service";
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "users-table";
                                title?: string;
                                query?: {
                                    team?: string;
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "teams-table";
                                title?: string;
                                query?: {
                                    user?: string;
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "runs-table";
                                title?: string;
                                query?: {
                                    /** @description The identifier of the entity associated with the action run. */
                                    entity?: string;
                                    /** @description The identifier of the blueprint associated with the action run. */
                                    blueprint?: string;
                                    /** @description If `true`, only running action runs will be fetched. */
                                    active?: boolean;
                                    /** @description The email of the user who initiated the action run. */
                                    user_email?: string;
                                    /** @description The id of the user who initiated the action run. */
                                    user_id?: string;
                                    /** @description The maximum number of action runs to fetch. */
                                    limit?: number;
                                    /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                    external_run_id?: string;
                                    /** @enum {string} */
                                    version?: "v1" | "v2";
                                    action?: string;
                                    source?: ("UI" | "API" | "AUTOMATION")[];
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "run-info";
                                title?: string;
                                runId: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "user-info";
                                title?: string;
                                user_email: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "graph-entities-explorer";
                                title?: string;
                                dataset: components["schemas"]["def-1"];
                                hiddenBlueprints?: string[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "entities-pie-chart";
                                title?: string;
                                blueprint?: string;
                                property: string;
                                description?: string;
                                dataset: components["schemas"]["def-1"];
                                emptyStateText?: string;
                            } | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "propertiesValueHistory";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                entity: string;
                                properties: string[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "aggregatePropertiesValues";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                func: "sum" | "average" | "min" | "max" | "median" | "last";
                                properties: string[];
                                measureTimeBy: string;
                                dataset?: components["schemas"]["def-1"];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "countEntities";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                func: "count" | "average";
                                breakdownProperty?: string;
                                measureTimeBy: string;
                                dataset?: components["schemas"]["def-1"];
                            }) | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "entities-number-chart";
                                title?: string;
                                icon?: string;
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                unit: "none" | "$" | "€" | "£" | "%" | "custom";
                                /** @enum {string} */
                                unitAlignment?: "left" | "right";
                                /** @enum {string} */
                                calculationBy?: "entities" | "property";
                                conditionalFormatting?: {
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                    value: number;
                                    message?: string;
                                    description?: string;
                                    /** @enum {string} */
                                    color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                }[];
                            } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "iframe-widget";
                                title: string;
                                icon?: string;
                                description?: string;
                                /** Format: url */
                                url: string;
                                /** @enum {string} */
                                urlType: "public" | "protected";
                            } & unknown) | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "markdown";
                                title: string;
                                icon?: string;
                                markdown?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "team-info";
                                title?: string;
                                team_name: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "recently-viewed-entities";
                                title: string;
                                icon?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "recently-used-actions";
                                title: string;
                                icon?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "my-entities";
                                title: string;
                                icon?: string;
                            } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
                        })[];
                        /** @default true */
                        showInSidebar?: boolean;
                        /**
                         * @default software_catalog
                         * @enum {string}
                         */
                        section?: "software_catalog" | "organization";
                        pageFilters?: {
                            /** @example {
                             *       "combinator": "and",
                             *       "rules": [
                             *         {
                             *           "property": "$blueprint",
                             *           "operator": "=",
                             *           "value": "service"
                             *         }
                             *       ]
                             *     } */
                            query: {
                                /**
                                 * @description The combinator to use for the rules.
                                 * @enum {unknown}
                                 */
                                combinator: "and";
                                rules: ({
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    } | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isEmpty" | "isNotEmpty";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=";
                                    value: number | string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "isExpired" | "isNotExpired";
                                    property: string;
                                } | {
                                    property: string | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                                    value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                                        property: string;
                                        /** @enum {string} */
                                        context: "user" | "userTeams";
                                    };
                                } | {
                                    /** @enum {unknown} */
                                    operator: "relatedTo";
                                    blueprint: string;
                                    value: string | string[];
                                    /** @enum {unknown} */
                                    direction?: "upstream" | "downstream";
                                    required?: boolean;
                                } | {
                                    propertySchema: {
                                        type: string;
                                        format?: string;
                                        items?: {
                                            type: string;
                                            format?: string;
                                        };
                                    };
                                    /** @enum {unknown} */
                                    operator: "=" | "!=" | "contains";
                                    value?: null | string | number | boolean;
                                } | {
                                    property: {
                                        path: (string | {
                                            relation?: string;
                                            maxHops?: number;
                                        })[];
                                        fromBlueprint?: string;
                                    };
                                    /** @enum {string} */
                                    operator: "matchAny";
                                    value: string | string[];
                                } | components["schemas"]["def-1"])[];
                            };
                            identifier: string;
                            title: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            identifier: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/pages/{page_identifier}/widgets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a widget
         * @description This route allows you to create a widget in a specific page in your portal. <br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    page_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        widget: {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "ai-agent";
                            title?: string;
                            description?: string;
                            agentIdentifier: string;
                            icon?: string;
                            useMCP?: boolean;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "entity-info";
                            title?: string;
                            description?: string;
                            icon?: string;
                            entity: string;
                            hiddenQuery?: string[];
                            order?: string[];
                            showEmptyValues?: boolean;
                            blueprint: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "entity-details";
                            title?: string;
                            description?: string;
                            icon?: string;
                            entity: string;
                            hiddenQuery?: string[];
                            order?: string[];
                            showEmptyValues?: boolean;
                            blueprint: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "action-runs-table-widget";
                            icon?: string;
                            description?: string;
                            title?: string;
                            /** @enum {string} */
                            displayMode?: "single" | "widget";
                            action: string;
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "action-card-widget";
                            icon?: string;
                            description?: string;
                            title?: string;
                            actions: {
                                action: string;
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "links-widget";
                            title?: string;
                            description?: string;
                            icon?: string;
                            links: {
                                title: string;
                                description?: string;
                                url: string;
                                icon?: string;
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-entities-explorer";
                            icon?: string;
                            description?: string;
                            emptyStateText?: string;
                            title?: string;
                            blueprint?: string;
                            dataset: components["schemas"]["def-1"];
                            excludedFields?: string[];
                            /** @enum {string} */
                            displayMode?: "tabs" | "single" | "widget";
                            blueprintConfig?: {
                                [key: string]: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        shown?: string[];
                                        order?: string[];
                                    };
                                    tabIndex?: number;
                                    hidden?: boolean;
                                    title?: string;
                                    description?: string;
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-entities-explorer-by-direction";
                            title?: string;
                            blueprintConfig?: {
                                [key: string]: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        shown?: string[];
                                        order?: string[];
                                    };
                                    tabIndex?: number;
                                    hidden?: boolean;
                                    title?: string;
                                    description?: string;
                                    dataset?: components["schemas"]["def-1"];
                                    targetBlueprint?: string;
                                    relatedProperty?: string;
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "table-audit-log";
                            title?: string;
                            description?: string;
                            query: {
                                /** @description An identifier of the log event you want to fetch. */
                                identifier?: string;
                                /** @description Fetch all audit logs related to the specified entity. */
                                entity?: string;
                                /** @description Fetch all audit logs related to the specified blueprint. */
                                blueprint?: string;
                                /** @description Fetch all audit logs related to the specified action run. */
                                run_id?: string;
                                /** @description Fetch all audit logs related to the specified webhook. */
                                webhookId?: string;
                                /** @description Fetch all audit logs related to the specified webhook event. */
                                webhookEventId?: string;
                                /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                origin?: string[];
                                /** @description Fetch all audit logs related to the specified integration. */
                                InstallationId?: string;
                                /** @description Fetch all audit logs related to the specified resource type/s. */
                                resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                /**
                                 * Format: date-time
                                 * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                 */
                                from?: string;
                                /**
                                 * Format: date-time
                                 * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                 */
                                to?: string;
                                /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                action?: string;
                                /**
                                 * @description Fetch all audit logs with the specified status.
                                 * @enum {string}
                                 */
                                status?: "SUCCESS" | "FAILURE";
                                /** @description The maximum number of logs to fetch. */
                                limit?: number;
                                /** @enum {string} */
                                actionType?: "automation" | "self-service";
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "users-table";
                            title?: string;
                            query?: {
                                team?: string;
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "teams-table";
                            title?: string;
                            query?: {
                                user?: string;
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "runs-table";
                            title?: string;
                            query?: {
                                /** @description The identifier of the entity associated with the action run. */
                                entity?: string;
                                /** @description The identifier of the blueprint associated with the action run. */
                                blueprint?: string;
                                /** @description If `true`, only running action runs will be fetched. */
                                active?: boolean;
                                /** @description The email of the user who initiated the action run. */
                                user_email?: string;
                                /** @description The id of the user who initiated the action run. */
                                user_id?: string;
                                /** @description The maximum number of action runs to fetch. */
                                limit?: number;
                                /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                external_run_id?: string;
                                /** @enum {string} */
                                version?: "v1" | "v2";
                                action?: string;
                                source?: ("UI" | "API" | "AUTOMATION")[];
                            };
                            tableConfig?: {
                                filterSettings?: {
                                    filterBy: components["schemas"]["def-1"];
                                };
                                groupSettings?: {
                                    groupBy: string[];
                                };
                                sortSettings?: {
                                    sortBy?: {
                                        property: string;
                                        /** @enum {unknown} */
                                        order: "asc" | "desc";
                                    }[];
                                };
                                propertiesSettings?: {
                                    hidden?: string[];
                                    order?: string[];
                                };
                            };
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "run-info";
                            title?: string;
                            runId: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "user-info";
                            title?: string;
                            user_email: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "graph-entities-explorer";
                            title?: string;
                            dataset: components["schemas"]["def-1"];
                            hiddenBlueprints?: string[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "entities-pie-chart";
                            title?: string;
                            blueprint?: string;
                            property: string;
                            description?: string;
                            dataset: components["schemas"]["def-1"];
                            emptyStateText?: string;
                        } | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "propertiesValueHistory";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            entity: string;
                            properties: string[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "aggregatePropertiesValues";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            func: "sum" | "average" | "min" | "max" | "median" | "last";
                            properties: string[];
                            measureTimeBy: string;
                            dataset?: components["schemas"]["def-1"];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            icon?: string;
                            /** @enum {unknown} */
                            type: "line-chart";
                            title?: string;
                            blueprint: string;
                            /** @enum {unknown} */
                            chartType: "countEntities";
                            xAxisTitle?: string;
                            yAxisTitle?: string;
                            /** @enum {string} */
                            timeInterval?: "hour" | "day" | "isoWeek" | "month";
                            timeRange?: {
                                /** @enum {string} */
                                preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                            };
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            func: "count" | "average";
                            breakdownProperty?: string;
                            measureTimeBy: string;
                            dataset?: components["schemas"]["def-1"];
                        }) | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "entities-number-chart";
                            title?: string;
                            icon?: string;
                            description?: string;
                            emptyStateText?: string;
                            /** @enum {string} */
                            unit: "none" | "$" | "€" | "£" | "%" | "custom";
                            /** @enum {string} */
                            unitAlignment?: "left" | "right";
                            /** @enum {string} */
                            calculationBy?: "entities" | "property";
                            conditionalFormatting?: {
                                /** @enum {unknown} */
                                operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                value: number;
                                message?: string;
                                description?: string;
                                /** @enum {string} */
                                color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                            }[];
                        } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "iframe-widget";
                            title: string;
                            icon?: string;
                            description?: string;
                            /** Format: url */
                            url: string;
                            /** @enum {string} */
                            urlType: "public" | "protected";
                        } & unknown) | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "markdown";
                            title: string;
                            icon?: string;
                            markdown?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {unknown} */
                            type: "team-info";
                            title?: string;
                            team_name: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "recently-viewed-entities";
                            title: string;
                            icon?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "recently-used-actions";
                            title: string;
                            icon?: string;
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "my-entities";
                            title: string;
                            icon?: string;
                        } | components["schemas"]["def-3"] | components["schemas"]["def-4"] | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "grouper";
                            title?: string;
                            /** @enum {string} */
                            displayMode: "tabs" | "switch";
                            activeGroupUrlParam?: string;
                            groupsOrder?: string[];
                            groups: {
                                title: string;
                                icon?: string;
                                widgets: ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "ai-agent";
                                    title?: string;
                                    description?: string;
                                    agentIdentifier: string;
                                    icon?: string;
                                    useMCP?: boolean;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "entity-info";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    entity: string;
                                    hiddenQuery?: string[];
                                    order?: string[];
                                    showEmptyValues?: boolean;
                                    blueprint: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "entity-details";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    entity: string;
                                    hiddenQuery?: string[];
                                    order?: string[];
                                    showEmptyValues?: boolean;
                                    blueprint: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "action-runs-table-widget";
                                    icon?: string;
                                    description?: string;
                                    title?: string;
                                    /** @enum {string} */
                                    displayMode?: "single" | "widget";
                                    action: string;
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "action-card-widget";
                                    icon?: string;
                                    description?: string;
                                    title?: string;
                                    actions: {
                                        action: string;
                                    }[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "links-widget";
                                    title?: string;
                                    description?: string;
                                    icon?: string;
                                    links: {
                                        title: string;
                                        description?: string;
                                        url: string;
                                        icon?: string;
                                    }[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-entities-explorer";
                                    icon?: string;
                                    description?: string;
                                    emptyStateText?: string;
                                    title?: string;
                                    blueprint?: string;
                                    dataset: components["schemas"]["def-1"];
                                    excludedFields?: string[];
                                    /** @enum {string} */
                                    displayMode?: "tabs" | "single" | "widget";
                                    blueprintConfig?: {
                                        [key: string]: {
                                            filterSettings?: {
                                                filterBy: components["schemas"]["def-1"];
                                            };
                                            groupSettings?: {
                                                groupBy: string[];
                                            };
                                            sortSettings?: {
                                                sortBy?: {
                                                    property: string;
                                                    /** @enum {unknown} */
                                                    order: "asc" | "desc";
                                                }[];
                                            };
                                            propertiesSettings?: {
                                                hidden?: string[];
                                                shown?: string[];
                                                order?: string[];
                                            };
                                            tabIndex?: number;
                                            hidden?: boolean;
                                            title?: string;
                                            description?: string;
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-entities-explorer-by-direction";
                                    title?: string;
                                    blueprintConfig?: {
                                        [key: string]: {
                                            filterSettings?: {
                                                filterBy: components["schemas"]["def-1"];
                                            };
                                            groupSettings?: {
                                                groupBy: string[];
                                            };
                                            sortSettings?: {
                                                sortBy?: {
                                                    property: string;
                                                    /** @enum {unknown} */
                                                    order: "asc" | "desc";
                                                }[];
                                            };
                                            propertiesSettings?: {
                                                hidden?: string[];
                                                shown?: string[];
                                                order?: string[];
                                            };
                                            tabIndex?: number;
                                            hidden?: boolean;
                                            title?: string;
                                            description?: string;
                                            dataset?: components["schemas"]["def-1"];
                                            targetBlueprint?: string;
                                            relatedProperty?: string;
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "table-audit-log";
                                    title?: string;
                                    description?: string;
                                    query: {
                                        /** @description An identifier of the log event you want to fetch. */
                                        identifier?: string;
                                        /** @description Fetch all audit logs related to the specified entity. */
                                        entity?: string;
                                        /** @description Fetch all audit logs related to the specified blueprint. */
                                        blueprint?: string;
                                        /** @description Fetch all audit logs related to the specified action run. */
                                        run_id?: string;
                                        /** @description Fetch all audit logs related to the specified webhook. */
                                        webhookId?: string;
                                        /** @description Fetch all audit logs related to the specified webhook event. */
                                        webhookEventId?: string;
                                        /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                        origin?: string[];
                                        /** @description Fetch all audit logs related to the specified integration. */
                                        InstallationId?: string;
                                        /** @description Fetch all audit logs related to the specified resource type/s. */
                                        resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                        /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                        includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                        /**
                                         * Format: date-time
                                         * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                         */
                                        from?: string;
                                        /**
                                         * Format: date-time
                                         * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                         */
                                        to?: string;
                                        /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                        action?: string;
                                        /**
                                         * @description Fetch all audit logs with the specified status.
                                         * @enum {string}
                                         */
                                        status?: "SUCCESS" | "FAILURE";
                                        /** @description The maximum number of logs to fetch. */
                                        limit?: number;
                                        /** @enum {string} */
                                        actionType?: "automation" | "self-service";
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "users-table";
                                    title?: string;
                                    query?: {
                                        team?: string;
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "teams-table";
                                    title?: string;
                                    query?: {
                                        user?: string;
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "runs-table";
                                    title?: string;
                                    query?: {
                                        /** @description The identifier of the entity associated with the action run. */
                                        entity?: string;
                                        /** @description The identifier of the blueprint associated with the action run. */
                                        blueprint?: string;
                                        /** @description If `true`, only running action runs will be fetched. */
                                        active?: boolean;
                                        /** @description The email of the user who initiated the action run. */
                                        user_email?: string;
                                        /** @description The id of the user who initiated the action run. */
                                        user_id?: string;
                                        /** @description The maximum number of action runs to fetch. */
                                        limit?: number;
                                        /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                        external_run_id?: string;
                                        /** @enum {string} */
                                        version?: "v1" | "v2";
                                        action?: string;
                                        source?: ("UI" | "API" | "AUTOMATION")[];
                                    };
                                    tableConfig?: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            order?: string[];
                                        };
                                    };
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "run-info";
                                    title?: string;
                                    runId: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "user-info";
                                    title?: string;
                                    user_email: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "graph-entities-explorer";
                                    title?: string;
                                    dataset: components["schemas"]["def-1"];
                                    hiddenBlueprints?: string[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "entities-pie-chart";
                                    title?: string;
                                    blueprint?: string;
                                    property: string;
                                    description?: string;
                                    dataset: components["schemas"]["def-1"];
                                    emptyStateText?: string;
                                } | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "propertiesValueHistory";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    entity: string;
                                    properties: string[];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "aggregatePropertiesValues";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    func: "sum" | "average" | "min" | "max" | "median" | "last";
                                    properties: string[];
                                    measureTimeBy: string;
                                    dataset?: components["schemas"]["def-1"];
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    icon?: string;
                                    /** @enum {unknown} */
                                    type: "line-chart";
                                    title?: string;
                                    blueprint: string;
                                    /** @enum {unknown} */
                                    chartType: "countEntities";
                                    xAxisTitle?: string;
                                    yAxisTitle?: string;
                                    /** @enum {string} */
                                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                    timeRange?: {
                                        /** @enum {string} */
                                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    func: "count" | "average";
                                    breakdownProperty?: string;
                                    measureTimeBy: string;
                                    dataset?: components["schemas"]["def-1"];
                                }) | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "entities-number-chart";
                                    title?: string;
                                    icon?: string;
                                    description?: string;
                                    emptyStateText?: string;
                                    /** @enum {string} */
                                    unit: "none" | "$" | "€" | "£" | "%" | "custom";
                                    /** @enum {string} */
                                    unitAlignment?: "left" | "right";
                                    /** @enum {string} */
                                    calculationBy?: "entities" | "property";
                                    conditionalFormatting?: {
                                        /** @enum {unknown} */
                                        operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                        value: number;
                                        message?: string;
                                        description?: string;
                                        /** @enum {string} */
                                        color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                    }[];
                                } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "iframe-widget";
                                    title: string;
                                    icon?: string;
                                    description?: string;
                                    /** Format: url */
                                    url: string;
                                    /** @enum {string} */
                                    urlType: "public" | "protected";
                                } & unknown) | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "markdown";
                                    title: string;
                                    icon?: string;
                                    markdown?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {unknown} */
                                    type: "team-info";
                                    title?: string;
                                    team_name: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "recently-viewed-entities";
                                    title: string;
                                    icon?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "recently-used-actions";
                                    title: string;
                                    icon?: string;
                                } | {
                                    id?: string;
                                    updatedAt?: string;
                                    updatedBy?: string;
                                    createdAt?: string;
                                    createdBy?: string;
                                    /** @enum {string} */
                                    type: "my-entities";
                                    title: string;
                                    icon?: string;
                                } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
                            }[];
                        } | {
                            id?: string;
                            updatedAt?: string;
                            updatedBy?: string;
                            createdAt?: string;
                            createdBy?: string;
                            /** @enum {string} */
                            type: "dashboard-widget";
                            layout: {
                                height: number;
                                columns: {
                                    size: number;
                                    id: string;
                                }[];
                            }[];
                            widgets: ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "ai-agent";
                                title?: string;
                                description?: string;
                                agentIdentifier: string;
                                icon?: string;
                                useMCP?: boolean;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "entity-info";
                                title?: string;
                                description?: string;
                                icon?: string;
                                entity: string;
                                hiddenQuery?: string[];
                                order?: string[];
                                showEmptyValues?: boolean;
                                blueprint: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "entity-details";
                                title?: string;
                                description?: string;
                                icon?: string;
                                entity: string;
                                hiddenQuery?: string[];
                                order?: string[];
                                showEmptyValues?: boolean;
                                blueprint: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "action-runs-table-widget";
                                icon?: string;
                                description?: string;
                                title?: string;
                                /** @enum {string} */
                                displayMode?: "single" | "widget";
                                action: string;
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "action-card-widget";
                                icon?: string;
                                description?: string;
                                title?: string;
                                actions: {
                                    action: string;
                                }[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "links-widget";
                                title?: string;
                                description?: string;
                                icon?: string;
                                links: {
                                    title: string;
                                    description?: string;
                                    url: string;
                                    icon?: string;
                                }[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-entities-explorer";
                                icon?: string;
                                description?: string;
                                emptyStateText?: string;
                                title?: string;
                                blueprint?: string;
                                dataset: components["schemas"]["def-1"];
                                excludedFields?: string[];
                                /** @enum {string} */
                                displayMode?: "tabs" | "single" | "widget";
                                blueprintConfig?: {
                                    [key: string]: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            shown?: string[];
                                            order?: string[];
                                        };
                                        tabIndex?: number;
                                        hidden?: boolean;
                                        title?: string;
                                        description?: string;
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-entities-explorer-by-direction";
                                title?: string;
                                blueprintConfig?: {
                                    [key: string]: {
                                        filterSettings?: {
                                            filterBy: components["schemas"]["def-1"];
                                        };
                                        groupSettings?: {
                                            groupBy: string[];
                                        };
                                        sortSettings?: {
                                            sortBy?: {
                                                property: string;
                                                /** @enum {unknown} */
                                                order: "asc" | "desc";
                                            }[];
                                        };
                                        propertiesSettings?: {
                                            hidden?: string[];
                                            shown?: string[];
                                            order?: string[];
                                        };
                                        tabIndex?: number;
                                        hidden?: boolean;
                                        title?: string;
                                        description?: string;
                                        dataset?: components["schemas"]["def-1"];
                                        targetBlueprint?: string;
                                        relatedProperty?: string;
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "table-audit-log";
                                title?: string;
                                description?: string;
                                query: {
                                    /** @description An identifier of the log event you want to fetch. */
                                    identifier?: string;
                                    /** @description Fetch all audit logs related to the specified entity. */
                                    entity?: string;
                                    /** @description Fetch all audit logs related to the specified blueprint. */
                                    blueprint?: string;
                                    /** @description Fetch all audit logs related to the specified action run. */
                                    run_id?: string;
                                    /** @description Fetch all audit logs related to the specified webhook. */
                                    webhookId?: string;
                                    /** @description Fetch all audit logs related to the specified webhook event. */
                                    webhookEventId?: string;
                                    /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                                    origin?: string[];
                                    /** @description Fetch all audit logs related to the specified integration. */
                                    InstallationId?: string;
                                    /** @description Fetch all audit logs related to the specified resource type/s. */
                                    resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                                    /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                                    includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                                    /**
                                     * Format: date-time
                                     * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                     */
                                    from?: string;
                                    /**
                                     * Format: date-time
                                     * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                                     */
                                    to?: string;
                                    /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                                    action?: string;
                                    /**
                                     * @description Fetch all audit logs with the specified status.
                                     * @enum {string}
                                     */
                                    status?: "SUCCESS" | "FAILURE";
                                    /** @description The maximum number of logs to fetch. */
                                    limit?: number;
                                    /** @enum {string} */
                                    actionType?: "automation" | "self-service";
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "users-table";
                                title?: string;
                                query?: {
                                    team?: string;
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "teams-table";
                                title?: string;
                                query?: {
                                    user?: string;
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "runs-table";
                                title?: string;
                                query?: {
                                    /** @description The identifier of the entity associated with the action run. */
                                    entity?: string;
                                    /** @description The identifier of the blueprint associated with the action run. */
                                    blueprint?: string;
                                    /** @description If `true`, only running action runs will be fetched. */
                                    active?: boolean;
                                    /** @description The email of the user who initiated the action run. */
                                    user_email?: string;
                                    /** @description The id of the user who initiated the action run. */
                                    user_id?: string;
                                    /** @description The maximum number of action runs to fetch. */
                                    limit?: number;
                                    /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                                    external_run_id?: string;
                                    /** @enum {string} */
                                    version?: "v1" | "v2";
                                    action?: string;
                                    source?: ("UI" | "API" | "AUTOMATION")[];
                                };
                                tableConfig?: {
                                    filterSettings?: {
                                        filterBy: components["schemas"]["def-1"];
                                    };
                                    groupSettings?: {
                                        groupBy: string[];
                                    };
                                    sortSettings?: {
                                        sortBy?: {
                                            property: string;
                                            /** @enum {unknown} */
                                            order: "asc" | "desc";
                                        }[];
                                    };
                                    propertiesSettings?: {
                                        hidden?: string[];
                                        order?: string[];
                                    };
                                };
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "run-info";
                                title?: string;
                                runId: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "user-info";
                                title?: string;
                                user_email: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "graph-entities-explorer";
                                title?: string;
                                dataset: components["schemas"]["def-1"];
                                hiddenBlueprints?: string[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "entities-pie-chart";
                                title?: string;
                                blueprint?: string;
                                property: string;
                                description?: string;
                                dataset: components["schemas"]["def-1"];
                                emptyStateText?: string;
                            } | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "propertiesValueHistory";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                entity: string;
                                properties: string[];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "aggregatePropertiesValues";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                func: "sum" | "average" | "min" | "max" | "median" | "last";
                                properties: string[];
                                measureTimeBy: string;
                                dataset?: components["schemas"]["def-1"];
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                icon?: string;
                                /** @enum {unknown} */
                                type: "line-chart";
                                title?: string;
                                blueprint: string;
                                /** @enum {unknown} */
                                chartType: "countEntities";
                                xAxisTitle?: string;
                                yAxisTitle?: string;
                                /** @enum {string} */
                                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                                timeRange?: {
                                    /** @enum {string} */
                                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                func: "count" | "average";
                                breakdownProperty?: string;
                                measureTimeBy: string;
                                dataset?: components["schemas"]["def-1"];
                            }) | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "entities-number-chart";
                                title?: string;
                                icon?: string;
                                description?: string;
                                emptyStateText?: string;
                                /** @enum {string} */
                                unit: "none" | "$" | "€" | "£" | "%" | "custom";
                                /** @enum {string} */
                                unitAlignment?: "left" | "right";
                                /** @enum {string} */
                                calculationBy?: "entities" | "property";
                                conditionalFormatting?: {
                                    /** @enum {unknown} */
                                    operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                                    value: number;
                                    message?: string;
                                    description?: string;
                                    /** @enum {string} */
                                    color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                                }[];
                            } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "iframe-widget";
                                title: string;
                                icon?: string;
                                description?: string;
                                /** Format: url */
                                url: string;
                                /** @enum {string} */
                                urlType: "public" | "protected";
                            } & unknown) | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "markdown";
                                title: string;
                                icon?: string;
                                markdown?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {unknown} */
                                type: "team-info";
                                title?: string;
                                team_name: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "recently-viewed-entities";
                                title: string;
                                icon?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "recently-used-actions";
                                title: string;
                                icon?: string;
                            } | {
                                id?: string;
                                updatedAt?: string;
                                updatedBy?: string;
                                createdAt?: string;
                                createdBy?: string;
                                /** @enum {string} */
                                type: "my-entities";
                                title: string;
                                icon?: string;
                            } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
                        };
                        parentWidgetId: string;
                    };
                };
            };
            responses: {
                /** @description Created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pages/{page_identifier}/widgets/{widget_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a widget
         * @description This route allows you to delete a specific widget in your portal. <br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    page_identifier: string;
                    widget_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a widget
         * @description This route allows you to update a specific widget in your portal. <br/><br/>To learn more about pages, checkout the [documentation](https://docs.port.io/customize-pages-dashboards-and-plugins/page/catalog-page).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    page_identifier: string;
                    widget_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            identifier: string;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization details
         * @description This route allows you to fetch the details of your Port organization, such as its name, id, and hidden blueprints.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change organization details
         * @description This route allows you to change the details of your Port organization, such as its name and hidden blueprints.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the organization. */
                        name: string;
                        settings?: {
                            /** @description An array of blueprint identifiers that should be hidden. */
                            hiddenBlueprints?: string[];
                            federatedLogout?: boolean;
                            portalIcon?: string;
                            portalTitle?: string;
                        };
                        announcement?: {
                            enabled?: boolean;
                            content: string;
                            link?: string | null;
                            /** @enum {string} */
                            color?: "blue" | "red";
                        };
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update organization details
         * @description This route allows you to update the details of your Port organization, such as its name and hidden blueprints.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the organization. */
                        name: string;
                        settings?: {
                            /** @description An array of blueprint identifiers that should be hidden. */
                            hiddenBlueprints?: string[];
                            federatedLogout?: boolean;
                            portalIcon?: string;
                            portalTitle?: string;
                            /**
                             * @description Permission level for Port support users accessing this organization
                             * @enum {string}
                             */
                            supportUserPermission?: "OPT_OUT" | "READ_ONLY" | "FULL_PERMISSIONS";
                        };
                        isOnboarded?: boolean;
                        toolSelectionProvisioning?: {
                            /** @enum {string} */
                            status: "IN_PROGRESS" | "DONE";
                        };
                        announcement?: {
                            enabled?: boolean;
                            content?: string;
                            link?: string | null;
                            /** @enum {string} */
                            color?: "blue" | "red";
                        };
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/organization/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all organization secrets
         * @description This route allows you to retrieve all of the secrets in your organization.<br/><br/>To learn more about secrets management in Port, check out the [documentation](https://docs.port.io/sso-rbac/port-secrets).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create an organization secret
         * @description This route allows you to create an organization secret.<br/><br/>To learn more about secrets management in Port, check out the [documentation](https://docs.port.io/sso-rbac/port-secrets).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the new secret. */
                        secretName: string;
                        /** @description The value of the new secret. */
                        secretValue: string;
                        /** @description An optional description of the new secret. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organization/secrets/{secret_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an organization secret
         * @description This route allows you to retrieve a specific secret in your organization.<br/><br/>To learn more about secrets management in Port, check out the [documentation](https://docs.port.io/sso-rbac/port-secrets).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete an organization secret
         * @description This route allows you to delete an organization secret.<br/><br/>To learn more about secrets management in Port, check out the [documentation](https://docs.port.io/sso-rbac/port-secrets).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the secret you want to operate on. */
                    secret_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update an organization secret
         * @description This route allows you to update an organization secret.<br/><br/>To learn more about secrets management, check out the [documentation](https://docs.port.io/sso-rbac/port-secrets).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the secret you want to operate on. */
                    secret_name: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The new value of the secret. */
                        secretValue?: string;
                        /** @description The new description of the secret. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/integration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all integrations
         * @description This route allows you to fetch all integrations in your Port organization.<br/><br/>To learn more about integrations, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integration/{identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an integration
         * @description This route allows you to fetch a specific integration in your Port organization.<br/><br/>To learn more about integrations, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The field used to identify the integration. When set to `logIngestId`, the `identifier` parameter should be changed accordingly. */
                    byField?: "installationId" | "logIngestId";
                };
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete an integration
         * @description This route allows you to delete an integration in your Port organization.<br/><br/>To learn more about integrations, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update an integration
         * @description This route allows you to modify an integration in your Port organization.<br/><br/>To learn more about integrations, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/).<br/><br/>**Note:** To trigger a resync of an integration without changing its mapping, simply provide its identifier and leave the body empty.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The title of the integration. This will be displayed in the [data-sources page](https://app.getport.io/settings/data-sources) of your Port account. */
                        title?: string | null;
                        /** @description The name of the integrated tool/platform (e.g. `kubernetes`,`pagerduty`). */
                        installationAppType?: string;
                        /** @description The version of the integration. */
                        version?: string;
                        spec?: {
                            [key: string]: unknown;
                        };
                        /** @description Various configuration options for the integration. */
                        config?: ({
                            /** @description If `true`, deleting an entity will also delete its dependent entities. */
                            deleteDependentEntities?: boolean;
                            /** @description If `true`, creating an entity with a relation to a non-existing entity will also create the related entity. */
                            createMissingRelatedEntities?: boolean;
                            /** @description The mapping definition of resources from the integrated tool/platform into Port. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping). */
                            resources?: {
                                /** @description The kind of resource to map, as defined in API of the integrated tool/platorm. */
                                kind: string;
                                selector: {
                                    /** @description A `jq` query used to specify which resources to fetch from the integrated tool/platform. If set to `"true"`, all resources of the specified `kind` will be ingested. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#how-does-mapping-work). */
                                    query?: string;
                                };
                                /** @description An object containing the mapping definitions of the `kind` resource into Port. */
                                port: {
                                    entity: {
                                        /** @description The mapping definitions used to map the resource fields into Port entities. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                        mappings: {
                                            identifier: string | {
                                                combinator: string;
                                                rules: {
                                                    [key: string]: unknown;
                                                }[];
                                            };
                                            /** @description A `jq` expression used to get data from the integrated tool's API, to be used as the title of the entity. */
                                            title?: string;
                                            /** @description The identifier of the blueprint to map the data into. */
                                            blueprint: string;
                                            /** @description An object containing the properties of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            properties?: {
                                                [key: string]: unknown;
                                            };
                                            /** @description An object containing the relations of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            relations?: {
                                                [key: string]: unknown;
                                            };
                                        }[] | {
                                            identifier: string | {
                                                combinator: string;
                                                rules: {
                                                    [key: string]: unknown;
                                                }[];
                                            };
                                            /** @description A `jq` expression used to get data from the integrated tool's API, to be used as the title of the entity. */
                                            title?: string;
                                            /** @description The identifier of the blueprint to map the data into. */
                                            blueprint: string;
                                            /** @description An object containing the properties of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            properties?: {
                                                [key: string]: unknown;
                                            };
                                            /** @description An object containing the relations of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            relations?: {
                                                [key: string]: unknown;
                                            };
                                        };
                                    };
                                };
                            }[];
                        } & {
                            [key: string]: unknown;
                        }) | null;
                        /** @description The destination of the integration's changelog. */
                        changelogDestination?: {
                            /** @enum {string} */
                            type?: "WEBHOOK" | "KAFKA";
                        } & (Record<string, never> | {
                            /** @enum {string} */
                            type: "KAFKA";
                        } | {
                            /** @enum {string} */
                            type: "WEBHOOK";
                            /** @description If `true`, Port's execution agent will be used to send the changelog. */
                            agent?: boolean;
                            /**
                             * Format: uri
                             * @description The URL of the webhook.
                             */
                            url: string;
                        });
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/integration/{identifier}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an integration's audit logs
         * @description This route allows you to fetch the audit logs of a specific integration in your Port organization.<br/><br/>To learn more about integrations, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The number of logs to fetch per page. */
                    limit?: number;
                    /** @description The date of time from which to fetch the logs, in `ISO format IE 2022-04-23T18:25:43.511Z`. */
                    timestamp?: string;
                    /** @description The identifier of the log. */
                    log_id?: string;
                    /** @description Determines whether to fetch logs before or after the specified timestamp. */
                    direction?: "up" | "down";
                };
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/integration/{identifier}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an integration's config
         * @description This route allows you to modify an integration's configuration in your Port organization.<br/><br/>To learn more about integrations, check out the [documentation](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Various configuration options for the integration. */
                        config: ({
                            /** @description If `true`, deleting an entity will also delete its dependent entities. */
                            deleteDependentEntities?: boolean;
                            /** @description If `true`, creating an entity with a relation to a non-existing entity will also create the related entity. */
                            createMissingRelatedEntities?: boolean;
                            /** @description The mapping definition of resources from the integrated tool/platform into Port. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping). */
                            resources?: {
                                /** @description The kind of resource to map, as defined in API of the integrated tool/platorm. */
                                kind: string;
                                selector: {
                                    /** @description A `jq` query used to specify which resources to fetch from the integrated tool/platform. If set to `"true"`, all resources of the specified `kind` will be ingested. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#how-does-mapping-work). */
                                    query?: string;
                                };
                                /** @description An object containing the mapping definitions of the `kind` resource into Port. */
                                port: {
                                    entity: {
                                        /** @description The mapping definitions used to map the resource fields into Port entities. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                        mappings: {
                                            identifier: string | {
                                                combinator: string;
                                                rules: {
                                                    [key: string]: unknown;
                                                }[];
                                            };
                                            /** @description A `jq` expression used to get data from the integrated tool's API, to be used as the title of the entity. */
                                            title?: string;
                                            /** @description The identifier of the blueprint to map the data into. */
                                            blueprint: string;
                                            /** @description An object containing the properties of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            properties?: {
                                                [key: string]: unknown;
                                            };
                                            /** @description An object containing the relations of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            relations?: {
                                                [key: string]: unknown;
                                            };
                                        }[] | {
                                            identifier: string | {
                                                combinator: string;
                                                rules: {
                                                    [key: string]: unknown;
                                                }[];
                                            };
                                            /** @description A `jq` expression used to get data from the integrated tool's API, to be used as the title of the entity. */
                                            title?: string;
                                            /** @description The identifier of the blueprint to map the data into. */
                                            blueprint: string;
                                            /** @description An object containing the properties of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            properties?: {
                                                [key: string]: unknown;
                                            };
                                            /** @description An object containing the relations of the entity and their values. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#configuration-structure). */
                                            relations?: {
                                                [key: string]: unknown;
                                            };
                                        };
                                    };
                                };
                            }[];
                        } & {
                            [key: string]: unknown;
                        }) | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all webhooks
         * @description This route allows you to fetch all webhooks configured in your Port organization. You can also see them in the [data sources page](https://app.getport.io/settings/data-sources) of your Port account.<br/><br/>To learn more about webhooks, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a webhook
         * @description This route allows you to create a webhook in your Port organization. You can also create it via the [data sources page](https://app.getport.io/settings/data-sources) of your Port account.<br/><br/>To learn more about webhooks, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the webhook. */
                        identifier?: string;
                        /** @description The title of the webhook, which will be displayed in the [data sources page](https://app.getport.io/settings/data-sources) of your Port account. */
                        title: string;
                        /** @description A description for the webhook. */
                        description?: string;
                        /** @description The icon of the webhook. */
                        icon?: string;
                        /** @description The mapping definitions used to map the data from the webhook into Port entities. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/). */
                        mappings?: {
                            /** @description If the selected operation is `delete`, a blueprint identifier, and entity identifier must be provided. If the operation is `create`, the [entity JSON](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#json-structure) properties must be provided. */
                            operation?: "create" | {
                                /** @enum {unknown} */
                                type: "create";
                            } | "delete" | {
                                /** @enum {unknown} */
                                type: "delete";
                                deleteDependents?: boolean;
                            };
                        }[];
                        /**
                         * @description Determines whether the webhook is active or not. If `false`, any incoming events will be dropped.
                         * @default true
                         */
                        enabled: boolean;
                        /** @description The security configuration of the webhook, used to tell Port how to verify the hashed signature sent with incoming requests.<br/>For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/#security-configuration). */
                        security?: {
                            secret?: string | null;
                            signatureHeaderName?: string | null;
                            signatureAlgorithm?: ("sha1" | "sha256" | "plain") | null;
                            signaturePrefix?: string | null;
                            requestIdentifierPath?: string | null;
                        };
                        /** @enum {string} */
                        integrationType?: "custom" | "template";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks/{identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a webhook
         * @description This route allows you to fetch a specific webhook in your Port organization. You can also see it in the [data sources page](https://app.getport.io/settings/data-sources) of your Port account.<br/><br/>To learn more about webhooks, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change a webhook
         * @description This route allows you to modify a webhook in your Port organization. You can also modify it via the [data sources page](https://app.getport.io/settings/data-sources) of your Port account.<br/><br/>To learn more about webhooks, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the webhook. */
                        identifier?: string;
                        /** @description The title of the webhook, which will be displayed in the [data sources page](https://app.getport.io/settings/data-sources) of your Port account. */
                        title: string;
                        /** @description A description for the webhook. */
                        description?: string;
                        /** @description The icon of the webhook. */
                        icon?: string;
                        /** @description The mapping definitions used to map the data from the webhook into Port entities. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/). */
                        mappings?: {
                            /** @description If the selected operation is `delete`, a blueprint identifier, and entity identifier must be provided. If the operation is `create`, the [entity JSON](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#json-structure) properties must be provided. */
                            operation?: "create" | {
                                /** @enum {unknown} */
                                type: "create";
                            } | "delete" | {
                                /** @enum {unknown} */
                                type: "delete";
                                deleteDependents?: boolean;
                            };
                        }[];
                        /**
                         * @description Determines whether the webhook is active or not. If `false`, any incoming events will be dropped.
                         * @default true
                         */
                        enabled: boolean;
                        /** @description The security configuration of the webhook, used to tell Port how to verify the hashed signature sent with incoming requests.<br/>For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/#security-configuration). */
                        security?: {
                            secret?: string | null;
                            signatureHeaderName?: string | null;
                            signatureAlgorithm?: ("sha1" | "sha256" | "plain") | null;
                            signaturePrefix?: string | null;
                            requestIdentifierPath?: string | null;
                        };
                        /** @enum {string} */
                        integrationType?: "custom" | "template";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a webhook
         * @description This route allows you to delete a webhook in your Port organization. You can also delete it via the [data sources page](https://app.getport.io/settings/data-sources) of your Port account.<br/><br/>To learn more about webhooks, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a webhook
         * @description This route allows you to modify a webhook in your Port organization. You can also modify it via the [data sources page](https://app.getport.io/settings/data-sources) of your Port account.<br/><br/>To learn more about webhooks, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique identifier of the resource you want to operate on. */
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The identifier of the webhook. */
                        identifier?: string;
                        /** @description The title of the webhook, which will be displayed in the [data sources page](https://app.getport.io/settings/data-sources) of your Port account. */
                        title?: string;
                        /** @description A description for the webhook. */
                        description?: string;
                        /** @description The icon of the webhook. */
                        icon?: string;
                        /** @description The mapping definitions used to map the data from the webhook into Port entities. For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/). */
                        mappings?: {
                            /** @description If the selected operation is `delete`, a blueprint identifier, and entity identifier must be provided. If the operation is `create`, the [entity JSON](https://docs.port.io/build-your-software-catalog/sync-data-to-catalog/#json-structure) properties must be provided. */
                            operation?: "create" | {
                                /** @enum {unknown} */
                                type: "create";
                            } | "delete" | {
                                /** @enum {unknown} */
                                type: "delete";
                                deleteDependents?: boolean;
                            };
                        }[];
                        /**
                         * @description Determines whether the webhook is active or not. If `false`, any incoming events will be dropped.
                         * @default true
                         */
                        enabled?: boolean;
                        /** @description The security configuration of the webhook, used to tell Port how to verify the hashed signature sent with incoming requests.<br/>For more information and examples, check out the [documentation](https://docs.port.io/build-your-software-catalog/custom-integration/webhook/#security-configuration). */
                        security?: {
                            secret?: string | null;
                            signatureHeaderName?: string | null;
                            signatureAlgorithm?: ("sha1" | "sha256" | "plain") | null;
                            signaturePrefix?: string | null;
                            requestIdentifierPath?: string | null;
                        };
                        /** @enum {string} */
                        integrationType?: "custom" | "template";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/audit-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get audit logs
         * @description This route allows you to fetch audit logs from your Port account. Your audit logs can also be viewed via [Port's UI](https://app.getport.io/settings/AuditLog).<br/><br/>This route will perform a logical `AND` between all query parameters below, and return all logs that match the criteria.
         */
        get: {
            parameters: {
                query?: {
                    /** @description An identifier of the log event you want to fetch. */
                    identifier?: string;
                    /** @description Fetch all audit logs related to the specified entity. */
                    entity?: string;
                    /** @description Fetch all audit logs related to the specified blueprint. */
                    blueprint?: string;
                    /** @description Fetch all audit logs related to the specified action run. */
                    run_id?: string;
                    /** @description Fetch all audit logs related to the specified webhook. */
                    webhookId?: string;
                    /** @description Fetch all audit logs related to the specified webhook event. */
                    webhookEventId?: string;
                    /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                    origin?: string[];
                    /** @description Fetch all audit logs related to the specified integration. */
                    InstallationId?: string;
                    /** @description Fetch all audit logs related to the specified resource type/s. */
                    resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                    /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                    includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                    /** @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`. */
                    from?: string;
                    /** @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`. */
                    to?: string;
                    /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                    action?: string;
                    /** @description Fetch all audit logs with the specified status. */
                    status?: "SUCCESS" | "FAILURE";
                    /** @description The maximum number of logs to fetch. */
                    limit?: number;
                    actionType?: "automation" | "self-service";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all teams in your organization
         * @description This route allows you to fetch all of the teams in your Port organization.<br/><br/>To learn more about teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The fields you want to fetch for each team. If used, only the specified fields will be included in the response. */
                    fields?: ("id" | "name" | "createdAt" | "updatedAt" | "provider" | "description" | "users.firstName" | "users.lastName" | "users.email" | "users.picture" | "users.status")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            teams: {
                                id?: string;
                                name?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                provider?: string;
                                description?: string;
                                users?: {
                                    email?: string;
                                    firstName?: string;
                                    lastName?: string;
                                    picture?: string;
                                    status?: string;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a team
         * @description This route allows you to create a new team in your Port organization.<br/><br/>To learn more about teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the new team. */
                        name: string;
                        /** @description One or more e-mail addresses of users to add to the new team. */
                        users?: string[];
                        /** @description The description of the new team. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            team: {
                                id?: string;
                                name?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                provider?: string;
                                description?: string;
                                users?: {
                                    email?: string;
                                    firstName?: string;
                                    lastName?: string;
                                    picture?: string;
                                    status?: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a team
         * @description This route allows you to fetch a specific team in your Port organization.<br/><br/>To learn more about teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The fields you want to fetch for the team. If used, only the specified fields will be included in the response. */
                    fields?: ("id" | "name" | "createdAt" | "updatedAt" | "provider" | "description" | "users.firstName" | "users.lastName" | "users.email" | "users.picture" | "users.status")[];
                };
                header?: never;
                path: {
                    /** @description The name of the team you want to fetch. */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            team: {
                                id?: string;
                                name?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                provider?: string;
                                description?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change a team
         * @description This route allows you to change a team's details. This can be used to update the team's name, users, and description.<br/><br/>To learn more about teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the team you want to change. */
                    name: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The new name of the team. */
                        name: string;
                        /** @description One or more e-mail addresses of users to add to the new team. This will override the existing user list. */
                        users?: string[];
                        /** @description The new description of the team. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            team: {
                                id?: string;
                                name?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                provider?: string;
                                description?: string;
                                users?: {
                                    email?: string;
                                    firstName?: string;
                                    lastName?: string;
                                    picture?: string;
                                    status?: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a team
         * @description This route allows you to delete a team in your Port organization.<br/><br/>To learn more about teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the team you want to delete. */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a team
         * @description This route allows you to update a team's details. This can be used to update the team's name, users, and description.<br/><br/>To learn more about teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The name of the team you want to update. */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The new name of the team. */
                        name?: string;
                        /** @description One or more e-mail addresses of users to add to the new team. This will override the existing user list. */
                        users?: string[];
                        /** @description The new description of the team. */
                        description?: string | null;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            team: {
                                id?: string;
                                name?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                provider?: string;
                                description?: string;
                                users?: {
                                    email?: string;
                                    firstName?: string;
                                    lastName?: string;
                                    picture?: string;
                                    status?: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users in your organization
         * @description This route allows you to fetch all of the users in your Port organization.<br/><br/>To learn more about users, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        get: {
            parameters: {
                query?: {
                    /** @description The fields you want to fetch for each user. If used, only the specified fields will be included in the response. */
                    fields?: ("id" | "email" | "firstName" | "lastName" | "picture" | "status" | "type" | "providers" | "createdAt" | "updatedAt" | "teams.name" | "teams.provider" | "teams.createdAt" | "teams.updatedAt" | "roles.name" | "roles.description" | "roles.isAdmin" | "roles.protected" | "roles.createdAt" | "roles.updatedAt" | "orgMembers.orgId" | "orgMembers.status" | "orgMembers.lastLoginAt")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            users: {
                                email?: string;
                                firstName?: string;
                                lastName?: string;
                                picture?: string;
                                status?: string;
                                id?: string;
                                type?: string;
                                providers?: string[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                orgs?: {
                                    id: string;
                                }[];
                                teams?: string[];
                                roles?: {
                                    name: string;
                                }[];
                                orgMembers?: {
                                    orgId: string;
                                    status: string;
                                    /** Format: date-time */
                                    lastLoginAt: string;
                                }[];
                                /** @default null */
                                termsAccepted: boolean;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invite a user to your organization
         * @description This route allows you to invite a user to your Port organization.<br/><br/>To learn more about users, roles, and teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        post: {
            parameters: {
                query?: {
                    /** @description If `true`, the invitee will receive an email notification. */
                    notify?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The details of the user you want to invite. */
                        invitee: {
                            /** @description The user's email address. */
                            email: string;
                            /** @description The roles you want to assign to the user. */
                            roles?: string[];
                            /** @description The names of the teams you want to assign the user to. */
                            teams?: string[];
                        };
                    };
                };
            };
            responses: {
                /** @description Created successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user
         * @description This route allows you to fetch a specific user in your Port organization.<br/><br/>To learn more about users, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The email address of the user you want to operate on. */
                    user_email: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            user?: {
                                email?: string;
                                firstName?: string;
                                lastName?: string;
                                picture?: string;
                                status?: string;
                                id?: string;
                                type?: string;
                                providers?: string[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                orgs?: {
                                    id: string;
                                }[];
                                teams?: string[];
                                roles?: {
                                    name: string;
                                }[];
                                orgMembers?: {
                                    orgId: string;
                                    status: string;
                                    /** Format: date-time */
                                    lastLoginAt: string;
                                }[];
                                /** @default null */
                                termsAccepted: boolean;
                                teamsIdentifiers?: string[];
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description This route allows you to delete a user in your Port organization.<br/><br/>To learn more about users, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The email address of the user you want to operate on. */
                    user_email: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a user
         * @description This route allows you to update a user's details. This can be used to update the user's role/s and team/s.<br/><br/>To learn more about users, roles, and teams, check out the [documentation](https://docs.port.io/sso-rbac/rbac-overview/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The email address of the user you want to operate on. */
                    user_email: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The roles you want to assign to the user. */
                        roles?: string[];
                        /** @description The names of the teams you want to assign the user to. */
                        teams?: string[];
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            email?: string;
                            firstName?: string;
                            lastName?: string;
                            picture?: string;
                            status?: string;
                            id?: string;
                            type?: string;
                            providers?: string[];
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            orgs?: {
                                id: string;
                            }[];
                            teams?: string[];
                            roles?: {
                                name: string;
                            }[];
                            orgMembers?: {
                                orgId: string;
                                status: string;
                                /** Format: date-time */
                                lastLoginAt: string;
                            }[];
                            /** @default null */
                            termsAccepted: boolean;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all credentials
         * @description This route allows you to fetch all credentials in your Port organization.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The fields to include in the response. If not specified, all fields will be included. */
                    fields?: ("id" | "name" | "createdAt" | "updatedAt" | "secret" | "enabled")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            apps?: {
                                name?: string;
                                enabled?: boolean;
                                id?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                secret?: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apps/{id}/rotate-secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rotate secret
         * @description This route allows you to rotate the secret of a set of credentials in your Port organization.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The `id` of the credentials set you want to operate on. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            app?: {
                                name?: string;
                                enabled?: boolean;
                                id?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                secret?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/apps/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change the name of a credentials set
         * @description This route allows you to change the name of a set of credentials in your Port organization.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The `id` of the credentials set you want to operate on. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The new name of the credentials set. */
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                            app?: {
                                name?: string;
                                enabled?: boolean;
                                id?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                secret?: string;
                            };
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete credentials
         * @description This route allows you to delete a set of credentials in your Port organization.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The `id` of the credentials set you want to operate on. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {unknown} */
                            ok: true;
                        };
                    };
                };
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rotate-credentials/{user_email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rotate a user's credentials
         * @description This route allows you to rotate a user's credentials and generate new ones.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The email address of the user you want to operate on. */
                    user_email: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/scorecards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a blueprint's scorecards
         * @description This route allows you to fetch all scorecards for a given blueprint. A scorecard is a set of rules that define the quality of a blueprint.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change scorecards
         * @description This route allows you to modify one or more scorecards of a given blueprint. A scorecard is a set of rules that define the quality of a blueprint.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description A unique identifier for the scorecard. */
                        identifier: string;
                        /** @description The title of the scorecard. */
                        title: string;
                        /** @description An optional set of [conditions](https://docs.port.io/scorecards/concepts-and-structure/#conditions) to filter entities that will be evaluated by the scorecard. */
                        filter?: {
                            /**
                             * @description The combinator to use when evaluating the conditions.
                             * @enum {string}
                             */
                            combinator: "and" | "or";
                            /** @description The conditions to evaluate. */
                            conditions: ({
                                property: string;
                                /** @enum {unknown} */
                                operator: "between" | "notBetween" | "=";
                                value: {
                                    /** Format: date-time */
                                    from: string;
                                    /** Format: date-time */
                                    to: string;
                                } | {
                                    /** @enum {string} */
                                    preset: "today" | "tomorrow" | "yesterday" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                            } | {
                                property: string;
                                /** @enum {string} */
                                operator: "containsAny" | "in";
                                value: string[];
                            } | {
                                relation: string;
                                /** @enum {string} */
                                operator: "containsAny" | "in";
                                value: string[];
                            } | {
                                property: string;
                                /** @enum {string} */
                                operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                /** @description The value to compare against. */
                                value: string | number | boolean | string[];
                            } | {
                                relation: string;
                                /** @enum {string} */
                                operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                /** @description The value to compare against. */
                                value: string | number | boolean | string[];
                            } | {
                                not?: boolean;
                                property: string;
                                /** @enum {string} */
                                operator: "isEmpty" | "isNotEmpty";
                            } | {
                                not?: boolean;
                                relation: string;
                                /** @enum {string} */
                                operator: "isEmpty" | "isNotEmpty";
                            })[];
                        };
                        /** @description The [rules](https://docs.port.io/scorecards/concepts-and-structure/#rule-elements) that define the scorecard. */
                        rules: {
                            /** @description The identifier of the rule. */
                            identifier: string;
                            /** @description The title of the rule. */
                            title: string;
                            /** @description A description for the rule. */
                            description?: string;
                            /** @description The level of the rule (Gold, Silver, or Bronze). */
                            level: string;
                            /** @description The query that defines the rule. */
                            query: {
                                /**
                                 * @description The combinator to use when evaluating the conditions.
                                 * @enum {string}
                                 */
                                combinator: "and" | "or";
                                /** @description The conditions to evaluate. */
                                conditions: ({
                                    property: string;
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                } | {
                                    property: string;
                                    /** @enum {string} */
                                    operator: "containsAny" | "in";
                                    value: string[];
                                } | {
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "containsAny" | "in";
                                    value: string[];
                                } | {
                                    property: string;
                                    /** @enum {string} */
                                    operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                    /** @description The value to compare against. */
                                    value: string | number | boolean | string[];
                                } | {
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                    /** @description The value to compare against. */
                                    value: string | number | boolean | string[];
                                } | {
                                    not?: boolean;
                                    property: string;
                                    /** @enum {string} */
                                    operator: "isEmpty" | "isNotEmpty";
                                } | {
                                    not?: boolean;
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "isEmpty" | "isNotEmpty";
                                })[];
                            };
                        }[];
                        /** @description The available levels of the scorecard, each with its own name and color. */
                        levels?: {
                            /** @description The name of the level. */
                            title: string;
                            /**
                             * @description The color associated with the level, for visualization in Port's UI.
                             * @enum {string}
                             */
                            color: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                        }[];
                        id?: string;
                    }[];
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Create a scorecard
         * @description This route allows you to create a scorecard for a given blueprint. A scorecard is a set of rules that define the quality of a blueprint.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the blueprint to operate on. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique identifier for the scorecard. */
                        identifier: string;
                        /** @description The title of the scorecard. */
                        title: string;
                        /** @description An optional set of [conditions](https://docs.port.io/scorecards/concepts-and-structure/#conditions) to filter entities that will be evaluated by the scorecard. */
                        filter?: {
                            /**
                             * @description The combinator to use when evaluating the conditions.
                             * @enum {string}
                             */
                            combinator: "and" | "or";
                            /** @description The conditions to evaluate. */
                            conditions: ({
                                property: string;
                                /** @enum {unknown} */
                                operator: "between" | "notBetween" | "=";
                                value: {
                                    /** Format: date-time */
                                    from: string;
                                    /** Format: date-time */
                                    to: string;
                                } | {
                                    /** @enum {string} */
                                    preset: "today" | "tomorrow" | "yesterday" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                            } | {
                                property: string;
                                /** @enum {string} */
                                operator: "containsAny" | "in";
                                value: string[];
                            } | {
                                relation: string;
                                /** @enum {string} */
                                operator: "containsAny" | "in";
                                value: string[];
                            } | {
                                property: string;
                                /** @enum {string} */
                                operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                /** @description The value to compare against. */
                                value: string | number | boolean | string[];
                            } | {
                                relation: string;
                                /** @enum {string} */
                                operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                /** @description The value to compare against. */
                                value: string | number | boolean | string[];
                            } | {
                                not?: boolean;
                                property: string;
                                /** @enum {string} */
                                operator: "isEmpty" | "isNotEmpty";
                            } | {
                                not?: boolean;
                                relation: string;
                                /** @enum {string} */
                                operator: "isEmpty" | "isNotEmpty";
                            })[];
                        };
                        /** @description The [rules](https://docs.port.io/scorecards/concepts-and-structure/#rule-elements) that define the scorecard. */
                        rules: {
                            /** @description The identifier of the rule. */
                            identifier: string;
                            /** @description The title of the rule. */
                            title: string;
                            /** @description A description for the rule. */
                            description?: string;
                            /** @description The level of the rule (Gold, Silver, or Bronze). */
                            level: string;
                            /** @description The query that defines the rule. */
                            query: {
                                /**
                                 * @description The combinator to use when evaluating the conditions.
                                 * @enum {string}
                                 */
                                combinator: "and" | "or";
                                /** @description The conditions to evaluate. */
                                conditions: ({
                                    property: string;
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                } | {
                                    property: string;
                                    /** @enum {string} */
                                    operator: "containsAny" | "in";
                                    value: string[];
                                } | {
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "containsAny" | "in";
                                    value: string[];
                                } | {
                                    property: string;
                                    /** @enum {string} */
                                    operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                    /** @description The value to compare against. */
                                    value: string | number | boolean | string[];
                                } | {
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                    /** @description The value to compare against. */
                                    value: string | number | boolean | string[];
                                } | {
                                    not?: boolean;
                                    property: string;
                                    /** @enum {string} */
                                    operator: "isEmpty" | "isNotEmpty";
                                } | {
                                    not?: boolean;
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "isEmpty" | "isNotEmpty";
                                })[];
                            };
                        }[];
                        /** @description The available levels of the scorecard, each with its own name and color. */
                        levels?: {
                            /** @description The name of the level. */
                            title: string;
                            /**
                             * @description The color associated with the level, for visualization in Port's UI.
                             * @enum {string}
                             */
                            color: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{blueprint_identifier}/scorecards/{scorecard_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a scorecard
         * @description This route allows you to fetch a specific scorecard. A scorecard is a set of rules that define the quality of a blueprint.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the scorecard to operate on. */
                    scorecard_identifier: string;
                    /** @description The identifier of the blueprint containing the scorecard. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        /**
         * Change a scorecard
         * @description This route allows you to modify a specific scorecard. A scorecard is a set of rules that define the quality of a blueprint.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the scorecard to operate on. */
                    scorecard_identifier: string;
                    /** @description The identifier of the blueprint containing the scorecard. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description A unique identifier for the scorecard. */
                        identifier: string;
                        /** @description The title of the scorecard. */
                        title: string;
                        /** @description An optional set of [conditions](https://docs.port.io/scorecards/concepts-and-structure/#conditions) to filter entities that will be evaluated by the scorecard. */
                        filter?: {
                            /**
                             * @description The combinator to use when evaluating the conditions.
                             * @enum {string}
                             */
                            combinator: "and" | "or";
                            /** @description The conditions to evaluate. */
                            conditions: ({
                                property: string;
                                /** @enum {unknown} */
                                operator: "between" | "notBetween" | "=";
                                value: {
                                    /** Format: date-time */
                                    from: string;
                                    /** Format: date-time */
                                    to: string;
                                } | {
                                    /** @enum {string} */
                                    preset: "today" | "tomorrow" | "yesterday" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                };
                            } | {
                                property: string;
                                /** @enum {string} */
                                operator: "containsAny" | "in";
                                value: string[];
                            } | {
                                relation: string;
                                /** @enum {string} */
                                operator: "containsAny" | "in";
                                value: string[];
                            } | {
                                property: string;
                                /** @enum {string} */
                                operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                /** @description The value to compare against. */
                                value: string | number | boolean | string[];
                            } | {
                                relation: string;
                                /** @enum {string} */
                                operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                /** @description The value to compare against. */
                                value: string | number | boolean | string[];
                            } | {
                                not?: boolean;
                                property: string;
                                /** @enum {string} */
                                operator: "isEmpty" | "isNotEmpty";
                            } | {
                                not?: boolean;
                                relation: string;
                                /** @enum {string} */
                                operator: "isEmpty" | "isNotEmpty";
                            })[];
                        };
                        /** @description The [rules](https://docs.port.io/scorecards/concepts-and-structure/#rule-elements) that define the scorecard. */
                        rules: {
                            /** @description The identifier of the rule. */
                            identifier: string;
                            /** @description The title of the rule. */
                            title: string;
                            /** @description A description for the rule. */
                            description?: string;
                            /** @description The level of the rule (Gold, Silver, or Bronze). */
                            level: string;
                            /** @description The query that defines the rule. */
                            query: {
                                /**
                                 * @description The combinator to use when evaluating the conditions.
                                 * @enum {string}
                                 */
                                combinator: "and" | "or";
                                /** @description The conditions to evaluate. */
                                conditions: ({
                                    property: string;
                                    /** @enum {unknown} */
                                    operator: "between" | "notBetween" | "=";
                                    value: {
                                        /** Format: date-time */
                                        from: string;
                                        /** Format: date-time */
                                        to: string;
                                    } | {
                                        /** @enum {string} */
                                        preset: "today" | "tomorrow" | "yesterday" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                                    };
                                } | {
                                    property: string;
                                    /** @enum {string} */
                                    operator: "containsAny" | "in";
                                    value: string[];
                                } | {
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "containsAny" | "in";
                                    value: string[];
                                } | {
                                    property: string;
                                    /** @enum {string} */
                                    operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                    /** @description The value to compare against. */
                                    value: string | number | boolean | string[];
                                } | {
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith";
                                    /** @description The value to compare against. */
                                    value: string | number | boolean | string[];
                                } | {
                                    not?: boolean;
                                    property: string;
                                    /** @enum {string} */
                                    operator: "isEmpty" | "isNotEmpty";
                                } | {
                                    not?: boolean;
                                    relation: string;
                                    /** @enum {string} */
                                    operator: "isEmpty" | "isNotEmpty";
                                })[];
                            };
                        }[];
                        /** @description The available levels of the scorecard, each with its own name and color. */
                        levels?: {
                            /** @description The name of the level. */
                            title: string;
                            /**
                             * @description The color associated with the level, for visualization in Port's UI.
                             * @enum {string}
                             */
                            color: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a scorecard
         * @description This route allows you to delete a specific scorecard. A scorecard is a set of rules that define the quality of a blueprint.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the scorecard to operate on. */
                    scorecard_identifier: string;
                    /** @description The identifier of the blueprint containing the scorecard. */
                    blueprint_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/scorecards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all scorecards
         * @description This route allows you to fetch all scorecards in your Port organization.<br/><br/>To learn more about scorecards, check out the [documentation](https://docs.port.io/scorecards/overview).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/migrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all migrations
         * @description This route allows you to fetch all migrations (both past and present) in your Port organization.<br/><br/>The call will perform a logical `AND` operation on the query parameters below, and return all migrations that match the criteria.
         */
        get: {
            parameters: {
                query?: {
                    status?: ("COMPLETED" | "RUNNING" | "PENDING" | "INITIALIZING" | "FAILURE" | "CANCELLED" | "PENDING_CANCELLATION")[];
                    /** @description The identifier of the user who initiated the migration. You can use the [Get user](https://docs.port.io/api-reference/get-a-user/) route to get a user's identifier. */
                    actor?: string;
                    /** @description The identifier of the blueprint associated with the migration. */
                    blueprint?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a migration
         * @description This route allows you to create a migration in your Port organization.<br/><br/>You can use this to migrate data from one blueprint to another, or to convert the data type of a property in a blueprint.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The identifier of the blueprint from which the migration will be performed. */
                        sourceBlueprint: string;
                        /** @description The definition used to map the data from the source blueprint into the target blueprint. */
                        mapping: {
                            /** @description The identifier of the target blueprint. */
                            blueprint?: string;
                            /** @description An optional set of [conditions](https://docs.port.io/scorecards/concepts-and-structure/#conditions) to filter the entities that will be migrated. */
                            filter?: string;
                            /** @description A `jq` query that evaluates to an array of items, used to create multiple entities at once. See more information [here](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping/#create-multiple-entities-from-an-array-api-object). */
                            itemsToParse?: string;
                            entity: {
                                /** @description A `jq` expression used to get data from the source blueprint, to be used as an identifier for the entity. */
                                identifier?: string;
                                /** @description A `jq` expression used to get data from the source blueprint, to be used as the title of the entity. */
                                title?: string;
                                /** @description The icon of the entity. */
                                icon?: string;
                                /** @description The team the entity belongs to. */
                                team?: string;
                                /** @description An object containing the properties of the entity and their values, in `"key":"value"` pairs where the `key` is the property's identifier, and the `value` is its value. */
                                properties?: {
                                    [key: string]: string;
                                };
                                /** @description An object containing the relations of the entity and their values, in `"key":"value"` pairs where the `key` is the relation's identifier, and the `value` is the related entity's identifier. */
                                relations?: {
                                    [key: string]: string;
                                };
                            };
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/migrations/{migration_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a migration
         * @description This route allows you to fetch a specific migration in your Port organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the migration you want to fetch. */
                    migration_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/migrations/{migration_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a migration
         * @description This route allows you to cancel a running migration in your Port organization.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the migration you want to cancel. */
                    migration_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The reason for cancelling the migration. */
                        reason?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/actions/{action_identifier}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an action's permissions
         * @description This route allows you to fetch the permissions of a self-service action.<br/><br/>To learn more about action RBAC, check out the [documentation](https://docs.port.io/actions-and-automations/create-self-service-experiences/set-self-service-actions-rbac/).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the action/automation you want to operate on. */
                    action_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an action's permissions
         * @description This route allows you to update the permissions of a self-service action.<br/><br/>To learn more about action RBAC, check out the [documentation](https://docs.port.io/actions-and-automations/create-self-service-experiences/set-self-service-actions-rbac/).
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The identifier of the action/automation you want to operate on. */
                    action_identifier: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description An object used to define who can execute the action. */
                        execute?: {
                            /** @description The email addresses of the users who can execute the action. */
                            users?: string[];
                            /** @description The roles that can execute the action. */
                            roles?: string[];
                            /** @description The names of the teams whose members can execute the action. */
                            teams?: string[];
                            /** @description Relevant only for [DAY-2/DELETE actions](https://docs.port.io/actions-and-automations/create-self-service-experiences/setup-ui-for-action/#basic-details). If `true`, any member of the team that the entity belongs to can execute the action. */
                            ownedByTeam?: boolean;
                            /** @description An optional custom policy the determines if action execution is allowed.<br/>See instructions and examples [here](https://docs.port.io/actions-and-automations/create-self-service-experiences/set-self-service-actions-rbac/dynamic-permissions/#instructions). */
                            policy?: {
                                /** @description One or more queries to fetch data from your software catalog. */
                                queries: {
                                    [key: string]: components["schemas"]["def-1"];
                                };
                                /** @description `JQ` expressions that run against the provided queries, and resolve to a boolean value (`true` = allowed to execute). */
                                conditions: string[];
                            } | null;
                        };
                        /** @description An object used to define who can approve the action. */
                        approve?: {
                            /** @description The email addresses of the users who can approve the action. */
                            users?: string[];
                            /** @description The roles that can approve the action. */
                            roles?: string[];
                            /** @description The names of the teams whose members can approve the action. */
                            teams?: string[];
                            /** @description An optional custom policy the determines who can approve the action.<br/>See instructions and examples [here](https://docs.port.io/actions-and-automations/create-self-service-experiences/set-self-service-actions-rbac/dynamic-permissions/#instructions). */
                            policy?: {
                                /** @description One or more queries to fetch data from your software catalog. */
                                queries: {
                                    [key: string]: components["schemas"]["def-1"];
                                };
                                /** @description `JQ` expressions that run against the provided queries, and resolve to a boolean value (`true` = allowed to execute). */
                                conditions: string[];
                            } | null;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description A resource with the provided identifier was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
                /** @description Request body is too large (limit is 1MiB) */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message?: string;
                        };
                    };
                };
                /** @description The json provided does not match the route's schema */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @constant */
                            ok: false;
                            error: string;
                            message: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** /schemas/userInputs/jqQuery */
        "def-0": {
            /** @description A [jq query](https://stedolan.github.io/jq/manual/) that resolves to `true` or `false`, determining the visibility of the input. */
            jqQuery: string;
        };
        /**
         * /schemas/entitiesQuery
         * @example {
         *       "combinator": "and",
         *       "rules": [
         *         {
         *           "property": "$blueprint",
         *           "operator": "=",
         *           "value": "service"
         *         },
         *         {
         *           "combinator": "or",
         *           "rules": [
         *             {
         *               "property": "environment",
         *               "operator": "=",
         *               "value": "production"
         *             },
         *             {
         *               "property": "environment",
         *               "operator": "=",
         *               "value": "staging"
         *             }
         *           ]
         *         }
         *       ]
         *     }
         */
        "def-1": {
            /**
             * @description The combinator to use for the rules.
             * @enum {unknown}
             */
            combinator: "and" | "or";
            rules: ({
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: "between" | "notBetween" | "=";
                value: {
                    /** Format: date-time */
                    from: string;
                    /** Format: date-time */
                    to: string;
                } | {
                    /** @enum {string} */
                    preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                } | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                /** @enum {unknown} */
                operator: "isEmpty" | "isNotEmpty";
                property: string;
            } | {
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: ">" | ">=" | "<" | "<=";
                value: number | string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                /** @enum {unknown} */
                operator: "isExpired" | "isNotExpired";
                property: string;
            } | {
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                /** @enum {unknown} */
                operator: "relatedTo";
                blueprint: string;
                value: string | string[];
                /** @enum {unknown} */
                direction?: "upstream" | "downstream";
                required?: boolean;
            } | {
                propertySchema: {
                    type: string;
                    format?: string;
                    items?: {
                        type: string;
                        format?: string;
                    };
                };
                /** @enum {unknown} */
                operator: "=" | "!=" | "contains";
                value?: null | string | number | boolean;
            } | {
                property: {
                    path: (string | {
                        relation?: string;
                        maxHops?: number;
                    })[];
                    fromBlueprint?: string;
                };
                /** @enum {string} */
                operator: "matchAny";
                value: string | string[];
            } | components["schemas"]["def-1"])[];
        };
        /** /schemas/entitiesQueryWithJqQuery */
        "def-2": {
            /**
             * @description The combinator to use for the rules.
             * @enum {unknown}
             */
            combinator: "and" | "or";
            rules: ({
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: "between" | "notBetween" | "=";
                value: {
                    /** Format: date-time */
                    from: string;
                    /** Format: date-time */
                    to: string;
                } | {
                    /** @enum {string} */
                    preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                } | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                /** @enum {unknown} */
                operator: "isEmpty" | "isNotEmpty";
                property: string;
            } | {
                /** @enum {unknown} */
                operator: "isExpired" | "isNotExpired";
                property: string;
            } | {
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: ">" | ">=" | "<" | "<=";
                value: number | string | components["schemas"]["def-0"] | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                value: null | string | number | boolean | string[] | number[] | boolean[] | string[] | components["schemas"]["def-0"] | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                /** @enum {unknown} */
                operator: "relatedTo";
                blueprint: string;
                value: string | string[] | components["schemas"]["def-0"];
                /** @enum {unknown} */
                direction?: "upstream" | "downstream";
                required?: boolean;
            } | {
                propertySchema: {
                    type: string;
                    format?: string;
                    items?: {
                        type: string;
                        format?: string;
                    };
                };
                /** @enum {unknown} */
                operator: "=" | "!=" | "contains";
                value?: null | string | number | boolean | components["schemas"]["def-0"];
            } | {
                property: {
                    path: (string | {
                        relation?: string;
                        maxHops?: number;
                    })[];
                    fromBlueprint?: string;
                };
                /** @enum {string} */
                operator: "matchAny";
                value: string | string[];
            } | components["schemas"]["def-2"])[];
        };
        /** /schemas/dashboardWidget */
        "def-3": {
            id?: string;
            updatedAt?: string;
            updatedBy?: string;
            createdAt?: string;
            createdBy?: string;
            /** @enum {string} */
            type: "dashboard-widget";
            layout: {
                height: number;
                columns: {
                    size: number;
                    id: string;
                }[];
            }[];
            widgets: ({
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "ai-agent";
                title?: string;
                description?: string;
                agentIdentifier: string;
                icon?: string;
                useMCP?: boolean;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "entity-info";
                title?: string;
                description?: string;
                icon?: string;
                entity: string;
                hiddenQuery?: string[];
                order?: string[];
                showEmptyValues?: boolean;
                blueprint: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "entity-details";
                title?: string;
                description?: string;
                icon?: string;
                entity: string;
                hiddenQuery?: string[];
                order?: string[];
                showEmptyValues?: boolean;
                blueprint: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "action-runs-table-widget";
                icon?: string;
                description?: string;
                title?: string;
                /** @enum {string} */
                displayMode?: "single" | "widget";
                action: string;
                tableConfig?: {
                    filterSettings?: {
                        filterBy: components["schemas"]["def-1"];
                    };
                    groupSettings?: {
                        groupBy: string[];
                    };
                    sortSettings?: {
                        sortBy?: {
                            property: string;
                            /** @enum {unknown} */
                            order: "asc" | "desc";
                        }[];
                    };
                    propertiesSettings?: {
                        hidden?: string[];
                        order?: string[];
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "action-card-widget";
                icon?: string;
                description?: string;
                title?: string;
                actions: {
                    action: string;
                }[];
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "links-widget";
                title?: string;
                description?: string;
                icon?: string;
                links: {
                    title: string;
                    description?: string;
                    url: string;
                    icon?: string;
                }[];
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "table-entities-explorer";
                icon?: string;
                description?: string;
                emptyStateText?: string;
                title?: string;
                blueprint?: string;
                dataset: components["schemas"]["def-1"];
                excludedFields?: string[];
                /** @enum {string} */
                displayMode?: "tabs" | "single" | "widget";
                blueprintConfig?: {
                    [key: string]: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            shown?: string[];
                            order?: string[];
                        };
                        tabIndex?: number;
                        hidden?: boolean;
                        title?: string;
                        description?: string;
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "table-entities-explorer-by-direction";
                title?: string;
                blueprintConfig?: {
                    [key: string]: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            shown?: string[];
                            order?: string[];
                        };
                        tabIndex?: number;
                        hidden?: boolean;
                        title?: string;
                        description?: string;
                        dataset?: components["schemas"]["def-1"];
                        targetBlueprint?: string;
                        relatedProperty?: string;
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "table-audit-log";
                title?: string;
                description?: string;
                query: {
                    /** @description An identifier of the log event you want to fetch. */
                    identifier?: string;
                    /** @description Fetch all audit logs related to the specified entity. */
                    entity?: string;
                    /** @description Fetch all audit logs related to the specified blueprint. */
                    blueprint?: string;
                    /** @description Fetch all audit logs related to the specified action run. */
                    run_id?: string;
                    /** @description Fetch all audit logs related to the specified webhook. */
                    webhookId?: string;
                    /** @description Fetch all audit logs related to the specified webhook event. */
                    webhookEventId?: string;
                    /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                    origin?: string[];
                    /** @description Fetch all audit logs related to the specified integration. */
                    InstallationId?: string;
                    /** @description Fetch all audit logs related to the specified resource type/s. */
                    resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                    /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                    includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                    /**
                     * Format: date-time
                     * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                     */
                    from?: string;
                    /**
                     * Format: date-time
                     * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                     */
                    to?: string;
                    /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                    action?: string;
                    /**
                     * @description Fetch all audit logs with the specified status.
                     * @enum {string}
                     */
                    status?: "SUCCESS" | "FAILURE";
                    /** @description The maximum number of logs to fetch. */
                    limit?: number;
                    /** @enum {string} */
                    actionType?: "automation" | "self-service";
                };
                tableConfig?: {
                    filterSettings?: {
                        filterBy: components["schemas"]["def-1"];
                    };
                    groupSettings?: {
                        groupBy: string[];
                    };
                    sortSettings?: {
                        sortBy?: {
                            property: string;
                            /** @enum {unknown} */
                            order: "asc" | "desc";
                        }[];
                    };
                    propertiesSettings?: {
                        hidden?: string[];
                        order?: string[];
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "users-table";
                title?: string;
                query?: {
                    team?: string;
                };
                tableConfig?: {
                    filterSettings?: {
                        filterBy: components["schemas"]["def-1"];
                    };
                    groupSettings?: {
                        groupBy: string[];
                    };
                    sortSettings?: {
                        sortBy?: {
                            property: string;
                            /** @enum {unknown} */
                            order: "asc" | "desc";
                        }[];
                    };
                    propertiesSettings?: {
                        hidden?: string[];
                        order?: string[];
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "teams-table";
                title?: string;
                query?: {
                    user?: string;
                };
                tableConfig?: {
                    filterSettings?: {
                        filterBy: components["schemas"]["def-1"];
                    };
                    groupSettings?: {
                        groupBy: string[];
                    };
                    sortSettings?: {
                        sortBy?: {
                            property: string;
                            /** @enum {unknown} */
                            order: "asc" | "desc";
                        }[];
                    };
                    propertiesSettings?: {
                        hidden?: string[];
                        order?: string[];
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "runs-table";
                title?: string;
                query?: {
                    /** @description The identifier of the entity associated with the action run. */
                    entity?: string;
                    /** @description The identifier of the blueprint associated with the action run. */
                    blueprint?: string;
                    /** @description If `true`, only running action runs will be fetched. */
                    active?: boolean;
                    /** @description The email of the user who initiated the action run. */
                    user_email?: string;
                    /** @description The id of the user who initiated the action run. */
                    user_id?: string;
                    /** @description The maximum number of action runs to fetch. */
                    limit?: number;
                    /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                    external_run_id?: string;
                    /** @enum {string} */
                    version?: "v1" | "v2";
                    action?: string;
                    source?: ("UI" | "API" | "AUTOMATION")[];
                };
                tableConfig?: {
                    filterSettings?: {
                        filterBy: components["schemas"]["def-1"];
                    };
                    groupSettings?: {
                        groupBy: string[];
                    };
                    sortSettings?: {
                        sortBy?: {
                            property: string;
                            /** @enum {unknown} */
                            order: "asc" | "desc";
                        }[];
                    };
                    propertiesSettings?: {
                        hidden?: string[];
                        order?: string[];
                    };
                };
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "run-info";
                title?: string;
                runId: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "user-info";
                title?: string;
                user_email: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "graph-entities-explorer";
                title?: string;
                dataset: components["schemas"]["def-1"];
                hiddenBlueprints?: string[];
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                icon?: string;
                /** @enum {unknown} */
                type: "entities-pie-chart";
                title?: string;
                blueprint?: string;
                property: string;
                description?: string;
                dataset: components["schemas"]["def-1"];
                emptyStateText?: string;
            } | ({
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                icon?: string;
                /** @enum {unknown} */
                type: "line-chart";
                title?: string;
                blueprint: string;
                /** @enum {unknown} */
                chartType: "propertiesValueHistory";
                xAxisTitle?: string;
                yAxisTitle?: string;
                /** @enum {string} */
                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                timeRange?: {
                    /** @enum {string} */
                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                };
                description?: string;
                emptyStateText?: string;
                entity: string;
                properties: string[];
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                icon?: string;
                /** @enum {unknown} */
                type: "line-chart";
                title?: string;
                blueprint: string;
                /** @enum {unknown} */
                chartType: "aggregatePropertiesValues";
                xAxisTitle?: string;
                yAxisTitle?: string;
                /** @enum {string} */
                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                timeRange?: {
                    /** @enum {string} */
                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                };
                description?: string;
                emptyStateText?: string;
                /** @enum {string} */
                func: "sum" | "average" | "min" | "max" | "median" | "last";
                properties: string[];
                measureTimeBy: string;
                dataset?: components["schemas"]["def-1"];
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                icon?: string;
                /** @enum {unknown} */
                type: "line-chart";
                title?: string;
                blueprint: string;
                /** @enum {unknown} */
                chartType: "countEntities";
                xAxisTitle?: string;
                yAxisTitle?: string;
                /** @enum {string} */
                timeInterval?: "hour" | "day" | "isoWeek" | "month";
                timeRange?: {
                    /** @enum {string} */
                    preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                };
                description?: string;
                emptyStateText?: string;
                /** @enum {string} */
                func: "count" | "average";
                breakdownProperty?: string;
                measureTimeBy: string;
                dataset?: components["schemas"]["def-1"];
            }) | ({
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {string} */
                type: "entities-number-chart";
                title?: string;
                icon?: string;
                description?: string;
                emptyStateText?: string;
                /** @enum {string} */
                unit: "none" | "$" | "€" | "£" | "%" | "custom";
                /** @enum {string} */
                unitAlignment?: "left" | "right";
                /** @enum {string} */
                calculationBy?: "entities" | "property";
                conditionalFormatting?: {
                    /** @enum {unknown} */
                    operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                    value: number;
                    message?: string;
                    description?: string;
                    /** @enum {string} */
                    color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                }[];
            } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {string} */
                type: "iframe-widget";
                title: string;
                icon?: string;
                description?: string;
                /** Format: url */
                url: string;
                /** @enum {string} */
                urlType: "public" | "protected";
            } & unknown) | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {string} */
                type: "markdown";
                title: string;
                icon?: string;
                markdown?: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {unknown} */
                type: "team-info";
                title?: string;
                team_name: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {string} */
                type: "recently-viewed-entities";
                title: string;
                icon?: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {string} */
                type: "recently-used-actions";
                title: string;
                icon?: string;
            } | {
                id?: string;
                updatedAt?: string;
                updatedBy?: string;
                createdAt?: string;
                createdBy?: string;
                /** @enum {string} */
                type: "my-entities";
                title: string;
                icon?: string;
            } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
        };
        /** /schemas/grouperWidget */
        "def-4": {
            id?: string;
            updatedAt?: string;
            updatedBy?: string;
            createdAt?: string;
            createdBy?: string;
            /** @enum {string} */
            type: "grouper";
            title?: string;
            /** @enum {string} */
            displayMode: "tabs" | "switch";
            activeGroupUrlParam?: string;
            groupsOrder?: string[];
            groups: {
                title: string;
                icon?: string;
                widgets: ({
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "ai-agent";
                    title?: string;
                    description?: string;
                    agentIdentifier: string;
                    icon?: string;
                    useMCP?: boolean;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "entity-info";
                    title?: string;
                    description?: string;
                    icon?: string;
                    entity: string;
                    hiddenQuery?: string[];
                    order?: string[];
                    showEmptyValues?: boolean;
                    blueprint: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "entity-details";
                    title?: string;
                    description?: string;
                    icon?: string;
                    entity: string;
                    hiddenQuery?: string[];
                    order?: string[];
                    showEmptyValues?: boolean;
                    blueprint: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "action-runs-table-widget";
                    icon?: string;
                    description?: string;
                    title?: string;
                    /** @enum {string} */
                    displayMode?: "single" | "widget";
                    action: string;
                    tableConfig?: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            order?: string[];
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "action-card-widget";
                    icon?: string;
                    description?: string;
                    title?: string;
                    actions: {
                        action: string;
                    }[];
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "links-widget";
                    title?: string;
                    description?: string;
                    icon?: string;
                    links: {
                        title: string;
                        description?: string;
                        url: string;
                        icon?: string;
                    }[];
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "table-entities-explorer";
                    icon?: string;
                    description?: string;
                    emptyStateText?: string;
                    title?: string;
                    blueprint?: string;
                    dataset: components["schemas"]["def-1"];
                    excludedFields?: string[];
                    /** @enum {string} */
                    displayMode?: "tabs" | "single" | "widget";
                    blueprintConfig?: {
                        [key: string]: {
                            filterSettings?: {
                                filterBy: components["schemas"]["def-1"];
                            };
                            groupSettings?: {
                                groupBy: string[];
                            };
                            sortSettings?: {
                                sortBy?: {
                                    property: string;
                                    /** @enum {unknown} */
                                    order: "asc" | "desc";
                                }[];
                            };
                            propertiesSettings?: {
                                hidden?: string[];
                                shown?: string[];
                                order?: string[];
                            };
                            tabIndex?: number;
                            hidden?: boolean;
                            title?: string;
                            description?: string;
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "table-entities-explorer-by-direction";
                    title?: string;
                    blueprintConfig?: {
                        [key: string]: {
                            filterSettings?: {
                                filterBy: components["schemas"]["def-1"];
                            };
                            groupSettings?: {
                                groupBy: string[];
                            };
                            sortSettings?: {
                                sortBy?: {
                                    property: string;
                                    /** @enum {unknown} */
                                    order: "asc" | "desc";
                                }[];
                            };
                            propertiesSettings?: {
                                hidden?: string[];
                                shown?: string[];
                                order?: string[];
                            };
                            tabIndex?: number;
                            hidden?: boolean;
                            title?: string;
                            description?: string;
                            dataset?: components["schemas"]["def-1"];
                            targetBlueprint?: string;
                            relatedProperty?: string;
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "table-audit-log";
                    title?: string;
                    description?: string;
                    query: {
                        /** @description An identifier of the log event you want to fetch. */
                        identifier?: string;
                        /** @description Fetch all audit logs related to the specified entity. */
                        entity?: string;
                        /** @description Fetch all audit logs related to the specified blueprint. */
                        blueprint?: string;
                        /** @description Fetch all audit logs related to the specified action run. */
                        run_id?: string;
                        /** @description Fetch all audit logs related to the specified webhook. */
                        webhookId?: string;
                        /** @description Fetch all audit logs related to the specified webhook event. */
                        webhookEventId?: string;
                        /** @description Fetch all audit logs coming from the specified origin/s. This refers to the integration/s that triggered the log. For operations performed via Port's UI, the origin will be `UI`. */
                        origin?: string[];
                        /** @description Fetch all audit logs related to the specified integration. */
                        InstallationId?: string;
                        /** @description Fetch all audit logs related to the specified resource type/s. */
                        resources?: ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action")[] | ("blueprint" | "entity" | "run" | "webhook" | "scorecard" | "action");
                        /** @description The fields you want to include in the response. If used, only the specified fields will be included in the response. */
                        includes?: ("action" | "context" | "diff" | "identifier" | "resourceType" | "status" | "trigger" | "additionalData" | "message")[];
                        /**
                         * Format: date-time
                         * @description The starting timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                         */
                        from?: string;
                        /**
                         * Format: date-time
                         * @description The ending timestamp of the audit logs you want to fetch, in the ISO format `2022-04-23T18:25:43.511Z`.
                         */
                        to?: string;
                        /** @description Fetch all audit logs with the specified action type - `CREATE`, `UPDATE`, or `DELETE`. */
                        action?: string;
                        /**
                         * @description Fetch all audit logs with the specified status.
                         * @enum {string}
                         */
                        status?: "SUCCESS" | "FAILURE";
                        /** @description The maximum number of logs to fetch. */
                        limit?: number;
                        /** @enum {string} */
                        actionType?: "automation" | "self-service";
                    };
                    tableConfig?: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            order?: string[];
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "users-table";
                    title?: string;
                    query?: {
                        team?: string;
                    };
                    tableConfig?: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            order?: string[];
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "teams-table";
                    title?: string;
                    query?: {
                        user?: string;
                    };
                    tableConfig?: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            order?: string[];
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "runs-table";
                    title?: string;
                    query?: {
                        /** @description The identifier of the entity associated with the action run. */
                        entity?: string;
                        /** @description The identifier of the blueprint associated with the action run. */
                        blueprint?: string;
                        /** @description If `true`, only running action runs will be fetched. */
                        active?: boolean;
                        /** @description The email of the user who initiated the action run. */
                        user_email?: string;
                        /** @description The id of the user who initiated the action run. */
                        user_id?: string;
                        /** @description The maximum number of action runs to fetch. */
                        limit?: number;
                        /** @description The run id of your backend, for example the id that GitHub gives the workflow. This can be used to identify the action run instead of the `run_id`. */
                        external_run_id?: string;
                        /** @enum {string} */
                        version?: "v1" | "v2";
                        action?: string;
                        source?: ("UI" | "API" | "AUTOMATION")[];
                    };
                    tableConfig?: {
                        filterSettings?: {
                            filterBy: components["schemas"]["def-1"];
                        };
                        groupSettings?: {
                            groupBy: string[];
                        };
                        sortSettings?: {
                            sortBy?: {
                                property: string;
                                /** @enum {unknown} */
                                order: "asc" | "desc";
                            }[];
                        };
                        propertiesSettings?: {
                            hidden?: string[];
                            order?: string[];
                        };
                    };
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "run-info";
                    title?: string;
                    runId: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "user-info";
                    title?: string;
                    user_email: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "graph-entities-explorer";
                    title?: string;
                    dataset: components["schemas"]["def-1"];
                    hiddenBlueprints?: string[];
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    icon?: string;
                    /** @enum {unknown} */
                    type: "entities-pie-chart";
                    title?: string;
                    blueprint?: string;
                    property: string;
                    description?: string;
                    dataset: components["schemas"]["def-1"];
                    emptyStateText?: string;
                } | ({
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    icon?: string;
                    /** @enum {unknown} */
                    type: "line-chart";
                    title?: string;
                    blueprint: string;
                    /** @enum {unknown} */
                    chartType: "propertiesValueHistory";
                    xAxisTitle?: string;
                    yAxisTitle?: string;
                    /** @enum {string} */
                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                    timeRange?: {
                        /** @enum {string} */
                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                    };
                    description?: string;
                    emptyStateText?: string;
                    entity: string;
                    properties: string[];
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    icon?: string;
                    /** @enum {unknown} */
                    type: "line-chart";
                    title?: string;
                    blueprint: string;
                    /** @enum {unknown} */
                    chartType: "aggregatePropertiesValues";
                    xAxisTitle?: string;
                    yAxisTitle?: string;
                    /** @enum {string} */
                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                    timeRange?: {
                        /** @enum {string} */
                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                    };
                    description?: string;
                    emptyStateText?: string;
                    /** @enum {string} */
                    func: "sum" | "average" | "min" | "max" | "median" | "last";
                    properties: string[];
                    measureTimeBy: string;
                    dataset?: components["schemas"]["def-1"];
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    icon?: string;
                    /** @enum {unknown} */
                    type: "line-chart";
                    title?: string;
                    blueprint: string;
                    /** @enum {unknown} */
                    chartType: "countEntities";
                    xAxisTitle?: string;
                    yAxisTitle?: string;
                    /** @enum {string} */
                    timeInterval?: "hour" | "day" | "isoWeek" | "month";
                    timeRange?: {
                        /** @enum {string} */
                        preset: "today" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                    };
                    description?: string;
                    emptyStateText?: string;
                    /** @enum {string} */
                    func: "count" | "average";
                    breakdownProperty?: string;
                    measureTimeBy: string;
                    dataset?: components["schemas"]["def-1"];
                }) | ({
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {string} */
                    type: "entities-number-chart";
                    title?: string;
                    icon?: string;
                    description?: string;
                    emptyStateText?: string;
                    /** @enum {string} */
                    unit: "none" | "$" | "€" | "£" | "%" | "custom";
                    /** @enum {string} */
                    unitAlignment?: "left" | "right";
                    /** @enum {string} */
                    calculationBy?: "entities" | "property";
                    conditionalFormatting?: {
                        /** @enum {unknown} */
                        operator: ">" | ">=" | "<" | "<=" | "=" | "!=";
                        value: number;
                        message?: string;
                        description?: string;
                        /** @enum {string} */
                        color?: "blue" | "turquoise" | "orange" | "purple" | "pink" | "yellow" | "green" | "red" | "gold" | "silver" | "paleBlue" | "darkGray" | "lightGray" | "bronze" | "lime" | "olive" | "brown";
                    }[];
                } & (unknown & unknown & unknown & unknown & unknown & unknown & unknown)) | ({
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {string} */
                    type: "iframe-widget";
                    title: string;
                    icon?: string;
                    description?: string;
                    /** Format: url */
                    url: string;
                    /** @enum {string} */
                    urlType: "public" | "protected";
                } & unknown) | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {string} */
                    type: "markdown";
                    title: string;
                    icon?: string;
                    markdown?: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {unknown} */
                    type: "team-info";
                    title?: string;
                    team_name: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {string} */
                    type: "recently-viewed-entities";
                    title: string;
                    icon?: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {string} */
                    type: "recently-used-actions";
                    title: string;
                    icon?: string;
                } | {
                    id?: string;
                    updatedAt?: string;
                    updatedBy?: string;
                    createdAt?: string;
                    createdBy?: string;
                    /** @enum {string} */
                    type: "my-entities";
                    title: string;
                    icon?: string;
                } | components["schemas"]["def-3"] | components["schemas"]["def-4"])[];
            }[];
        };
        /** /schemas/searchIdentifierQuerySchema */
        "def-5": {
            /** @enum {unknown} */
            combinator: "and" | "or";
            /** @description A search query to define the entity's identifier based on a property of the entity.<br/>Read more [here](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#map-by-property). */
            rules: ({
                property: string;
                /** @enum {unknown} */
                operator: "=";
                value: string | number | null;
            } | {
                property: string;
                /** @enum {unknown} */
                operator: "in" | "containsAny";
                value: string[];
            } | {
                property: string;
                /** @enum {unknown} */
                operator: "contains";
                value: string | string[] | null;
            } | components["schemas"]["def-5"])[];
        };
        /** /schemas/searchRelationsQuerySchema */
        "def-6": {
            /** @enum {unknown} */
            combinator: "and" | "or";
            /** @description A search query to define the entity's identifier based on a property of the entity.<br/>Read more [here](https://docs.port.io/build-your-software-catalog/customize-integrations/configure-mapping#map-by-property). */
            rules: ({
                property: string;
                /** @enum {unknown} */
                operator: "=";
                value: string | number | null;
            } | {
                property: string;
                /** @enum {unknown} */
                operator: "in" | "containsAny";
                value: string[];
            } | {
                property: string;
                /** @enum {unknown} */
                operator: "contains";
                value: string | string[] | null;
            } | components["schemas"]["def-6"])[];
        };
        /** /schemas/entitiesQueryV2 */
        "def-7": {
            /** @enum {unknown} */
            combinator: "and" | "or";
            rules: ({
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: "between" | "notBetween" | "=";
                value: {
                    /** Format: date-time */
                    from: string;
                    /** Format: date-time */
                    to: string;
                } | {
                    /** @enum {string} */
                    preset: "today" | "tomorrow" | "yesterday" | "lastDay" | "lastWeek" | "last2Weeks" | "lastMonth" | "last3Months" | "last6Months" | "last12Months";
                } | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | ({
                /** @enum {unknown} */
                operator: "isEmpty" | "isNotEmpty";
                property: string;
            } | {
                /** @enum {unknown} */
                operator: "isEmpty" | "isNotEmpty";
                /** @enum {string} */
                targetProperty?: "$title" | "$identifier";
                relation: string;
            } | {
                /** @enum {unknown} */
                operator: "isEmpty" | "isNotEmpty";
                scorecardRule?: string;
                scorecard: string;
            }) | {
                /** @enum {unknown} */
                operator: "isExpired" | "isNotExpired";
                property: string;
            } | {
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: ">" | ">=" | "<" | "<=";
                value: number | string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | ({
                property: string | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
                /** @enum {unknown} */
                operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                value: null | string | number | boolean | string[] | {
                    property: string;
                    /** @enum {string} */
                    context: "user" | "userTeams";
                };
            } | {
                relation: string;
                /** @enum {string} */
                targetProperty?: "$title" | "$identifier";
                /** @enum {unknown} */
                operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                value: null | string | number | boolean | string[];
            } | {
                scorecard: string;
                scorecardRule?: string;
                /** @enum {unknown} */
                operator: "=" | "!=" | "containsAny" | "contains" | "doesNotContains" | "beginsWith" | "doesNotBeginsWith" | "endsWith" | "doesNotEndsWith" | "in" | "notIn";
                value: null | string | number | boolean | string[];
            }) | {
                /** @enum {unknown} */
                operator: "relatedTo";
                blueprint: string;
                value: string | string[];
                /** @enum {unknown} */
                direction?: "upstream" | "downstream";
                required?: boolean;
            } | {
                propertySchema: {
                    type: string;
                    format?: string;
                    items?: {
                        type: string;
                        format?: string;
                    };
                };
                /** @enum {unknown} */
                operator: "=" | "!=" | "contains";
                value?: null | string | number | boolean;
            } | {
                property: {
                    path: (string | {
                        relation?: string;
                        maxHops?: number;
                    })[];
                    fromBlueprint?: string;
                };
                /** @enum {string} */
                operator: "matchAny";
                value: string | string[];
            } | components["schemas"]["def-7"])[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
