# Version Management Best Practices

Guidelines for semantic versioning and releasing the Port SDK.

## Semantic Versioning

This project follows [Semantic Versioning 2.0.0](https://semver.org/):

```
MAJOR.MINOR.PATCH[-PRERELEASE]
```

### Version Format

- **MAJOR** (1.0.0): Breaking changes, incompatible API changes
- **MINOR** (0.1.0): New features, backward-compatible
- **PATCH** (0.0.1): Bug fixes, backward-compatible
- **PRERELEASE** (0.1.0-beta.1): Pre-release versions for testing

---

## When to Bump Versions

### Patch Version (0.0.X)

**Increment for backward-compatible bug fixes:**

✅ **Examples:**
- Fixing a bug in error handling
- Correcting documentation typos
- Fixing type definitions
- Performance improvements (no API changes)
- Internal refactoring (no external impact)

```bash
pnpm version:patch
```

### Minor Version (0.X.0)

**Increment for backward-compatible new features:**

✅ **Examples:**
- Adding new resource methods (e.g., new CRUD operation)
- Adding new configuration options (with defaults)
- Adding new error types
- Deprecating features (not removing them)
- Adding new optional parameters

```bash
pnpm version:minor
```

### Major Version (X.0.0)

**Increment for breaking changes:**

⚠️ **Examples:**
- Removing or renaming public API methods
- Changing function signatures (required parameters)
- Removing or renaming exported types
- Changing default behavior significantly
- Requiring new dependencies with breaking changes
- Dropping support for Node.js versions

```bash
pnpm version:major
```

### Prerelease Version (0.X.0-beta.Y)

**Use for testing before official release:**

✅ **Examples:**
- Testing breaking changes before major release
- Beta testing new features
- Release candidates

```bash
pnpm version:prerelease
```

---

## Version Bump Workflow

### Automated Process

The SDK includes automated version bump scripts that handle:
1. ✅ Version number increment in `package.json`
2. ✅ Git commit with standardized message
3. ✅ Git tag creation
4. ✅ Automatic push to remote (commit + tags)

### Step-by-Step Release Process

#### 1. Ensure Clean State

```bash
# Check git status
git status

# Ensure you're on main branch
git checkout main

# Pull latest changes
git pull origin main

# Ensure all tests pass
pnpm test
pnpm test:coverage
```

#### 2. Update CHANGELOG.md

Before bumping version, update `CHANGELOG.md`:

```markdown
## [X.Y.Z] - YYYY-MM-DD

### Added
- New features

### Changed
- Changes in existing functionality

### Deprecated
- Soon-to-be removed features

### Removed
- Removed features

### Fixed
- Bug fixes

### Security
- Security fixes
```

#### 3. Choose Version Bump Type

**For bug fixes:**
```bash
pnpm version:patch
# Example: 0.1.0 → 0.1.1
```

**For new features:**
```bash
pnpm version:minor
# Example: 0.1.1 → 0.2.0
```

**For breaking changes:**
```bash
pnpm version:major
# Example: 0.2.0 → 1.0.0
```

**For pre-releases:**
```bash
pnpm version:prerelease
# Example: 0.2.0 → 0.2.1-beta.0
```

#### 4. Verify Release

After version bump:

```bash
# Check that commit was created
git log -1

# Check that tag was created
git tag -l

# Verify version in package.json
cat package.json | grep version
```

#### 5. Publish to npm (When Ready)

```bash
# Dry run first
npm publish --dry-run

# Publish to npm
npm publish

# Or publish with public access
npm publish --access public
```

---

## Breaking Change Guidelines

### What Constitutes a Breaking Change?

❌ **Breaking Changes (Major Version):**

1. **Removing public APIs:**
   ```typescript
   // Before
   client.entities.create(data);
   
   // After - BREAKING
   // Method removed entirely
   ```

2. **Changing required parameters:**
   ```typescript
   // Before
   get(id: string): Promise<Entity>
   
   // After - BREAKING
   get(id: string, options: GetOptions): Promise<Entity>
   // ^ options is now required
   ```

3. **Changing return types:**
   ```typescript
   // Before
   list(): Promise<Entity[]>
   
   // After - BREAKING
   list(): Promise<PaginatedResponse<Entity>>
   ```

4. **Renaming exports:**
   ```typescript
   // Before
   import { PortClient } from '@port-labs/port-sdk';
   
   // After - BREAKING
   import { Client } from '@port-labs/port-sdk';
   ```

### ✅ **Non-Breaking Changes (Minor Version):**

1. **Adding optional parameters:**
   ```typescript
   // Before
   get(id: string): Promise<Entity>
   
   // After - NOT BREAKING
   get(id: string, options?: GetOptions): Promise<Entity>
   // ^ options is optional
   ```

2. **Adding new methods:**
   ```typescript
   // Before
   class EntityResource {
     create() {}
     get() {}
   }
   
   // After - NOT BREAKING
   class EntityResource {
     create() {}
     get() {}
     search() {}  // New method
   }
   ```

3. **Expanding return types:**
   ```typescript
   // Before
   interface Entity {
     id: string;
     title: string;
   }
   
   // After - NOT BREAKING
   interface Entity {
     id: string;
     title: string;
     description?: string;  // New optional field
   }
   ```

---

## Pre-Release Process

For major changes, use pre-release versions for testing:

### Beta Release Flow

```bash
# 1. Create feature branch
git checkout -b feat/major-changes

# 2. Make changes and test
pnpm test
pnpm test:coverage

# 3. Commit changes
git add .
git commit -m "feat: major API redesign"

# 4. Create pre-release
pnpm version:prerelease
# Creates: 1.0.0-beta.0

# 5. Publish pre-release
npm publish --tag beta

# 6. Test in real projects
# Install with: npm install @port-labs/port-sdk@beta

# 7. Iterate if needed
# Make fixes, commit, then:
pnpm version:prerelease
# Creates: 1.0.0-beta.1

# 8. When ready for production
pnpm version:major
# Creates: 1.0.0

# 9. Publish stable version
npm publish
```

---

## Commit Message Format

Version bump commits automatically use this format:

```
chore: release vX.Y.Z
```

### Other Commit Conventions

Follow [Conventional Commits](https://www.conventionalcommits.org/):

- `feat:` - New feature (minor version)
- `fix:` - Bug fix (patch version)
- `docs:` - Documentation only
- `style:` - Code style changes (formatting)
- `refactor:` - Code refactoring
- `perf:` - Performance improvements
- `test:` - Adding or updating tests
- `chore:` - Maintenance tasks
- `ci:` - CI/CD changes
- `build:` - Build system changes

**Breaking changes:**
```
feat!: redesign API interface

BREAKING CHANGE: client.entities.list() now returns PaginatedResponse
```

---

## Version Bump Checklist

Before releasing a new version:

- [ ] All tests pass (`pnpm test`)
- [ ] Coverage meets thresholds (`pnpm test:coverage`)
- [ ] Type checking passes (`pnpm type-check`)
- [ ] Build succeeds (`pnpm build`)
- [ ] CHANGELOG.md updated
- [ ] Documentation updated (if needed)
- [ ] Breaking changes documented (if major version)
- [ ] Commit history is clean
- [ ] On main branch
- [ ] All changes committed

After version bump:

- [ ] Verify commit was created
- [ ] Verify tag was created
- [ ] Verify tag was pushed
- [ ] Test installation: `npm install @port-labs/port-sdk@latest`
- [ ] Verify package on npmjs.com

---

## Rollback Strategy

If you need to rollback a version:

### Before Publishing to npm

```bash
# Undo version bump
git reset --hard HEAD~1

# Remove tag locally
git tag -d vX.Y.Z

# Remove tag from remote
git push origin :refs/tags/vX.Y.Z
```

### After Publishing to npm

**You cannot unpublish a version after 72 hours.**

Options:
1. **Deprecate the version:**
   ```bash
   npm deprecate @port-labs/port-sdk@X.Y.Z "This version has issues, use X.Y.Z+1 instead"
   ```

2. **Publish a new patch version:**
   ```bash
   # Fix the issue
   pnpm version:patch
   npm publish
   ```

---

## Version History

Track version history in CHANGELOG.md:

```markdown
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Features in development

## [1.0.0] - 2025-10-10

### Added
- Initial stable release
- Full CRUD operations for all resources

### Changed
- API redesign (breaking change)

## [0.2.0] - 2025-10-05

### Added
- Scorecard resource support
- Smoke tests for system blueprints

## [0.1.0] - 2025-10-01

### Added
- Initial release
- Entity, Blueprint, Action resources
```

---

## Automation Notes

### Automatic Actions After Version Bump

The `postversion` script automatically:
1. Pushes the commit to remote
2. Pushes the tag to remote

### Manual Publishing

Publishing to npm is **manual** to allow for:
- Final verification
- Smoke testing
- Documentation review

---

## Best Practices Summary

1. ✅ **Always update CHANGELOG.md** before version bump
2. ✅ **Test thoroughly** before any version bump
3. ✅ **Use pre-releases** for testing major changes
4. ✅ **Follow semantic versioning** strictly
5. ✅ **Document breaking changes** clearly
6. ✅ **Keep version history** in CHANGELOG.md
7. ✅ **Test installation** after publishing
8. ✅ **Never force-push** tags
9. ✅ **Coordinate major releases** with users
10. ✅ **Provide migration guides** for breaking changes

---

## Quick Reference

| Action | Command | Version Change |
|--------|---------|----------------|
| Bug fix | `pnpm version:patch` | 0.1.0 → 0.1.1 |
| New feature | `pnpm version:minor` | 0.1.1 → 0.2.0 |
| Breaking change | `pnpm version:major` | 0.2.0 → 1.0.0 |
| Pre-release | `pnpm version:prerelease` | 0.2.0 → 0.2.1-beta.0 |
| Publish | `npm publish` | Push to npm registry |
| Deprecate | `npm deprecate` | Mark version as deprecated |

---

## Additional Resources

- [Semantic Versioning Specification](https://semver.org/)
- [Keep a Changelog](https://keepachangelog.com/)
- [Conventional Commits](https://www.conventionalcommits.org/)
- [npm Version Documentation](https://docs.npmjs.com/cli/v9/commands/npm-version)
