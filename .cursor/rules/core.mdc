---
alwaysApply: true
description: SDK Core rules
globs: ["**/*"]
---

# Port SDK Security-First Development Rules

## üîê Security is Priority #1

**CRITICAL**: Security must be the highest priority in all code changes. Every commit must be reviewed for security implications.

---

## 1. Dependency Security

### Package Management
- ‚úÖ **ALWAYS** audit dependencies before adding: `pnpm audit`
- ‚úÖ **NEVER** install packages without verifying source and reputation
- ‚úÖ **REQUIRED**: Check package age, maintainership, and download stats on npmjs.com
- ‚úÖ **REQUIRED**: Review package.json of dependencies for suspicious scripts
- ‚úÖ **REQUIRED**: Pin exact versions in package.json (no `^` or `~`)
- ‚úÖ **REQUIRED**: Run security scans on every dependency update

### Red Flags for Dependencies
- ‚ùå Package created in last 30 days (unless from trusted org)
- ‚ùå Package with < 1000 downloads/week (unless well-known)
- ‚ùå Package with no GitHub repo or suspicious repo
- ‚ùå Package with typosquatting similarity to popular packages
- ‚ùå Packages requesting unusual permissions
- ‚ùå Dependencies with known CVEs

### Allowed Dependencies
- ‚úÖ Official packages from known organizations (@types, @port-labs, etc.)
- ‚úÖ Well-established packages (> 1 year old, > 100k downloads/week)
- ‚úÖ Packages with active maintenance and security track record

---

## 2. Credential & Secret Management

### Strict Rules
- ‚ùå **NEVER** hardcode credentials, API keys, or tokens
- ‚ùå **NEVER** log sensitive information (tokens, passwords, credentials)
- ‚ùå **NEVER** commit .env files or credentials to git
- ‚ùå **NEVER** expose credentials in error messages or stack traces
- ‚úÖ **ALWAYS** use environment variables for sensitive data
- ‚úÖ **ALWAYS** sanitize error messages before exposing to users
- ‚úÖ **ALWAYS** validate .gitignore includes .env, *.key, *.pem, credentials.*

### Credential Validation
```typescript
// ‚úÖ GOOD - No credentials in code
const apiKey = process.env.PORT_API_KEY;

// ‚ùå BAD - Hardcoded credential
const apiKey = "sk_live_1234567890";
```

---

## 3. Input Validation & Sanitization

### All User Input Must Be Validated
- ‚úÖ **REQUIRED**: Validate all input parameters before use
- ‚úÖ **REQUIRED**: Sanitize strings used in URLs, SQL, or commands
- ‚úÖ **REQUIRED**: Use TypeScript strict mode for type safety
- ‚úÖ **REQUIRED**: Validate lengths, formats, and ranges
- ‚ùå **NEVER** trust user input without validation
- ‚ùå **NEVER** execute user input as code
- ‚ùå **NEVER** interpolate user input directly into queries

### Examples
```typescript
// ‚úÖ GOOD - Validated and sanitized
function getEntity(identifier: string): Promise<Entity> {
  if (!/^[a-zA-Z0-9_-]+$/.test(identifier)) {
    throw new ValidationError('Invalid identifier format');
  }
  return this.httpClient.get(`/entities/${encodeURIComponent(identifier)}`);
}

// ‚ùå BAD - No validation
function getEntity(identifier: string): Promise<Entity> {
  return this.httpClient.get(`/entities/${identifier}`); // Injection risk!
}
```

---

## 4. Error Handling & Information Disclosure

### Secure Error Handling
- ‚úÖ **REQUIRED**: Catch and handle all errors appropriately
- ‚úÖ **REQUIRED**: Return generic error messages to users
- ‚úÖ **REQUIRED**: Log detailed errors securely (not to user-facing output)
- ‚ùå **NEVER** expose stack traces to users
- ‚ùå **NEVER** expose internal paths or system information
- ‚ùå **NEVER** expose database queries or internal logic

### Examples
```typescript
// ‚úÖ GOOD - Safe error handling
try {
  await dangerousOperation();
} catch (error) {
  // Log detailed error internally
  console.error('Internal error:', error);
  // Return generic message to user
  throw new PortError('Operation failed. Please try again.');
}

// ‚ùå BAD - Exposes internals
try {
  await dangerousOperation();
} catch (error) {
  throw new Error(`Database query failed: ${error.stack}`); // Leaks info!
}
```

---

## 5. Network & Communication Security

### HTTPS Only
- ‚úÖ **REQUIRED**: Use HTTPS for all API communication
- ‚úÖ **REQUIRED**: Validate TLS certificates (no `rejectUnauthorized: false`)
- ‚úÖ **REQUIRED**: Use secure proxy configurations
- ‚ùå **NEVER** allow HTTP connections to API endpoints
- ‚ùå **NEVER** disable SSL verification

### Proxy Security
- ‚úÖ **REQUIRED**: Support corporate proxies securely
- ‚úÖ **REQUIRED**: Respect NO_PROXY environment variable
- ‚úÖ **REQUIRED**: Handle proxy authentication securely
- ‚ùå **NEVER** log proxy credentials

---

## 6. Code Quality & Security Practices

### TypeScript Security
- ‚úÖ **REQUIRED**: Use strict TypeScript mode
- ‚úÖ **REQUIRED**: No `any` types (use `unknown` if needed)
- ‚úÖ **REQUIRED**: Enable all strict compiler options
- ‚úÖ **REQUIRED**: Use readonly where possible
- ‚ùå **NEVER** use `eval()`, `Function()`, or `setTimeout(string)`
- ‚ùå **NEVER** use `@ts-ignore` without security review
- ‚ùå **NEVER** disable TypeScript checks for convenience

### Secure Coding Patterns
```typescript
// ‚úÖ GOOD - Type-safe and secure
function processData(data: unknown): ProcessedData {
  if (!isValidData(data)) {
    throw new ValidationError('Invalid data format');
  }
  return transformData(data);
}

// ‚ùå BAD - Unsafe type assertion
function processData(data: any): ProcessedData {
  return data as ProcessedData; // No validation!
}
```

---

## 7. Authentication & Authorization

### Token Management
- ‚úÖ **REQUIRED**: Store tokens securely in memory only
- ‚úÖ **REQUIRED**: Clear tokens on logout or error
- ‚úÖ **REQUIRED**: Implement token expiry and refresh
- ‚úÖ **REQUIRED**: Use secure token transmission (HTTPS)
- ‚ùå **NEVER** store tokens in localStorage or cookies (in browser contexts)
- ‚ùå **NEVER** transmit tokens in URL parameters
- ‚ùå **NEVER** log authentication tokens

### OAuth Security
- ‚úÖ **REQUIRED**: Use PKCE for OAuth flows (when applicable)
- ‚úÖ **REQUIRED**: Validate OAuth state parameters
- ‚úÖ **REQUIRED**: Use secure redirect URIs

---

## 8. Rate Limiting & DoS Prevention

### Protection Mechanisms
- ‚úÖ **REQUIRED**: Implement client-side rate limiting
- ‚úÖ **REQUIRED**: Handle 429 (Rate Limit) responses appropriately
- ‚úÖ **REQUIRED**: Use exponential backoff for retries
- ‚úÖ **REQUIRED**: Set reasonable timeouts on all requests
- ‚ùå **NEVER** retry indefinitely
- ‚ùå **NEVER** overwhelm the API with concurrent requests

---

## 9. Testing & Validation

### Security Testing Requirements
- ‚úÖ **REQUIRED**: Test all error paths
- ‚úÖ **REQUIRED**: Test with invalid/malicious input
- ‚úÖ **REQUIRED**: Test authentication failures
- ‚úÖ **REQUIRED**: Test rate limiting and timeouts
- ‚úÖ **REQUIRED**: Run security scans before releases

### Pre-Commit Checklist
- [ ] No hardcoded credentials or secrets
- [ ] All inputs validated and sanitized
- [ ] Error messages don't leak sensitive info
- [ ] No new dependencies without security review
- [ ] TypeScript strict mode passes
- [ ] Tests cover security scenarios
- [ ] `pnpm audit` shows no high/critical vulnerabilities

---

## 10. Dependency Security Scanning

### Required Scans
```bash
# Before every commit
pnpm audit

# Before every release
pnpm audit --audit-level=moderate

# Check for outdated packages
pnpm outdated

# Update with caution
pnpm update --interactive
```

### Vulnerability Response
- **CRITICAL**: Patch within 24 hours
- **HIGH**: Patch within 7 days
- **MODERATE**: Patch within 30 days
- **LOW**: Patch in next release cycle

---

## 11. Code Review Security Checklist

Before approving any PR, verify:

### Credentials & Secrets
- [ ] No hardcoded credentials
- [ ] No committed .env files
- [ ] No API keys in code or comments
- [ ] Sensitive data properly redacted in logs

### Input Validation
- [ ] All user input validated
- [ ] URL parameters properly encoded
- [ ] No SQL/command injection vectors
- [ ] No eval() or similar dangerous functions

### Dependencies
- [ ] New dependencies justified and reviewed
- [ ] Dependencies from trusted sources
- [ ] No suspicious package names
- [ ] `pnpm audit` passes

### Error Handling
- [ ] Errors caught and handled
- [ ] No stack traces exposed to users
- [ ] Error messages don't leak internals
- [ ] Logging doesn't include sensitive data

### Network Security
- [ ] HTTPS used for all API calls
- [ ] SSL certificates validated
- [ ] Timeouts configured
- [ ] Rate limiting respected

---

## 12. Security Documentation

### Required Documentation
- ‚úÖ Document all security considerations
- ‚úÖ Provide secure usage examples
- ‚úÖ Document credential management
- ‚úÖ Document proxy configuration
- ‚úÖ Maintain security changelog

---

## 13. Incident Response

### If Security Issue Detected
1. **STOP**: Don't commit or deploy
2. **ASSESS**: Determine severity and scope
3. **FIX**: Implement secure solution
4. **TEST**: Verify fix doesn't introduce new issues
5. **DOCUMENT**: Update security docs and changelog
6. **NOTIFY**: Inform stakeholders if user-impacting

---

## 14. Regular Security Maintenance

### Weekly Tasks
- [ ] Review dependency security advisories
- [ ] Check for outdated packages
- [ ] Review recent security bulletins

### Monthly Tasks
- [ ] Full security audit of codebase
- [ ] Update dependencies (with testing)
- [ ] Review and update security documentation

### Before Each Release
- [ ] Complete security audit
- [ ] Update all dependencies safely
- [ ] Run comprehensive security tests
- [ ] Review CHANGELOG for security fixes

---

## Security Resources

- [OWASP Top 10](https://owasp.org/www-project-top-ten/)
- [Node.js Security Best Practices](https://nodejs.org/en/docs/guides/security/)
- [npm Security Best Practices](https://docs.npmjs.com/security-best-practices)
- [Snyk Security Database](https://security.snyk.io/)

---

## Summary: Security-First Mindset

**Remember**: Security is not a feature, it's a requirement. Every line of code must be written with security in mind. When in doubt, choose the more secure option.

### Golden Rules
1. üîê Never trust user input
2. üîí Never hardcode credentials
3. üõ°Ô∏è Validate everything
4. üîç Audit dependencies religiously
5. üìù Log securely, never expose secrets
6. üö´ Fail securely, never leak information
7. üîÑ Keep dependencies updated
8. üß™ Test security scenarios
9. üìö Document security considerations
10. üö® Report issues immediately

