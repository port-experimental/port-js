name: Tests

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Type check
        run: pnpm type-check
      
      - name: Run unit tests with coverage
        run: pnpm test:coverage
      
      - name: Check coverage thresholds
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
            
            if (!fs.existsSync(coveragePath)) {
              console.error('❌ Coverage file not found at:', coveragePath);
              console.log('Available files in coverage directory:');
              if (fs.existsSync('coverage')) {
                fs.readdirSync('coverage').forEach(file => console.log('  -', file));
              } else {
                console.log('Coverage directory does not exist!');
              }
              process.exit(1);
            }
            
            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            const { statements, branches, functions, lines } = coverage.total;
            
            console.log('📊 Coverage Report:');
            console.log('  Statements:', statements.pct + '%');
            console.log('  Branches:', branches.pct + '%');
            console.log('  Functions:', functions.pct + '%');
            console.log('  Lines:', lines.pct + '%');
            console.log('');
            
            // Pragmatic thresholds matching vitest.config.ts
            const thresholds = {
              statements: 68,
              branches: 80,
              functions: 70,
              lines: 68
            };
            
            const failed = [];
            if (statements.pct < thresholds.statements) failed.push(\`statements (\${statements.pct}% < \${thresholds.statements}%)\`);
            if (branches.pct < thresholds.branches) failed.push(\`branches (\${branches.pct}% < \${thresholds.branches}%)\`);
            if (functions.pct < thresholds.functions) failed.push(\`functions (\${functions.pct}% < \${thresholds.functions}%)\`);
            if (lines.pct < thresholds.lines) failed.push(\`lines (\${lines.pct}% < \${thresholds.lines}%)\`);
            
            if (failed.length > 0) {
              console.error('❌ Coverage thresholds not met:');
              failed.forEach(f => console.error('  -', f));
              process.exit(1);
            }
            
            console.log('✅ All coverage thresholds met!');
            console.log('   Statements: ≥68%, Branches: ≥80%, Functions: ≥70%, Lines: ≥68%');
          "
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run security audit
        run: |
          echo "🔒 Running security audit..."
          pnpm audit --audit-level=moderate || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 0 ]; then
              echo "✅ No vulnerabilities found"
            else
              echo "⚠️  Vulnerabilities detected!"
              echo ""
              echo "📋 Detailed audit report:"
              pnpm audit --audit-level=moderate --json > audit-report.json || true
              cat audit-report.json
              echo ""
              echo "Run 'pnpm audit fix' to attempt automatic fixes"
              exit $EXIT_CODE
            fi
          }
      
      - name: Upload audit report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Type check
        run: pnpm type-check
